// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/session_bundle/manifest.proto

#ifndef PROTOBUF_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();
void protobuf_InitDefaults_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();
void protobuf_AssignDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();
void protobuf_ShutdownFile_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();

class AssetFile;
class ClassificationSignature;
class GenericSignature;
class RegressionSignature;
class Signature;
class Signatures;
class TensorBinding;

// ===================================================================

class Signatures : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.Signatures) */ {
 public:
  Signatures();
  virtual ~Signatures();

  Signatures(const Signatures& from);

  inline Signatures& operator=(const Signatures& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Signatures& default_instance();

  static const Signatures* internal_default_instance();

  void Swap(Signatures* other);

  // implements Message ----------------------------------------------

  inline Signatures* New() const { return New(NULL); }

  Signatures* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Signatures& from);
  void MergeFrom(const Signatures& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Signatures* other);
  void UnsafeMergeFrom(const Signatures& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional .tensorflow.serving.Signature default_signature = 1;
  bool has_default_signature() const;
  void clear_default_signature();
  static const int kDefaultSignatureFieldNumber = 1;
  const ::tensorflow::serving::Signature& default_signature() const;
  ::tensorflow::serving::Signature* mutable_default_signature();
  ::tensorflow::serving::Signature* release_default_signature();
  void set_allocated_default_signature(::tensorflow::serving::Signature* default_signature);

  // map<string, .tensorflow.serving.Signature> named_signatures = 2;
  int named_signatures_size() const;
  void clear_named_signatures();
  static const int kNamedSignaturesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >&
      named_signatures() const;
  ::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >*
      mutable_named_signatures();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.Signatures)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::tensorflow::serving::Signature,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Signatures_NamedSignaturesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::tensorflow::serving::Signature,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > named_signatures_;
  ::tensorflow::serving::Signature* default_signature_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void  protobuf_AddDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void protobuf_AssignDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Signatures> Signatures_default_instance_;

// -------------------------------------------------------------------

class TensorBinding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.TensorBinding) */ {
 public:
  TensorBinding();
  virtual ~TensorBinding();

  TensorBinding(const TensorBinding& from);

  inline TensorBinding& operator=(const TensorBinding& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorBinding& default_instance();

  static const TensorBinding* internal_default_instance();

  void Swap(TensorBinding* other);

  // implements Message ----------------------------------------------

  inline TensorBinding* New() const { return New(NULL); }

  TensorBinding* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TensorBinding& from);
  void MergeFrom(const TensorBinding& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TensorBinding* other);
  void UnsafeMergeFrom(const TensorBinding& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tensor_name = 1;
  void clear_tensor_name();
  static const int kTensorNameFieldNumber = 1;
  const ::std::string& tensor_name() const;
  void set_tensor_name(const ::std::string& value);
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  ::std::string* mutable_tensor_name();
  ::std::string* release_tensor_name();
  void set_allocated_tensor_name(::std::string* tensor_name);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.TensorBinding)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tensor_name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void  protobuf_AddDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void protobuf_AssignDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TensorBinding> TensorBinding_default_instance_;

// -------------------------------------------------------------------

class AssetFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.AssetFile) */ {
 public:
  AssetFile();
  virtual ~AssetFile();

  AssetFile(const AssetFile& from);

  inline AssetFile& operator=(const AssetFile& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AssetFile& default_instance();

  static const AssetFile* internal_default_instance();

  void Swap(AssetFile* other);

  // implements Message ----------------------------------------------

  inline AssetFile* New() const { return New(NULL); }

  AssetFile* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AssetFile& from);
  void MergeFrom(const AssetFile& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AssetFile* other);
  void UnsafeMergeFrom(const AssetFile& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.serving.TensorBinding tensor_binding = 1;
  bool has_tensor_binding() const;
  void clear_tensor_binding();
  static const int kTensorBindingFieldNumber = 1;
  const ::tensorflow::serving::TensorBinding& tensor_binding() const;
  ::tensorflow::serving::TensorBinding* mutable_tensor_binding();
  ::tensorflow::serving::TensorBinding* release_tensor_binding();
  void set_allocated_tensor_binding(::tensorflow::serving::TensorBinding* tensor_binding);

  // optional string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.AssetFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::tensorflow::serving::TensorBinding* tensor_binding_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void  protobuf_AddDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void protobuf_AssignDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AssetFile> AssetFile_default_instance_;

// -------------------------------------------------------------------

class Signature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.Signature) */ {
 public:
  Signature();
  virtual ~Signature();

  Signature(const Signature& from);

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Signature& default_instance();

  enum TypeCase {
    kRegressionSignature = 1,
    kClassificationSignature = 2,
    kGenericSignature = 3,
    TYPE_NOT_SET = 0,
  };

  static const Signature* internal_default_instance();

  void Swap(Signature* other);

  // implements Message ----------------------------------------------

  inline Signature* New() const { return New(NULL); }

  Signature* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Signature* other);
  void UnsafeMergeFrom(const Signature& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.serving.RegressionSignature regression_signature = 1;
  bool has_regression_signature() const;
  void clear_regression_signature();
  static const int kRegressionSignatureFieldNumber = 1;
  const ::tensorflow::serving::RegressionSignature& regression_signature() const;
  ::tensorflow::serving::RegressionSignature* mutable_regression_signature();
  ::tensorflow::serving::RegressionSignature* release_regression_signature();
  void set_allocated_regression_signature(::tensorflow::serving::RegressionSignature* regression_signature);

  // optional .tensorflow.serving.ClassificationSignature classification_signature = 2;
  bool has_classification_signature() const;
  void clear_classification_signature();
  static const int kClassificationSignatureFieldNumber = 2;
  const ::tensorflow::serving::ClassificationSignature& classification_signature() const;
  ::tensorflow::serving::ClassificationSignature* mutable_classification_signature();
  ::tensorflow::serving::ClassificationSignature* release_classification_signature();
  void set_allocated_classification_signature(::tensorflow::serving::ClassificationSignature* classification_signature);

  // optional .tensorflow.serving.GenericSignature generic_signature = 3;
  bool has_generic_signature() const;
  void clear_generic_signature();
  static const int kGenericSignatureFieldNumber = 3;
  const ::tensorflow::serving::GenericSignature& generic_signature() const;
  ::tensorflow::serving::GenericSignature* mutable_generic_signature();
  ::tensorflow::serving::GenericSignature* release_generic_signature();
  void set_allocated_generic_signature(::tensorflow::serving::GenericSignature* generic_signature);

  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.Signature)
 private:
  inline void set_has_regression_signature();
  inline void set_has_classification_signature();
  inline void set_has_generic_signature();

  inline bool has_type() const;
  void clear_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::tensorflow::serving::RegressionSignature* regression_signature_;
    ::tensorflow::serving::ClassificationSignature* classification_signature_;
    ::tensorflow::serving::GenericSignature* generic_signature_;
  } type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void  protobuf_AddDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void protobuf_AssignDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Signature> Signature_default_instance_;

// -------------------------------------------------------------------

class RegressionSignature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.RegressionSignature) */ {
 public:
  RegressionSignature();
  virtual ~RegressionSignature();

  RegressionSignature(const RegressionSignature& from);

  inline RegressionSignature& operator=(const RegressionSignature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegressionSignature& default_instance();

  static const RegressionSignature* internal_default_instance();

  void Swap(RegressionSignature* other);

  // implements Message ----------------------------------------------

  inline RegressionSignature* New() const { return New(NULL); }

  RegressionSignature* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegressionSignature& from);
  void MergeFrom(const RegressionSignature& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegressionSignature* other);
  void UnsafeMergeFrom(const RegressionSignature& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.serving.TensorBinding input = 1;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 1;
  const ::tensorflow::serving::TensorBinding& input() const;
  ::tensorflow::serving::TensorBinding* mutable_input();
  ::tensorflow::serving::TensorBinding* release_input();
  void set_allocated_input(::tensorflow::serving::TensorBinding* input);

  // optional .tensorflow.serving.TensorBinding output = 2;
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::tensorflow::serving::TensorBinding& output() const;
  ::tensorflow::serving::TensorBinding* mutable_output();
  ::tensorflow::serving::TensorBinding* release_output();
  void set_allocated_output(::tensorflow::serving::TensorBinding* output);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.RegressionSignature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tensorflow::serving::TensorBinding* input_;
  ::tensorflow::serving::TensorBinding* output_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void  protobuf_AddDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void protobuf_AssignDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RegressionSignature> RegressionSignature_default_instance_;

// -------------------------------------------------------------------

class ClassificationSignature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ClassificationSignature) */ {
 public:
  ClassificationSignature();
  virtual ~ClassificationSignature();

  ClassificationSignature(const ClassificationSignature& from);

  inline ClassificationSignature& operator=(const ClassificationSignature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassificationSignature& default_instance();

  static const ClassificationSignature* internal_default_instance();

  void Swap(ClassificationSignature* other);

  // implements Message ----------------------------------------------

  inline ClassificationSignature* New() const { return New(NULL); }

  ClassificationSignature* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassificationSignature& from);
  void MergeFrom(const ClassificationSignature& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClassificationSignature* other);
  void UnsafeMergeFrom(const ClassificationSignature& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tensorflow.serving.TensorBinding input = 1;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 1;
  const ::tensorflow::serving::TensorBinding& input() const;
  ::tensorflow::serving::TensorBinding* mutable_input();
  ::tensorflow::serving::TensorBinding* release_input();
  void set_allocated_input(::tensorflow::serving::TensorBinding* input);

  // optional .tensorflow.serving.TensorBinding classes = 2;
  bool has_classes() const;
  void clear_classes();
  static const int kClassesFieldNumber = 2;
  const ::tensorflow::serving::TensorBinding& classes() const;
  ::tensorflow::serving::TensorBinding* mutable_classes();
  ::tensorflow::serving::TensorBinding* release_classes();
  void set_allocated_classes(::tensorflow::serving::TensorBinding* classes);

  // optional .tensorflow.serving.TensorBinding scores = 3;
  bool has_scores() const;
  void clear_scores();
  static const int kScoresFieldNumber = 3;
  const ::tensorflow::serving::TensorBinding& scores() const;
  ::tensorflow::serving::TensorBinding* mutable_scores();
  ::tensorflow::serving::TensorBinding* release_scores();
  void set_allocated_scores(::tensorflow::serving::TensorBinding* scores);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ClassificationSignature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tensorflow::serving::TensorBinding* input_;
  ::tensorflow::serving::TensorBinding* classes_;
  ::tensorflow::serving::TensorBinding* scores_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void  protobuf_AddDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void protobuf_AssignDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ClassificationSignature> ClassificationSignature_default_instance_;

// -------------------------------------------------------------------

class GenericSignature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.GenericSignature) */ {
 public:
  GenericSignature();
  virtual ~GenericSignature();

  GenericSignature(const GenericSignature& from);

  inline GenericSignature& operator=(const GenericSignature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericSignature& default_instance();

  static const GenericSignature* internal_default_instance();

  void Swap(GenericSignature* other);

  // implements Message ----------------------------------------------

  inline GenericSignature* New() const { return New(NULL); }

  GenericSignature* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenericSignature& from);
  void MergeFrom(const GenericSignature& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenericSignature* other);
  void UnsafeMergeFrom(const GenericSignature& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .tensorflow.serving.TensorBinding> map = 1;
  int map_size() const;
  void clear_map();
  static const int kMapFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >&
      map() const;
  ::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.GenericSignature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::tensorflow::serving::TensorBinding,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      GenericSignature_MapEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::tensorflow::serving::TensorBinding,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void  protobuf_AddDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto_impl();
  friend void protobuf_AssignDesc_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();
  friend void protobuf_ShutdownFile_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GenericSignature> GenericSignature_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Signatures

// optional .tensorflow.serving.Signature default_signature = 1;
inline bool Signatures::has_default_signature() const {
  return this != internal_default_instance() && default_signature_ != NULL;
}
inline void Signatures::clear_default_signature() {
  if (GetArenaNoVirtual() == NULL && default_signature_ != NULL) delete default_signature_;
  default_signature_ = NULL;
}
inline const ::tensorflow::serving::Signature& Signatures::default_signature() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Signatures.default_signature)
  return default_signature_ != NULL ? *default_signature_
                         : *::tensorflow::serving::Signature::internal_default_instance();
}
inline ::tensorflow::serving::Signature* Signatures::mutable_default_signature() {
  
  if (default_signature_ == NULL) {
    default_signature_ = new ::tensorflow::serving::Signature;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Signatures.default_signature)
  return default_signature_;
}
inline ::tensorflow::serving::Signature* Signatures::release_default_signature() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Signatures.default_signature)
  
  ::tensorflow::serving::Signature* temp = default_signature_;
  default_signature_ = NULL;
  return temp;
}
inline void Signatures::set_allocated_default_signature(::tensorflow::serving::Signature* default_signature) {
  delete default_signature_;
  default_signature_ = default_signature;
  if (default_signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Signatures.default_signature)
}

// map<string, .tensorflow.serving.Signature> named_signatures = 2;
inline int Signatures::named_signatures_size() const {
  return named_signatures_.size();
}
inline void Signatures::clear_named_signatures() {
  named_signatures_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >&
Signatures::named_signatures() const {
  // @@protoc_insertion_point(field_map:tensorflow.serving.Signatures.named_signatures)
  return named_signatures_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::tensorflow::serving::Signature >*
Signatures::mutable_named_signatures() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.serving.Signatures.named_signatures)
  return named_signatures_.MutableMap();
}

inline const Signatures* Signatures::internal_default_instance() {
  return &Signatures_default_instance_.get();
}
// -------------------------------------------------------------------

// TensorBinding

// optional string tensor_name = 1;
inline void TensorBinding::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TensorBinding::tensor_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.TensorBinding.tensor_name)
  return tensor_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorBinding::set_tensor_name(const ::std::string& value) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.TensorBinding.tensor_name)
}
inline void TensorBinding::set_tensor_name(const char* value) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.TensorBinding.tensor_name)
}
inline void TensorBinding::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.TensorBinding.tensor_name)
}
inline ::std::string* TensorBinding::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.TensorBinding.tensor_name)
  return tensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorBinding::release_tensor_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.TensorBinding.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorBinding::set_allocated_tensor_name(::std::string* tensor_name) {
  if (tensor_name != NULL) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.TensorBinding.tensor_name)
}

inline const TensorBinding* TensorBinding::internal_default_instance() {
  return &TensorBinding_default_instance_.get();
}
// -------------------------------------------------------------------

// AssetFile

// optional .tensorflow.serving.TensorBinding tensor_binding = 1;
inline bool AssetFile::has_tensor_binding() const {
  return this != internal_default_instance() && tensor_binding_ != NULL;
}
inline void AssetFile::clear_tensor_binding() {
  if (GetArenaNoVirtual() == NULL && tensor_binding_ != NULL) delete tensor_binding_;
  tensor_binding_ = NULL;
}
inline const ::tensorflow::serving::TensorBinding& AssetFile::tensor_binding() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.AssetFile.tensor_binding)
  return tensor_binding_ != NULL ? *tensor_binding_
                         : *::tensorflow::serving::TensorBinding::internal_default_instance();
}
inline ::tensorflow::serving::TensorBinding* AssetFile::mutable_tensor_binding() {
  
  if (tensor_binding_ == NULL) {
    tensor_binding_ = new ::tensorflow::serving::TensorBinding;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.AssetFile.tensor_binding)
  return tensor_binding_;
}
inline ::tensorflow::serving::TensorBinding* AssetFile::release_tensor_binding() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.AssetFile.tensor_binding)
  
  ::tensorflow::serving::TensorBinding* temp = tensor_binding_;
  tensor_binding_ = NULL;
  return temp;
}
inline void AssetFile::set_allocated_tensor_binding(::tensorflow::serving::TensorBinding* tensor_binding) {
  delete tensor_binding_;
  tensor_binding_ = tensor_binding;
  if (tensor_binding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.AssetFile.tensor_binding)
}

// optional string filename = 2;
inline void AssetFile::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AssetFile::filename() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.AssetFile.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetFile::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.AssetFile.filename)
}
inline void AssetFile::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.AssetFile.filename)
}
inline void AssetFile::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.AssetFile.filename)
}
inline ::std::string* AssetFile::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.AssetFile.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssetFile::release_filename() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.AssetFile.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetFile::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.AssetFile.filename)
}

inline const AssetFile* AssetFile::internal_default_instance() {
  return &AssetFile_default_instance_.get();
}
// -------------------------------------------------------------------

// Signature

// optional .tensorflow.serving.RegressionSignature regression_signature = 1;
inline bool Signature::has_regression_signature() const {
  return type_case() == kRegressionSignature;
}
inline void Signature::set_has_regression_signature() {
  _oneof_case_[0] = kRegressionSignature;
}
inline void Signature::clear_regression_signature() {
  if (has_regression_signature()) {
    delete type_.regression_signature_;
    clear_has_type();
  }
}
inline  const ::tensorflow::serving::RegressionSignature& Signature::regression_signature() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Signature.regression_signature)
  return has_regression_signature()
      ? *type_.regression_signature_
      : ::tensorflow::serving::RegressionSignature::default_instance();
}
inline ::tensorflow::serving::RegressionSignature* Signature::mutable_regression_signature() {
  if (!has_regression_signature()) {
    clear_type();
    set_has_regression_signature();
    type_.regression_signature_ = new ::tensorflow::serving::RegressionSignature;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Signature.regression_signature)
  return type_.regression_signature_;
}
inline ::tensorflow::serving::RegressionSignature* Signature::release_regression_signature() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Signature.regression_signature)
  if (has_regression_signature()) {
    clear_has_type();
    ::tensorflow::serving::RegressionSignature* temp = type_.regression_signature_;
    type_.regression_signature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Signature::set_allocated_regression_signature(::tensorflow::serving::RegressionSignature* regression_signature) {
  clear_type();
  if (regression_signature) {
    set_has_regression_signature();
    type_.regression_signature_ = regression_signature;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Signature.regression_signature)
}

// optional .tensorflow.serving.ClassificationSignature classification_signature = 2;
inline bool Signature::has_classification_signature() const {
  return type_case() == kClassificationSignature;
}
inline void Signature::set_has_classification_signature() {
  _oneof_case_[0] = kClassificationSignature;
}
inline void Signature::clear_classification_signature() {
  if (has_classification_signature()) {
    delete type_.classification_signature_;
    clear_has_type();
  }
}
inline  const ::tensorflow::serving::ClassificationSignature& Signature::classification_signature() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Signature.classification_signature)
  return has_classification_signature()
      ? *type_.classification_signature_
      : ::tensorflow::serving::ClassificationSignature::default_instance();
}
inline ::tensorflow::serving::ClassificationSignature* Signature::mutable_classification_signature() {
  if (!has_classification_signature()) {
    clear_type();
    set_has_classification_signature();
    type_.classification_signature_ = new ::tensorflow::serving::ClassificationSignature;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Signature.classification_signature)
  return type_.classification_signature_;
}
inline ::tensorflow::serving::ClassificationSignature* Signature::release_classification_signature() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Signature.classification_signature)
  if (has_classification_signature()) {
    clear_has_type();
    ::tensorflow::serving::ClassificationSignature* temp = type_.classification_signature_;
    type_.classification_signature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Signature::set_allocated_classification_signature(::tensorflow::serving::ClassificationSignature* classification_signature) {
  clear_type();
  if (classification_signature) {
    set_has_classification_signature();
    type_.classification_signature_ = classification_signature;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Signature.classification_signature)
}

// optional .tensorflow.serving.GenericSignature generic_signature = 3;
inline bool Signature::has_generic_signature() const {
  return type_case() == kGenericSignature;
}
inline void Signature::set_has_generic_signature() {
  _oneof_case_[0] = kGenericSignature;
}
inline void Signature::clear_generic_signature() {
  if (has_generic_signature()) {
    delete type_.generic_signature_;
    clear_has_type();
  }
}
inline  const ::tensorflow::serving::GenericSignature& Signature::generic_signature() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Signature.generic_signature)
  return has_generic_signature()
      ? *type_.generic_signature_
      : ::tensorflow::serving::GenericSignature::default_instance();
}
inline ::tensorflow::serving::GenericSignature* Signature::mutable_generic_signature() {
  if (!has_generic_signature()) {
    clear_type();
    set_has_generic_signature();
    type_.generic_signature_ = new ::tensorflow::serving::GenericSignature;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Signature.generic_signature)
  return type_.generic_signature_;
}
inline ::tensorflow::serving::GenericSignature* Signature::release_generic_signature() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Signature.generic_signature)
  if (has_generic_signature()) {
    clear_has_type();
    ::tensorflow::serving::GenericSignature* temp = type_.generic_signature_;
    type_.generic_signature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Signature::set_allocated_generic_signature(::tensorflow::serving::GenericSignature* generic_signature) {
  clear_type();
  if (generic_signature) {
    set_has_generic_signature();
    type_.generic_signature_ = generic_signature;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Signature.generic_signature)
}

inline bool Signature::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Signature::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Signature::TypeCase Signature::type_case() const {
  return Signature::TypeCase(_oneof_case_[0]);
}
inline const Signature* Signature::internal_default_instance() {
  return &Signature_default_instance_.get();
}
// -------------------------------------------------------------------

// RegressionSignature

// optional .tensorflow.serving.TensorBinding input = 1;
inline bool RegressionSignature::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
inline void RegressionSignature::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
inline const ::tensorflow::serving::TensorBinding& RegressionSignature::input() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.RegressionSignature.input)
  return input_ != NULL ? *input_
                         : *::tensorflow::serving::TensorBinding::internal_default_instance();
}
inline ::tensorflow::serving::TensorBinding* RegressionSignature::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::tensorflow::serving::TensorBinding;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.RegressionSignature.input)
  return input_;
}
inline ::tensorflow::serving::TensorBinding* RegressionSignature::release_input() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.RegressionSignature.input)
  
  ::tensorflow::serving::TensorBinding* temp = input_;
  input_ = NULL;
  return temp;
}
inline void RegressionSignature::set_allocated_input(::tensorflow::serving::TensorBinding* input) {
  delete input_;
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.RegressionSignature.input)
}

// optional .tensorflow.serving.TensorBinding output = 2;
inline bool RegressionSignature::has_output() const {
  return this != internal_default_instance() && output_ != NULL;
}
inline void RegressionSignature::clear_output() {
  if (GetArenaNoVirtual() == NULL && output_ != NULL) delete output_;
  output_ = NULL;
}
inline const ::tensorflow::serving::TensorBinding& RegressionSignature::output() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.RegressionSignature.output)
  return output_ != NULL ? *output_
                         : *::tensorflow::serving::TensorBinding::internal_default_instance();
}
inline ::tensorflow::serving::TensorBinding* RegressionSignature::mutable_output() {
  
  if (output_ == NULL) {
    output_ = new ::tensorflow::serving::TensorBinding;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.RegressionSignature.output)
  return output_;
}
inline ::tensorflow::serving::TensorBinding* RegressionSignature::release_output() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.RegressionSignature.output)
  
  ::tensorflow::serving::TensorBinding* temp = output_;
  output_ = NULL;
  return temp;
}
inline void RegressionSignature::set_allocated_output(::tensorflow::serving::TensorBinding* output) {
  delete output_;
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.RegressionSignature.output)
}

inline const RegressionSignature* RegressionSignature::internal_default_instance() {
  return &RegressionSignature_default_instance_.get();
}
// -------------------------------------------------------------------

// ClassificationSignature

// optional .tensorflow.serving.TensorBinding input = 1;
inline bool ClassificationSignature::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
inline void ClassificationSignature::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
inline const ::tensorflow::serving::TensorBinding& ClassificationSignature::input() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationSignature.input)
  return input_ != NULL ? *input_
                         : *::tensorflow::serving::TensorBinding::internal_default_instance();
}
inline ::tensorflow::serving::TensorBinding* ClassificationSignature::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::tensorflow::serving::TensorBinding;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationSignature.input)
  return input_;
}
inline ::tensorflow::serving::TensorBinding* ClassificationSignature::release_input() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationSignature.input)
  
  ::tensorflow::serving::TensorBinding* temp = input_;
  input_ = NULL;
  return temp;
}
inline void ClassificationSignature::set_allocated_input(::tensorflow::serving::TensorBinding* input) {
  delete input_;
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationSignature.input)
}

// optional .tensorflow.serving.TensorBinding classes = 2;
inline bool ClassificationSignature::has_classes() const {
  return this != internal_default_instance() && classes_ != NULL;
}
inline void ClassificationSignature::clear_classes() {
  if (GetArenaNoVirtual() == NULL && classes_ != NULL) delete classes_;
  classes_ = NULL;
}
inline const ::tensorflow::serving::TensorBinding& ClassificationSignature::classes() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationSignature.classes)
  return classes_ != NULL ? *classes_
                         : *::tensorflow::serving::TensorBinding::internal_default_instance();
}
inline ::tensorflow::serving::TensorBinding* ClassificationSignature::mutable_classes() {
  
  if (classes_ == NULL) {
    classes_ = new ::tensorflow::serving::TensorBinding;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationSignature.classes)
  return classes_;
}
inline ::tensorflow::serving::TensorBinding* ClassificationSignature::release_classes() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationSignature.classes)
  
  ::tensorflow::serving::TensorBinding* temp = classes_;
  classes_ = NULL;
  return temp;
}
inline void ClassificationSignature::set_allocated_classes(::tensorflow::serving::TensorBinding* classes) {
  delete classes_;
  classes_ = classes;
  if (classes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationSignature.classes)
}

// optional .tensorflow.serving.TensorBinding scores = 3;
inline bool ClassificationSignature::has_scores() const {
  return this != internal_default_instance() && scores_ != NULL;
}
inline void ClassificationSignature::clear_scores() {
  if (GetArenaNoVirtual() == NULL && scores_ != NULL) delete scores_;
  scores_ = NULL;
}
inline const ::tensorflow::serving::TensorBinding& ClassificationSignature::scores() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationSignature.scores)
  return scores_ != NULL ? *scores_
                         : *::tensorflow::serving::TensorBinding::internal_default_instance();
}
inline ::tensorflow::serving::TensorBinding* ClassificationSignature::mutable_scores() {
  
  if (scores_ == NULL) {
    scores_ = new ::tensorflow::serving::TensorBinding;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationSignature.scores)
  return scores_;
}
inline ::tensorflow::serving::TensorBinding* ClassificationSignature::release_scores() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationSignature.scores)
  
  ::tensorflow::serving::TensorBinding* temp = scores_;
  scores_ = NULL;
  return temp;
}
inline void ClassificationSignature::set_allocated_scores(::tensorflow::serving::TensorBinding* scores) {
  delete scores_;
  scores_ = scores;
  if (scores) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationSignature.scores)
}

inline const ClassificationSignature* ClassificationSignature::internal_default_instance() {
  return &ClassificationSignature_default_instance_.get();
}
// -------------------------------------------------------------------

// GenericSignature

// map<string, .tensorflow.serving.TensorBinding> map = 1;
inline int GenericSignature::map_size() const {
  return map_.size();
}
inline void GenericSignature::clear_map() {
  map_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >&
GenericSignature::map() const {
  // @@protoc_insertion_point(field_map:tensorflow.serving.GenericSignature.map)
  return map_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::tensorflow::serving::TensorBinding >*
GenericSignature::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.serving.GenericSignature.map)
  return map_.MutableMap();
}

inline const GenericSignature* GenericSignature::internal_default_instance() {
  return &GenericSignature_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto__INCLUDED
