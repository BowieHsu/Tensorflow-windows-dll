// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/tensorboard/graph_explorer/proto/graph_explorer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/contrib/tensorboard/graph_explorer/proto/graph_explorer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace graph_explorer {

namespace {

const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_NodeAttrEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Node_MetanodeAttrEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edge_EdgeAttrEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Graph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Graph_reflection_ = NULL;
const ::google::protobuf::Descriptor* Graph_NodeAttrEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Graph_MetanodeAttrEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Graph_EdgeAttrEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Graph_GraphAttrEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto() {
  protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/contrib/tensorboard/graph_explorer/proto/graph_explorer.proto");
  GOOGLE_CHECK(file != NULL);
  Node_descriptor_ = file->message_type(0);
  static const int Node_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, node_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, metanode_attr_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::internal_default_instance(),
      Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_));
  Node_NodeAttrEntry_descriptor_ = Node_descriptor_->nested_type(0);
  Node_MetanodeAttrEntry_descriptor_ = Node_descriptor_->nested_type(1);
  Edge_descriptor_ = file->message_type(1);
  static const int Edge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, edge_attr_),
  };
  Edge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Edge_descriptor_,
      Edge::internal_default_instance(),
      Edge_offsets_,
      -1,
      -1,
      -1,
      sizeof(Edge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _internal_metadata_));
  Edge_EdgeAttrEntry_descriptor_ = Edge_descriptor_->nested_type(0);
  Graph_descriptor_ = file->message_type(2);
  static const int Graph_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, node_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, metanode_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, edge_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, graph_attr_),
  };
  Graph_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Graph_descriptor_,
      Graph::internal_default_instance(),
      Graph_offsets_,
      -1,
      -1,
      -1,
      sizeof(Graph),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _internal_metadata_));
  Graph_NodeAttrEntry_descriptor_ = Graph_descriptor_->nested_type(0);
  Graph_MetanodeAttrEntry_descriptor_ = Graph_descriptor_->nested_type(1);
  Graph_EdgeAttrEntry_descriptor_ = Graph_descriptor_->nested_type(2);
  Graph_GraphAttrEntry_descriptor_ = Graph_descriptor_->nested_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, Node::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Node_NodeAttrEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Node_NodeAttrEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Node_MetanodeAttrEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Node_MetanodeAttrEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Edge_descriptor_, Edge::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Edge_EdgeAttrEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Edge_EdgeAttrEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Graph_descriptor_, Graph::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Graph_NodeAttrEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Graph_NodeAttrEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Graph_MetanodeAttrEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Graph_MetanodeAttrEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Graph_EdgeAttrEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Graph_EdgeAttrEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Graph_GraphAttrEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Graph_GraphAttrEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto() {
  Node_default_instance_.Shutdown();
  delete Node_reflection_;
  Edge_default_instance_.Shutdown();
  delete Edge_reflection_;
  Graph_default_instance_.Shutdown();
  delete Graph_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Node_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  Edge_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Graph_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  Node_default_instance_.get_mutable()->InitAsDefaultInstance();
  Edge_default_instance_.get_mutable()->InitAsDefaultInstance();
  Graph_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nHtensorflow/contrib/tensorboard/graph_e"
    "xplorer/proto/graph_explorer.proto\022\016grap"
    "h_explorer\"\360\001\n\004Node\022\014\n\004name\030\001 \001(\t\0225\n\tnod"
    "e_attr\030\002 \003(\0132\".graph_explorer.Node.NodeA"
    "ttrEntry\022=\n\rmetanode_attr\030\003 \003(\0132&.graph_"
    "explorer.Node.MetanodeAttrEntry\032/\n\rNodeA"
    "ttrEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
    "\0323\n\021MetanodeAttrEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
    "lue\030\002 \001(\t:\0028\001\"\216\001\n\004Edge\022\016\n\006source\030\001 \001(\t\022\016"
    "\n\006target\030\002 \001(\t\0225\n\tedge_attr\030\003 \003(\0132\".grap"
    "h_explorer.Edge.EdgeAttrEntry\032/\n\rEdgeAtt"
    "rEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\202"
    "\004\n\005Graph\022\"\n\004node\030\001 \003(\0132\024.graph_explorer."
    "Node\022\"\n\004edge\030\002 \003(\0132\024.graph_explorer.Edge"
    "\0226\n\tnode_attr\030\003 \003(\0132#.graph_explorer.Gra"
    "ph.NodeAttrEntry\022>\n\rmetanode_attr\030\004 \003(\0132"
    "\'.graph_explorer.Graph.MetanodeAttrEntry"
    "\0226\n\tedge_attr\030\005 \003(\0132#.graph_explorer.Gra"
    "ph.EdgeAttrEntry\0228\n\ngraph_attr\030\006 \003(\0132$.g"
    "raph_explorer.Graph.GraphAttrEntry\032/\n\rNo"
    "deAttrEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
    "\0028\001\0323\n\021MetanodeAttrEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
    "\005value\030\002 \001(\t:\0028\001\032/\n\rEdgeAttrEntry\022\013\n\003key"
    "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0320\n\016GraphAttrEn"
    "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001b\006pro"
    "to3", 1003);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/contrib/tensorboard/graph_explorer/proto/graph_explorer.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto() {
    protobuf_AddDesc_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kNameFieldNumber;
const int Node::kNodeAttrFieldNumber;
const int Node::kMetanodeAttrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:graph_explorer.Node)
}

void Node::InitAsDefaultInstance() {
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:graph_explorer.Node)
}

void Node::SharedCtor() {
  node_attr_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  node_attr_.SetEntryDescriptor(
      &::graph_explorer::Node_NodeAttrEntry_descriptor_);
  metanode_attr_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  metanode_attr_.SetEntryDescriptor(
      &::graph_explorer::Node_MetanodeAttrEntry_descriptor_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:graph_explorer.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Node> Node_default_instance_;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:graph_explorer.Node)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_attr_.Clear();
  metanode_attr_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:graph_explorer.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Node.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_attr;
        break;
      }

      // map<string, string> node_attr = 2;
      case 2: {
        if (tag == 18) {
         parse_node_attr:
          DO_(input->IncrementRecursionDepth());
         parse_loop_node_attr:
          Node_NodeAttrEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&node_attr_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Node.NodeAttrEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Node.NodeAttrEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_node_attr;
        if (input->ExpectTag(26)) goto parse_loop_metanode_attr;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> metanode_attr = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_metanode_attr:
          Node_MetanodeAttrEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&metanode_attr_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Node.MetanodeAttrEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Node.MetanodeAttrEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_metanode_attr;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:graph_explorer.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:graph_explorer.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:graph_explorer.Node)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph_explorer.Node.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<string, string> node_attr = 2;
  if (!this->node_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Node.NodeAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Node.NodeAttrEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->node_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->node_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_attr().begin();
          it != this->node_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Node_NodeAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(node_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Node_NodeAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_attr().begin();
          it != this->node_attr().end(); ++it) {
        entry.reset(node_attr_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> metanode_attr = 3;
  if (!this->metanode_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Node.MetanodeAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Node.MetanodeAttrEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->metanode_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metanode_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metanode_attr().begin();
          it != this->metanode_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Node_MetanodeAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metanode_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Node_MetanodeAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metanode_attr().begin();
          it != this->metanode_attr().end(); ++it) {
        entry.reset(metanode_attr_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:graph_explorer.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:graph_explorer.Node)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph_explorer.Node.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<string, string> node_attr = 2;
  if (!this->node_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Node.NodeAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Node.NodeAttrEntry.value");
      }
    };

    if (deterministic &&
        this->node_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->node_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_attr().begin();
          it != this->node_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Node_NodeAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(node_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Node_NodeAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_attr().begin();
          it != this->node_attr().end(); ++it) {
        entry.reset(node_attr_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> metanode_attr = 3;
  if (!this->metanode_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Node.MetanodeAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Node.MetanodeAttrEntry.value");
      }
    };

    if (deterministic &&
        this->metanode_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metanode_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metanode_attr().begin();
          it != this->metanode_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Node_MetanodeAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metanode_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Node_MetanodeAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metanode_attr().begin();
          it != this->metanode_attr().end(); ++it) {
        entry.reset(metanode_attr_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:graph_explorer.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graph_explorer.Node)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // map<string, string> node_attr = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->node_attr_size());
  {
    ::google::protobuf::scoped_ptr<Node_NodeAttrEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->node_attr().begin();
        it != this->node_attr().end(); ++it) {
      entry.reset(node_attr_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> metanode_attr = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metanode_attr_size());
  {
    ::google::protobuf::scoped_ptr<Node_MetanodeAttrEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->metanode_attr().begin();
        it != this->metanode_attr().end(); ++it) {
      entry.reset(metanode_attr_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graph_explorer.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graph_explorer.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graph_explorer.Node)
    UnsafeMergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graph_explorer.Node)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Node::UnsafeMergeFrom(const Node& from) {
  GOOGLE_DCHECK(&from != this);
  node_attr_.MergeFrom(from.node_attr_);
  metanode_attr_.MergeFrom(from.metanode_attr_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graph_explorer.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph_explorer.Node)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  name_.Swap(&other->name_);
  node_attr_.Swap(&other->node_attr_);
  metanode_attr_.Swap(&other->metanode_attr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional string name = 1;
void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:graph_explorer.Node.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph_explorer.Node.name)
}
void Node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph_explorer.Node.name)
}
void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph_explorer.Node.name)
}
::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:graph_explorer.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:graph_explorer.Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:graph_explorer.Node.name)
}

// map<string, string> node_attr = 2;
int Node::node_attr_size() const {
  return node_attr_.size();
}
void Node::clear_node_attr() {
  node_attr_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Node::node_attr() const {
  // @@protoc_insertion_point(field_map:graph_explorer.Node.node_attr)
  return node_attr_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Node::mutable_node_attr() {
  // @@protoc_insertion_point(field_mutable_map:graph_explorer.Node.node_attr)
  return node_attr_.MutableMap();
}

// map<string, string> metanode_attr = 3;
int Node::metanode_attr_size() const {
  return metanode_attr_.size();
}
void Node::clear_metanode_attr() {
  metanode_attr_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Node::metanode_attr() const {
  // @@protoc_insertion_point(field_map:graph_explorer.Node.metanode_attr)
  return metanode_attr_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Node::mutable_metanode_attr() {
  // @@protoc_insertion_point(field_mutable_map:graph_explorer.Node.metanode_attr)
  return metanode_attr_.MutableMap();
}

inline const Node* Node::internal_default_instance() {
  return &Node_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edge::kSourceFieldNumber;
const int Edge::kTargetFieldNumber;
const int Edge::kEdgeAttrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edge::Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:graph_explorer.Edge)
}

void Edge::InitAsDefaultInstance() {
}

Edge::Edge(const Edge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:graph_explorer.Edge)
}

void Edge::SharedCtor() {
  edge_attr_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  edge_attr_.SetEntryDescriptor(
      &::graph_explorer::Edge_EdgeAttrEntry_descriptor_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:graph_explorer.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_descriptor_;
}

const Edge& Edge::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Edge> Edge_default_instance_;

Edge* Edge::New(::google::protobuf::Arena* arena) const {
  Edge* n = new Edge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:graph_explorer.Edge)
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edge_attr_.Clear();
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:graph_explorer.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Edge.source"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // optional string target = 2;
      case 2: {
        if (tag == 18) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Edge.target"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_edge_attr;
        break;
      }

      // map<string, string> edge_attr = 3;
      case 3: {
        if (tag == 26) {
         parse_edge_attr:
          DO_(input->IncrementRecursionDepth());
         parse_loop_edge_attr:
          Edge_EdgeAttrEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&edge_attr_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Edge.EdgeAttrEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Edge.EdgeAttrEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_edge_attr;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:graph_explorer.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:graph_explorer.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:graph_explorer.Edge)
  // optional string source = 1;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph_explorer.Edge.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional string target = 2;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph_explorer.Edge.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->target(), output);
  }

  // map<string, string> edge_attr = 3;
  if (!this->edge_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Edge.EdgeAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Edge.EdgeAttrEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->edge_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->edge_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->edge_attr().begin();
          it != this->edge_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Edge_EdgeAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(edge_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Edge_EdgeAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->edge_attr().begin();
          it != this->edge_attr().end(); ++it) {
        entry.reset(edge_attr_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:graph_explorer.Edge)
}

::google::protobuf::uint8* Edge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:graph_explorer.Edge)
  // optional string source = 1;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph_explorer.Edge.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional string target = 2;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "graph_explorer.Edge.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target(), target);
  }

  // map<string, string> edge_attr = 3;
  if (!this->edge_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Edge.EdgeAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Edge.EdgeAttrEntry.value");
      }
    };

    if (deterministic &&
        this->edge_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->edge_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->edge_attr().begin();
          it != this->edge_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Edge_EdgeAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(edge_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Edge_EdgeAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->edge_attr().begin();
          it != this->edge_attr().end(); ++it) {
        entry.reset(edge_attr_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:graph_explorer.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graph_explorer.Edge)
  size_t total_size = 0;

  // optional string source = 1;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // optional string target = 2;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target());
  }

  // map<string, string> edge_attr = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->edge_attr_size());
  {
    ::google::protobuf::scoped_ptr<Edge_EdgeAttrEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->edge_attr().begin();
        it != this->edge_attr().end(); ++it) {
      entry.reset(edge_attr_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graph_explorer.Edge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Edge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graph_explorer.Edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graph_explorer.Edge)
    UnsafeMergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graph_explorer.Edge)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Edge::UnsafeMergeFrom(const Edge& from) {
  GOOGLE_DCHECK(&from != this);
  edge_attr_.MergeFrom(from.edge_attr_);
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graph_explorer.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph_explorer.Edge)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Edge::IsInitialized() const {

  return true;
}

void Edge::Swap(Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edge::InternalSwap(Edge* other) {
  source_.Swap(&other->source_);
  target_.Swap(&other->target_);
  edge_attr_.Swap(&other->edge_attr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge_descriptor_;
  metadata.reflection = Edge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edge

// optional string source = 1;
void Edge::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Edge::source() const {
  // @@protoc_insertion_point(field_get:graph_explorer.Edge.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Edge::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph_explorer.Edge.source)
}
void Edge::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph_explorer.Edge.source)
}
void Edge::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph_explorer.Edge.source)
}
::std::string* Edge::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:graph_explorer.Edge.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Edge::release_source() {
  // @@protoc_insertion_point(field_release:graph_explorer.Edge.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Edge::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:graph_explorer.Edge.source)
}

// optional string target = 2;
void Edge::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Edge::target() const {
  // @@protoc_insertion_point(field_get:graph_explorer.Edge.target)
  return target_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Edge::set_target(const ::std::string& value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:graph_explorer.Edge.target)
}
void Edge::set_target(const char* value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:graph_explorer.Edge.target)
}
void Edge::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:graph_explorer.Edge.target)
}
::std::string* Edge::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:graph_explorer.Edge.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Edge::release_target() {
  // @@protoc_insertion_point(field_release:graph_explorer.Edge.target)
  
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Edge::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:graph_explorer.Edge.target)
}

// map<string, string> edge_attr = 3;
int Edge::edge_attr_size() const {
  return edge_attr_.size();
}
void Edge::clear_edge_attr() {
  edge_attr_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Edge::edge_attr() const {
  // @@protoc_insertion_point(field_map:graph_explorer.Edge.edge_attr)
  return edge_attr_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Edge::mutable_edge_attr() {
  // @@protoc_insertion_point(field_mutable_map:graph_explorer.Edge.edge_attr)
  return edge_attr_.MutableMap();
}

inline const Edge* Edge::internal_default_instance() {
  return &Edge_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Graph::kNodeFieldNumber;
const int Graph::kEdgeFieldNumber;
const int Graph::kNodeAttrFieldNumber;
const int Graph::kMetanodeAttrFieldNumber;
const int Graph::kEdgeAttrFieldNumber;
const int Graph::kGraphAttrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Graph::Graph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:graph_explorer.Graph)
}

void Graph::InitAsDefaultInstance() {
}

Graph::Graph(const Graph& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:graph_explorer.Graph)
}

void Graph::SharedCtor() {
  node_attr_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  node_attr_.SetEntryDescriptor(
      &::graph_explorer::Graph_NodeAttrEntry_descriptor_);
  metanode_attr_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  metanode_attr_.SetEntryDescriptor(
      &::graph_explorer::Graph_MetanodeAttrEntry_descriptor_);
  edge_attr_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  edge_attr_.SetEntryDescriptor(
      &::graph_explorer::Graph_EdgeAttrEntry_descriptor_);
  graph_attr_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  graph_attr_.SetEntryDescriptor(
      &::graph_explorer::Graph_GraphAttrEntry_descriptor_);
  _cached_size_ = 0;
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:graph_explorer.Graph)
  SharedDtor();
}

void Graph::SharedDtor() {
}

void Graph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Graph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Graph_descriptor_;
}

const Graph& Graph::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftensorboard_2fgraph_5fexplorer_2fproto_2fgraph_5fexplorer_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Graph> Graph_default_instance_;

Graph* Graph::New(::google::protobuf::Arena* arena) const {
  Graph* n = new Graph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:graph_explorer.Graph)
  node_.Clear();
  edge_.Clear();
  node_attr_.Clear();
  metanode_attr_.Clear();
  edge_attr_.Clear();
  graph_attr_.Clear();
}

bool Graph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:graph_explorer.Graph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .graph_explorer.Node node = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_node;
        if (input->ExpectTag(18)) goto parse_loop_edge;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .graph_explorer.Edge edge = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_edge;
        if (input->ExpectTag(26)) goto parse_loop_node_attr;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> node_attr = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_node_attr:
          Graph_NodeAttrEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&node_attr_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Graph.NodeAttrEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Graph.NodeAttrEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_node_attr;
        if (input->ExpectTag(34)) goto parse_loop_metanode_attr;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> metanode_attr = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_metanode_attr:
          Graph_MetanodeAttrEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&metanode_attr_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Graph.MetanodeAttrEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Graph.MetanodeAttrEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_metanode_attr;
        if (input->ExpectTag(42)) goto parse_loop_edge_attr;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> edge_attr = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_edge_attr:
          Graph_EdgeAttrEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&edge_attr_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Graph.EdgeAttrEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Graph.EdgeAttrEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_edge_attr;
        if (input->ExpectTag(50)) goto parse_loop_graph_attr;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> graph_attr = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_graph_attr:
          Graph_GraphAttrEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&graph_attr_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Graph.GraphAttrEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "graph_explorer.Graph.GraphAttrEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_graph_attr;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:graph_explorer.Graph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:graph_explorer.Graph)
  return false;
#undef DO_
}

void Graph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:graph_explorer.Graph)
  // repeated .graph_explorer.Node node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  // repeated .graph_explorer.Edge edge = 2;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edge(i), output);
  }

  // map<string, string> node_attr = 3;
  if (!this->node_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.NodeAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.NodeAttrEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->node_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->node_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_attr().begin();
          it != this->node_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Graph_NodeAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(node_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Graph_NodeAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_attr().begin();
          it != this->node_attr().end(); ++it) {
        entry.reset(node_attr_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> metanode_attr = 4;
  if (!this->metanode_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.MetanodeAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.MetanodeAttrEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->metanode_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metanode_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metanode_attr().begin();
          it != this->metanode_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Graph_MetanodeAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metanode_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Graph_MetanodeAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metanode_attr().begin();
          it != this->metanode_attr().end(); ++it) {
        entry.reset(metanode_attr_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> edge_attr = 5;
  if (!this->edge_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.EdgeAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.EdgeAttrEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->edge_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->edge_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->edge_attr().begin();
          it != this->edge_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Graph_EdgeAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(edge_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Graph_EdgeAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->edge_attr().begin();
          it != this->edge_attr().end(); ++it) {
        entry.reset(edge_attr_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> graph_attr = 6;
  if (!this->graph_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.GraphAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.GraphAttrEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->graph_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->graph_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->graph_attr().begin();
          it != this->graph_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Graph_GraphAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(graph_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Graph_GraphAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->graph_attr().begin();
          it != this->graph_attr().end(); ++it) {
        entry.reset(graph_attr_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:graph_explorer.Graph)
}

::google::protobuf::uint8* Graph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:graph_explorer.Graph)
  // repeated .graph_explorer.Node node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->node(i), false, target);
  }

  // repeated .graph_explorer.Edge edge = 2;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->edge(i), false, target);
  }

  // map<string, string> node_attr = 3;
  if (!this->node_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.NodeAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.NodeAttrEntry.value");
      }
    };

    if (deterministic &&
        this->node_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->node_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_attr().begin();
          it != this->node_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Graph_NodeAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(node_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Graph_NodeAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->node_attr().begin();
          it != this->node_attr().end(); ++it) {
        entry.reset(node_attr_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> metanode_attr = 4;
  if (!this->metanode_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.MetanodeAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.MetanodeAttrEntry.value");
      }
    };

    if (deterministic &&
        this->metanode_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metanode_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metanode_attr().begin();
          it != this->metanode_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Graph_MetanodeAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metanode_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Graph_MetanodeAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metanode_attr().begin();
          it != this->metanode_attr().end(); ++it) {
        entry.reset(metanode_attr_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> edge_attr = 5;
  if (!this->edge_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.EdgeAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.EdgeAttrEntry.value");
      }
    };

    if (deterministic &&
        this->edge_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->edge_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->edge_attr().begin();
          it != this->edge_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Graph_EdgeAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(edge_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Graph_EdgeAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->edge_attr().begin();
          it != this->edge_attr().end(); ++it) {
        entry.reset(edge_attr_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> graph_attr = 6;
  if (!this->graph_attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.GraphAttrEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "graph_explorer.Graph.GraphAttrEntry.value");
      }
    };

    if (deterministic &&
        this->graph_attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->graph_attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->graph_attr().begin();
          it != this->graph_attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Graph_GraphAttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(graph_attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Graph_GraphAttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->graph_attr().begin();
          it != this->graph_attr().end(); ++it) {
        entry.reset(graph_attr_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:graph_explorer.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graph_explorer.Graph)
  size_t total_size = 0;

  // repeated .graph_explorer.Node node = 1;
  {
    unsigned int count = this->node_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node(i));
    }
  }

  // repeated .graph_explorer.Edge edge = 2;
  {
    unsigned int count = this->edge_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edge(i));
    }
  }

  // map<string, string> node_attr = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->node_attr_size());
  {
    ::google::protobuf::scoped_ptr<Graph_NodeAttrEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->node_attr().begin();
        it != this->node_attr().end(); ++it) {
      entry.reset(node_attr_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> metanode_attr = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metanode_attr_size());
  {
    ::google::protobuf::scoped_ptr<Graph_MetanodeAttrEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->metanode_attr().begin();
        it != this->metanode_attr().end(); ++it) {
      entry.reset(metanode_attr_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> edge_attr = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->edge_attr_size());
  {
    ::google::protobuf::scoped_ptr<Graph_EdgeAttrEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->edge_attr().begin();
        it != this->edge_attr().end(); ++it) {
      entry.reset(edge_attr_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> graph_attr = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->graph_attr_size());
  {
    ::google::protobuf::scoped_ptr<Graph_GraphAttrEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->graph_attr().begin();
        it != this->graph_attr().end(); ++it) {
      entry.reset(graph_attr_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Graph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graph_explorer.Graph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Graph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Graph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graph_explorer.Graph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graph_explorer.Graph)
    UnsafeMergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graph_explorer.Graph)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Graph::UnsafeMergeFrom(const Graph& from) {
  GOOGLE_DCHECK(&from != this);
  node_.MergeFrom(from.node_);
  edge_.MergeFrom(from.edge_);
  node_attr_.MergeFrom(from.node_attr_);
  metanode_attr_.MergeFrom(from.metanode_attr_);
  edge_attr_.MergeFrom(from.edge_attr_);
  graph_attr_.MergeFrom(from.graph_attr_);
}

void Graph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graph_explorer.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph_explorer.Graph)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Graph::IsInitialized() const {

  return true;
}

void Graph::Swap(Graph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Graph::InternalSwap(Graph* other) {
  node_.UnsafeArenaSwap(&other->node_);
  edge_.UnsafeArenaSwap(&other->edge_);
  node_attr_.Swap(&other->node_attr_);
  metanode_attr_.Swap(&other->metanode_attr_);
  edge_attr_.Swap(&other->edge_attr_);
  graph_attr_.Swap(&other->graph_attr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Graph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Graph_descriptor_;
  metadata.reflection = Graph_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Graph

// repeated .graph_explorer.Node node = 1;
int Graph::node_size() const {
  return node_.size();
}
void Graph::clear_node() {
  node_.Clear();
}
const ::graph_explorer::Node& Graph::node(int index) const {
  // @@protoc_insertion_point(field_get:graph_explorer.Graph.node)
  return node_.Get(index);
}
::graph_explorer::Node* Graph::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:graph_explorer.Graph.node)
  return node_.Mutable(index);
}
::graph_explorer::Node* Graph::add_node() {
  // @@protoc_insertion_point(field_add:graph_explorer.Graph.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::graph_explorer::Node >*
Graph::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:graph_explorer.Graph.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::graph_explorer::Node >&
Graph::node() const {
  // @@protoc_insertion_point(field_list:graph_explorer.Graph.node)
  return node_;
}

// repeated .graph_explorer.Edge edge = 2;
int Graph::edge_size() const {
  return edge_.size();
}
void Graph::clear_edge() {
  edge_.Clear();
}
const ::graph_explorer::Edge& Graph::edge(int index) const {
  // @@protoc_insertion_point(field_get:graph_explorer.Graph.edge)
  return edge_.Get(index);
}
::graph_explorer::Edge* Graph::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:graph_explorer.Graph.edge)
  return edge_.Mutable(index);
}
::graph_explorer::Edge* Graph::add_edge() {
  // @@protoc_insertion_point(field_add:graph_explorer.Graph.edge)
  return edge_.Add();
}
::google::protobuf::RepeatedPtrField< ::graph_explorer::Edge >*
Graph::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:graph_explorer.Graph.edge)
  return &edge_;
}
const ::google::protobuf::RepeatedPtrField< ::graph_explorer::Edge >&
Graph::edge() const {
  // @@protoc_insertion_point(field_list:graph_explorer.Graph.edge)
  return edge_;
}

// map<string, string> node_attr = 3;
int Graph::node_attr_size() const {
  return node_attr_.size();
}
void Graph::clear_node_attr() {
  node_attr_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Graph::node_attr() const {
  // @@protoc_insertion_point(field_map:graph_explorer.Graph.node_attr)
  return node_attr_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Graph::mutable_node_attr() {
  // @@protoc_insertion_point(field_mutable_map:graph_explorer.Graph.node_attr)
  return node_attr_.MutableMap();
}

// map<string, string> metanode_attr = 4;
int Graph::metanode_attr_size() const {
  return metanode_attr_.size();
}
void Graph::clear_metanode_attr() {
  metanode_attr_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Graph::metanode_attr() const {
  // @@protoc_insertion_point(field_map:graph_explorer.Graph.metanode_attr)
  return metanode_attr_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Graph::mutable_metanode_attr() {
  // @@protoc_insertion_point(field_mutable_map:graph_explorer.Graph.metanode_attr)
  return metanode_attr_.MutableMap();
}

// map<string, string> edge_attr = 5;
int Graph::edge_attr_size() const {
  return edge_attr_.size();
}
void Graph::clear_edge_attr() {
  edge_attr_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Graph::edge_attr() const {
  // @@protoc_insertion_point(field_map:graph_explorer.Graph.edge_attr)
  return edge_attr_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Graph::mutable_edge_attr() {
  // @@protoc_insertion_point(field_mutable_map:graph_explorer.Graph.edge_attr)
  return edge_attr_.MutableMap();
}

// map<string, string> graph_attr = 6;
int Graph::graph_attr_size() const {
  return graph_attr_.size();
}
void Graph::clear_graph_attr() {
  graph_attr_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Graph::graph_attr() const {
  // @@protoc_insertion_point(field_map:graph_explorer.Graph.graph_attr)
  return graph_attr_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Graph::mutable_graph_attr() {
  // @@protoc_insertion_point(field_mutable_map:graph_explorer.Graph.graph_attr)
  return graph_attr_.MutableMap();
}

inline const Graph* Graph::internal_default_instance() {
  return &Graph_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace graph_explorer

// @@protoc_insertion_point(global_scope)
