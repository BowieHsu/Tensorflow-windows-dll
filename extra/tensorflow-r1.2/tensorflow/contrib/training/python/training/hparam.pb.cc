// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/contrib/training/python/training/hparam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/contrib/training/python/training/hparam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* HParamDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HParamDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* HParamDef_BytesList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HParamDef_BytesList_reflection_ = NULL;
const ::google::protobuf::Descriptor* HParamDef_FloatList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HParamDef_FloatList_reflection_ = NULL;
const ::google::protobuf::Descriptor* HParamDef_Int64List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HParamDef_Int64List_reflection_ = NULL;
const ::google::protobuf::Descriptor* HParamDef_BoolList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HParamDef_BoolList_reflection_ = NULL;
const ::google::protobuf::Descriptor* HParamDef_HParamType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HParamDef_HParamType_reflection_ = NULL;
struct HParamDef_HParamTypeOneofInstance {
  ::google::protobuf::int64 int64_value_;
  float float_value_;
  ::google::protobuf::internal::ArenaStringPtr bytes_value_;
  bool bool_value_;
  const ::tensorflow::HParamDef_Int64List* int64_list_;
  const ::tensorflow::HParamDef_FloatList* float_list_;
  const ::tensorflow::HParamDef_BytesList* bytes_list_;
  const ::tensorflow::HParamDef_BoolList* bool_list_;
}* HParamDef_HParamType_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* HParamDef_HparamEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto() {
  protobuf_AddDesc_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/contrib/training/python/training/hparam.proto");
  GOOGLE_CHECK(file != NULL);
  HParamDef_descriptor_ = file->message_type(0);
  static const int HParamDef_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HParamDef, hparam_),
  };
  HParamDef_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HParamDef_descriptor_,
      HParamDef::internal_default_instance(),
      HParamDef_offsets_,
      -1,
      -1,
      -1,
      sizeof(HParamDef),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HParamDef, _internal_metadata_));
  HParamDef_BytesList_descriptor_ = HParamDef_descriptor_->nested_type(0);
  static const int HParamDef_BytesList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HParamDef_BytesList, value_),
  };
  HParamDef_BytesList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HParamDef_BytesList_descriptor_,
      HParamDef_BytesList::internal_default_instance(),
      HParamDef_BytesList_offsets_,
      -1,
      -1,
      -1,
      sizeof(HParamDef_BytesList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HParamDef_BytesList, _internal_metadata_));
  HParamDef_FloatList_descriptor_ = HParamDef_descriptor_->nested_type(1);
  static const int HParamDef_FloatList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HParamDef_FloatList, value_),
  };
  HParamDef_FloatList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HParamDef_FloatList_descriptor_,
      HParamDef_FloatList::internal_default_instance(),
      HParamDef_FloatList_offsets_,
      -1,
      -1,
      -1,
      sizeof(HParamDef_FloatList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HParamDef_FloatList, _internal_metadata_));
  HParamDef_Int64List_descriptor_ = HParamDef_descriptor_->nested_type(2);
  static const int HParamDef_Int64List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HParamDef_Int64List, value_),
  };
  HParamDef_Int64List_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HParamDef_Int64List_descriptor_,
      HParamDef_Int64List::internal_default_instance(),
      HParamDef_Int64List_offsets_,
      -1,
      -1,
      -1,
      sizeof(HParamDef_Int64List),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HParamDef_Int64List, _internal_metadata_));
  HParamDef_BoolList_descriptor_ = HParamDef_descriptor_->nested_type(3);
  static const int HParamDef_BoolList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HParamDef_BoolList, value_),
  };
  HParamDef_BoolList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HParamDef_BoolList_descriptor_,
      HParamDef_BoolList::internal_default_instance(),
      HParamDef_BoolList_offsets_,
      -1,
      -1,
      -1,
      sizeof(HParamDef_BoolList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HParamDef_BoolList, _internal_metadata_));
  HParamDef_HParamType_descriptor_ = HParamDef_descriptor_->nested_type(4);
  static const int HParamDef_HParamType_offsets_[9] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HParamDef_HParamType_default_oneof_instance_, int64_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HParamDef_HParamType_default_oneof_instance_, float_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HParamDef_HParamType_default_oneof_instance_, bytes_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HParamDef_HParamType_default_oneof_instance_, bool_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HParamDef_HParamType_default_oneof_instance_, int64_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HParamDef_HParamType_default_oneof_instance_, float_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HParamDef_HParamType_default_oneof_instance_, bytes_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(HParamDef_HParamType_default_oneof_instance_, bool_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HParamDef_HParamType, kind_),
  };
  HParamDef_HParamType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HParamDef_HParamType_descriptor_,
      HParamDef_HParamType::internal_default_instance(),
      HParamDef_HParamType_offsets_,
      -1,
      -1,
      -1,
      HParamDef_HParamType_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HParamDef_HParamType, _oneof_case_[0]),
      sizeof(HParamDef_HParamType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HParamDef_HParamType, _internal_metadata_));
  HParamDef_HparamEntry_descriptor_ = HParamDef_descriptor_->nested_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HParamDef_descriptor_, HParamDef::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HParamDef_BytesList_descriptor_, HParamDef_BytesList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HParamDef_FloatList_descriptor_, HParamDef_FloatList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HParamDef_Int64List_descriptor_, HParamDef_Int64List::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HParamDef_BoolList_descriptor_, HParamDef_BoolList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HParamDef_HParamType_descriptor_, HParamDef_HParamType::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        HParamDef_HparamEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::HParamDef_HParamType,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                HParamDef_HparamEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto() {
  HParamDef_default_instance_.Shutdown();
  delete HParamDef_reflection_;
  HParamDef_BytesList_default_instance_.Shutdown();
  delete HParamDef_BytesList_reflection_;
  HParamDef_FloatList_default_instance_.Shutdown();
  delete HParamDef_FloatList_reflection_;
  HParamDef_Int64List_default_instance_.Shutdown();
  delete HParamDef_Int64List_reflection_;
  HParamDef_BoolList_default_instance_.Shutdown();
  delete HParamDef_BoolList_reflection_;
  HParamDef_HParamType_default_instance_.Shutdown();
  delete HParamDef_HParamType_default_oneof_instance_;
  delete HParamDef_HParamType_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  HParamDef_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  HParamDef_BytesList_default_instance_.DefaultConstruct();
  HParamDef_FloatList_default_instance_.DefaultConstruct();
  HParamDef_Int64List_default_instance_.DefaultConstruct();
  HParamDef_BoolList_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  HParamDef_HParamType_default_instance_.DefaultConstruct();
  HParamDef_HParamType_default_oneof_instance_ = new HParamDef_HParamTypeOneofInstance();
  HParamDef_default_instance_.get_mutable()->InitAsDefaultInstance();
  HParamDef_BytesList_default_instance_.get_mutable()->InitAsDefaultInstance();
  HParamDef_FloatList_default_instance_.get_mutable()->InitAsDefaultInstance();
  HParamDef_Int64List_default_instance_.get_mutable()->InitAsDefaultInstance();
  HParamDef_BoolList_default_instance_.get_mutable()->InitAsDefaultInstance();
  HParamDef_HParamType_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n8tensorflow/contrib/training/python/tra"
    "ining/hparam.proto\022\ntensorflow\"\326\004\n\tHPara"
    "mDef\0221\n\006hparam\030\001 \003(\0132!.tensorflow.HParam"
    "Def.HparamEntry\032\032\n\tBytesList\022\r\n\005value\030\001 "
    "\003(\014\032\036\n\tFloatList\022\021\n\005value\030\001 \003(\002B\002\020\001\032\036\n\tI"
    "nt64List\022\021\n\005value\030\001 \003(\003B\002\020\001\032\035\n\010BoolList\022"
    "\021\n\005value\030\001 \003(\010B\002\020\001\032\311\002\n\nHParamType\022\025\n\013int"
    "64_value\030\001 \001(\003H\000\022\025\n\013float_value\030\002 \001(\002H\000\022"
    "\025\n\013bytes_value\030\003 \001(\014H\000\022\024\n\nbool_value\030\007 \001"
    "(\010H\000\0225\n\nint64_list\030\004 \001(\0132\037.tensorflow.HP"
    "aramDef.Int64ListH\000\0225\n\nfloat_list\030\005 \001(\0132"
    "\037.tensorflow.HParamDef.FloatListH\000\0225\n\nby"
    "tes_list\030\006 \001(\0132\037.tensorflow.HParamDef.By"
    "tesListH\000\0223\n\tbool_list\030\010 \001(\0132\036.tensorflo"
    "w.HParamDef.BoolListH\000B\006\n\004kind\032O\n\013Hparam"
    "Entry\022\013\n\003key\030\001 \001(\t\022/\n\005value\030\002 \001(\0132 .tens"
    "orflow.HParamDef.HParamType:\0028\001B\003\370\001\001b\006pr"
    "oto3", 684);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/contrib/training/python/training/hparam.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto() {
    protobuf_AddDesc_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HParamDef_BytesList::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HParamDef_BytesList::HParamDef_BytesList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.HParamDef.BytesList)
}
HParamDef_BytesList::HParamDef_BytesList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  value_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.HParamDef.BytesList)
}

void HParamDef_BytesList::InitAsDefaultInstance() {
}

HParamDef_BytesList::HParamDef_BytesList(const HParamDef_BytesList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.HParamDef.BytesList)
}

void HParamDef_BytesList::SharedCtor() {
  _cached_size_ = 0;
}

HParamDef_BytesList::~HParamDef_BytesList() {
  // @@protoc_insertion_point(destructor:tensorflow.HParamDef.BytesList)
  SharedDtor();
}

void HParamDef_BytesList::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void HParamDef_BytesList::ArenaDtor(void* object) {
  HParamDef_BytesList* _this = reinterpret_cast< HParamDef_BytesList* >(object);
  (void)_this;
}
void HParamDef_BytesList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HParamDef_BytesList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HParamDef_BytesList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HParamDef_BytesList_descriptor_;
}

const HParamDef_BytesList& HParamDef_BytesList::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HParamDef_BytesList> HParamDef_BytesList_default_instance_;

HParamDef_BytesList* HParamDef_BytesList::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<HParamDef_BytesList>(arena);
}

void HParamDef_BytesList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.HParamDef.BytesList)
  value_.Clear();
}

bool HParamDef_BytesList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.HParamDef.BytesList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes value = 1;
      case 1: {
        if (tag == 10) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.HParamDef.BytesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.HParamDef.BytesList)
  return false;
#undef DO_
}

void HParamDef_BytesList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.HParamDef.BytesList)
  // repeated bytes value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.HParamDef.BytesList)
}

::google::protobuf::uint8* HParamDef_BytesList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.HParamDef.BytesList)
  // repeated bytes value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.HParamDef.BytesList)
  return target;
}

size_t HParamDef_BytesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.HParamDef.BytesList)
  size_t total_size = 0;

  // repeated bytes value = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->value_size());
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HParamDef_BytesList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.HParamDef.BytesList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HParamDef_BytesList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HParamDef_BytesList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.HParamDef.BytesList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.HParamDef.BytesList)
    UnsafeMergeFrom(*source);
  }
}

void HParamDef_BytesList::MergeFrom(const HParamDef_BytesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.HParamDef.BytesList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HParamDef_BytesList::UnsafeMergeFrom(const HParamDef_BytesList& from) {
  GOOGLE_DCHECK(&from != this);
  value_.UnsafeMergeFrom(from.value_);
}

void HParamDef_BytesList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.HParamDef.BytesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HParamDef_BytesList::CopyFrom(const HParamDef_BytesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.HParamDef.BytesList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HParamDef_BytesList::IsInitialized() const {

  return true;
}

void HParamDef_BytesList::Swap(HParamDef_BytesList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HParamDef_BytesList temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void HParamDef_BytesList::UnsafeArenaSwap(HParamDef_BytesList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HParamDef_BytesList::InternalSwap(HParamDef_BytesList* other) {
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HParamDef_BytesList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HParamDef_BytesList_descriptor_;
  metadata.reflection = HParamDef_BytesList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HParamDef_FloatList::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HParamDef_FloatList::HParamDef_FloatList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.HParamDef.FloatList)
}
HParamDef_FloatList::HParamDef_FloatList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  value_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.HParamDef.FloatList)
}

void HParamDef_FloatList::InitAsDefaultInstance() {
}

HParamDef_FloatList::HParamDef_FloatList(const HParamDef_FloatList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.HParamDef.FloatList)
}

void HParamDef_FloatList::SharedCtor() {
  _cached_size_ = 0;
}

HParamDef_FloatList::~HParamDef_FloatList() {
  // @@protoc_insertion_point(destructor:tensorflow.HParamDef.FloatList)
  SharedDtor();
}

void HParamDef_FloatList::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void HParamDef_FloatList::ArenaDtor(void* object) {
  HParamDef_FloatList* _this = reinterpret_cast< HParamDef_FloatList* >(object);
  (void)_this;
}
void HParamDef_FloatList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HParamDef_FloatList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HParamDef_FloatList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HParamDef_FloatList_descriptor_;
}

const HParamDef_FloatList& HParamDef_FloatList::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HParamDef_FloatList> HParamDef_FloatList_default_instance_;

HParamDef_FloatList* HParamDef_FloatList::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<HParamDef_FloatList>(arena);
}

void HParamDef_FloatList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.HParamDef.FloatList)
  value_.Clear();
}

bool HParamDef_FloatList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.HParamDef.FloatList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.HParamDef.FloatList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.HParamDef.FloatList)
  return false;
#undef DO_
}

void HParamDef_FloatList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.HParamDef.FloatList)
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.HParamDef.FloatList)
}

::google::protobuf::uint8* HParamDef_FloatList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.HParamDef.FloatList)
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.HParamDef.FloatList)
  return target;
}

size_t HParamDef_FloatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.HParamDef.FloatList)
  size_t total_size = 0;

  // repeated float value = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->value_size();
    data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HParamDef_FloatList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.HParamDef.FloatList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HParamDef_FloatList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HParamDef_FloatList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.HParamDef.FloatList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.HParamDef.FloatList)
    UnsafeMergeFrom(*source);
  }
}

void HParamDef_FloatList::MergeFrom(const HParamDef_FloatList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.HParamDef.FloatList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HParamDef_FloatList::UnsafeMergeFrom(const HParamDef_FloatList& from) {
  GOOGLE_DCHECK(&from != this);
  value_.UnsafeMergeFrom(from.value_);
}

void HParamDef_FloatList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.HParamDef.FloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HParamDef_FloatList::CopyFrom(const HParamDef_FloatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.HParamDef.FloatList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HParamDef_FloatList::IsInitialized() const {

  return true;
}

void HParamDef_FloatList::Swap(HParamDef_FloatList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HParamDef_FloatList temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void HParamDef_FloatList::UnsafeArenaSwap(HParamDef_FloatList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HParamDef_FloatList::InternalSwap(HParamDef_FloatList* other) {
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HParamDef_FloatList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HParamDef_FloatList_descriptor_;
  metadata.reflection = HParamDef_FloatList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HParamDef_Int64List::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HParamDef_Int64List::HParamDef_Int64List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.HParamDef.Int64List)
}
HParamDef_Int64List::HParamDef_Int64List(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  value_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.HParamDef.Int64List)
}

void HParamDef_Int64List::InitAsDefaultInstance() {
}

HParamDef_Int64List::HParamDef_Int64List(const HParamDef_Int64List& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.HParamDef.Int64List)
}

void HParamDef_Int64List::SharedCtor() {
  _cached_size_ = 0;
}

HParamDef_Int64List::~HParamDef_Int64List() {
  // @@protoc_insertion_point(destructor:tensorflow.HParamDef.Int64List)
  SharedDtor();
}

void HParamDef_Int64List::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void HParamDef_Int64List::ArenaDtor(void* object) {
  HParamDef_Int64List* _this = reinterpret_cast< HParamDef_Int64List* >(object);
  (void)_this;
}
void HParamDef_Int64List::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HParamDef_Int64List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HParamDef_Int64List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HParamDef_Int64List_descriptor_;
}

const HParamDef_Int64List& HParamDef_Int64List::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HParamDef_Int64List> HParamDef_Int64List_default_instance_;

HParamDef_Int64List* HParamDef_Int64List::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<HParamDef_Int64List>(arena);
}

void HParamDef_Int64List::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.HParamDef.Int64List)
  value_.Clear();
}

bool HParamDef_Int64List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.HParamDef.Int64List)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 value = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_value())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.HParamDef.Int64List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.HParamDef.Int64List)
  return false;
#undef DO_
}

void HParamDef_Int64List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.HParamDef.Int64List)
  // repeated int64 value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.HParamDef.Int64List)
}

::google::protobuf::uint8* HParamDef_Int64List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.HParamDef.Int64List)
  // repeated int64 value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.HParamDef.Int64List)
  return target;
}

size_t HParamDef_Int64List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.HParamDef.Int64List)
  size_t total_size = 0;

  // repeated int64 value = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->value_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HParamDef_Int64List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.HParamDef.Int64List)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HParamDef_Int64List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HParamDef_Int64List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.HParamDef.Int64List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.HParamDef.Int64List)
    UnsafeMergeFrom(*source);
  }
}

void HParamDef_Int64List::MergeFrom(const HParamDef_Int64List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.HParamDef.Int64List)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HParamDef_Int64List::UnsafeMergeFrom(const HParamDef_Int64List& from) {
  GOOGLE_DCHECK(&from != this);
  value_.UnsafeMergeFrom(from.value_);
}

void HParamDef_Int64List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.HParamDef.Int64List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HParamDef_Int64List::CopyFrom(const HParamDef_Int64List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.HParamDef.Int64List)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HParamDef_Int64List::IsInitialized() const {

  return true;
}

void HParamDef_Int64List::Swap(HParamDef_Int64List* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HParamDef_Int64List temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void HParamDef_Int64List::UnsafeArenaSwap(HParamDef_Int64List* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HParamDef_Int64List::InternalSwap(HParamDef_Int64List* other) {
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HParamDef_Int64List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HParamDef_Int64List_descriptor_;
  metadata.reflection = HParamDef_Int64List_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HParamDef_BoolList::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HParamDef_BoolList::HParamDef_BoolList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.HParamDef.BoolList)
}
HParamDef_BoolList::HParamDef_BoolList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  value_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.HParamDef.BoolList)
}

void HParamDef_BoolList::InitAsDefaultInstance() {
}

HParamDef_BoolList::HParamDef_BoolList(const HParamDef_BoolList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.HParamDef.BoolList)
}

void HParamDef_BoolList::SharedCtor() {
  _cached_size_ = 0;
}

HParamDef_BoolList::~HParamDef_BoolList() {
  // @@protoc_insertion_point(destructor:tensorflow.HParamDef.BoolList)
  SharedDtor();
}

void HParamDef_BoolList::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void HParamDef_BoolList::ArenaDtor(void* object) {
  HParamDef_BoolList* _this = reinterpret_cast< HParamDef_BoolList* >(object);
  (void)_this;
}
void HParamDef_BoolList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HParamDef_BoolList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HParamDef_BoolList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HParamDef_BoolList_descriptor_;
}

const HParamDef_BoolList& HParamDef_BoolList::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HParamDef_BoolList> HParamDef_BoolList_default_instance_;

HParamDef_BoolList* HParamDef_BoolList::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<HParamDef_BoolList>(arena);
}

void HParamDef_BoolList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.HParamDef.BoolList)
  value_.Clear();
}

bool HParamDef_BoolList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.HParamDef.BoolList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool value = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_value())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.HParamDef.BoolList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.HParamDef.BoolList)
  return false;
#undef DO_
}

void HParamDef_BoolList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.HParamDef.BoolList)
  // repeated bool value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.HParamDef.BoolList)
}

::google::protobuf::uint8* HParamDef_BoolList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.HParamDef.BoolList)
  // repeated bool value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.HParamDef.BoolList)
  return target;
}

size_t HParamDef_BoolList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.HParamDef.BoolList)
  size_t total_size = 0;

  // repeated bool value = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->value_size();
    data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HParamDef_BoolList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.HParamDef.BoolList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HParamDef_BoolList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HParamDef_BoolList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.HParamDef.BoolList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.HParamDef.BoolList)
    UnsafeMergeFrom(*source);
  }
}

void HParamDef_BoolList::MergeFrom(const HParamDef_BoolList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.HParamDef.BoolList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HParamDef_BoolList::UnsafeMergeFrom(const HParamDef_BoolList& from) {
  GOOGLE_DCHECK(&from != this);
  value_.UnsafeMergeFrom(from.value_);
}

void HParamDef_BoolList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.HParamDef.BoolList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HParamDef_BoolList::CopyFrom(const HParamDef_BoolList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.HParamDef.BoolList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HParamDef_BoolList::IsInitialized() const {

  return true;
}

void HParamDef_BoolList::Swap(HParamDef_BoolList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HParamDef_BoolList temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void HParamDef_BoolList::UnsafeArenaSwap(HParamDef_BoolList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HParamDef_BoolList::InternalSwap(HParamDef_BoolList* other) {
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HParamDef_BoolList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HParamDef_BoolList_descriptor_;
  metadata.reflection = HParamDef_BoolList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HParamDef_HParamType::kInt64ValueFieldNumber;
const int HParamDef_HParamType::kFloatValueFieldNumber;
const int HParamDef_HParamType::kBytesValueFieldNumber;
const int HParamDef_HParamType::kBoolValueFieldNumber;
const int HParamDef_HParamType::kInt64ListFieldNumber;
const int HParamDef_HParamType::kFloatListFieldNumber;
const int HParamDef_HParamType::kBytesListFieldNumber;
const int HParamDef_HParamType::kBoolListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HParamDef_HParamType::HParamDef_HParamType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.HParamDef.HParamType)
}
HParamDef_HParamType::HParamDef_HParamType(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.HParamDef.HParamType)
}

void HParamDef_HParamType::InitAsDefaultInstance() {
  HParamDef_HParamType_default_oneof_instance_->int64_value_ = GOOGLE_LONGLONG(0);
  HParamDef_HParamType_default_oneof_instance_->float_value_ = 0;
  HParamDef_HParamType_default_oneof_instance_->bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  HParamDef_HParamType_default_oneof_instance_->bool_value_ = false;
  HParamDef_HParamType_default_oneof_instance_->int64_list_ = const_cast< ::tensorflow::HParamDef_Int64List*>(
      ::tensorflow::HParamDef_Int64List::internal_default_instance());
  HParamDef_HParamType_default_oneof_instance_->float_list_ = const_cast< ::tensorflow::HParamDef_FloatList*>(
      ::tensorflow::HParamDef_FloatList::internal_default_instance());
  HParamDef_HParamType_default_oneof_instance_->bytes_list_ = const_cast< ::tensorflow::HParamDef_BytesList*>(
      ::tensorflow::HParamDef_BytesList::internal_default_instance());
  HParamDef_HParamType_default_oneof_instance_->bool_list_ = const_cast< ::tensorflow::HParamDef_BoolList*>(
      ::tensorflow::HParamDef_BoolList::internal_default_instance());
}

HParamDef_HParamType::HParamDef_HParamType(const HParamDef_HParamType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.HParamDef.HParamType)
}

void HParamDef_HParamType::SharedCtor() {
  clear_has_kind();
  _cached_size_ = 0;
}

HParamDef_HParamType::~HParamDef_HParamType() {
  // @@protoc_insertion_point(destructor:tensorflow.HParamDef.HParamType)
  SharedDtor();
}

void HParamDef_HParamType::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (has_kind()) {
    clear_kind();
  }
}

void HParamDef_HParamType::ArenaDtor(void* object) {
  HParamDef_HParamType* _this = reinterpret_cast< HParamDef_HParamType* >(object);
  (void)_this;
}
void HParamDef_HParamType::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HParamDef_HParamType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HParamDef_HParamType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HParamDef_HParamType_descriptor_;
}

const HParamDef_HParamType& HParamDef_HParamType::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HParamDef_HParamType> HParamDef_HParamType_default_instance_;

HParamDef_HParamType* HParamDef_HParamType::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<HParamDef_HParamType>(arena);
}

void HParamDef_HParamType::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.HParamDef.HParamType)
  switch (kind_case()) {
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kBytesValue: {
      kind_.bytes_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kInt64List: {
      if (GetArenaNoVirtual() == NULL) {
        delete kind_.int64_list_;
      }
      break;
    }
    case kFloatList: {
      if (GetArenaNoVirtual() == NULL) {
        delete kind_.float_list_;
      }
      break;
    }
    case kBytesList: {
      if (GetArenaNoVirtual() == NULL) {
        delete kind_.bytes_list_;
      }
      break;
    }
    case kBoolList: {
      if (GetArenaNoVirtual() == NULL) {
        delete kind_.bool_list_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void HParamDef_HParamType::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.HParamDef.HParamType)
  clear_kind();
}

bool HParamDef_HParamType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.HParamDef.HParamType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 int64_value = 1;
      case 1: {
        if (tag == 8) {
          clear_kind();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kind_.int64_value_)));
          set_has_int64_value();
        } else {
          goto handle_unusual;
        }
        goto after_bool_list;
        break;
      }

      // optional float float_value = 2;
      case 2: {
        if (tag == 21) {
          clear_kind();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kind_.float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        goto after_bool_list;
        break;
      }

      // optional bytes bytes_value = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_value()));
        } else {
          goto handle_unusual;
        }
        goto after_bool_list;
        break;
      }

      // optional .tensorflow.HParamDef.Int64List int64_list = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int64_list()));
        } else {
          goto handle_unusual;
        }
        goto after_bool_list;
        break;
      }

      // optional .tensorflow.HParamDef.FloatList float_list = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_float_list()));
        } else {
          goto handle_unusual;
        }
        goto after_bool_list;
        break;
      }

      // optional .tensorflow.HParamDef.BytesList bytes_list = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bytes_list()));
        } else {
          goto handle_unusual;
        }
        goto after_bool_list;
        break;
      }

      // optional bool bool_value = 7;
      case 7: {
        if (tag == 56) {
          clear_kind();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kind_.bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bool_list;
        break;
      }

      // optional .tensorflow.HParamDef.BoolList bool_list = 8;
      case 8: {
        if (tag == 66) {
         parse_bool_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bool_list()));
        } else {
          goto handle_unusual;
        }
       after_bool_list:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.HParamDef.HParamType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.HParamDef.HParamType)
  return false;
#undef DO_
}

void HParamDef_HParamType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.HParamDef.HParamType)
  // optional int64 int64_value = 1;
  if (has_int64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->int64_value(), output);
  }

  // optional float float_value = 2;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->float_value(), output);
  }

  // optional bytes bytes_value = 3;
  if (has_bytes_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->bytes_value(), output);
  }

  // optional .tensorflow.HParamDef.Int64List int64_list = 4;
  if (has_int64_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *kind_.int64_list_, output);
  }

  // optional .tensorflow.HParamDef.FloatList float_list = 5;
  if (has_float_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *kind_.float_list_, output);
  }

  // optional .tensorflow.HParamDef.BytesList bytes_list = 6;
  if (has_bytes_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *kind_.bytes_list_, output);
  }

  // optional bool bool_value = 7;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bool_value(), output);
  }

  // optional .tensorflow.HParamDef.BoolList bool_list = 8;
  if (has_bool_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *kind_.bool_list_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.HParamDef.HParamType)
}

::google::protobuf::uint8* HParamDef_HParamType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.HParamDef.HParamType)
  // optional int64 int64_value = 1;
  if (has_int64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->int64_value(), target);
  }

  // optional float float_value = 2;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->float_value(), target);
  }

  // optional bytes bytes_value = 3;
  if (has_bytes_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->bytes_value(), target);
  }

  // optional .tensorflow.HParamDef.Int64List int64_list = 4;
  if (has_int64_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *kind_.int64_list_, false, target);
  }

  // optional .tensorflow.HParamDef.FloatList float_list = 5;
  if (has_float_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *kind_.float_list_, false, target);
  }

  // optional .tensorflow.HParamDef.BytesList bytes_list = 6;
  if (has_bytes_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *kind_.bytes_list_, false, target);
  }

  // optional bool bool_value = 7;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bool_value(), target);
  }

  // optional .tensorflow.HParamDef.BoolList bool_list = 8;
  if (has_bool_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *kind_.bool_list_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.HParamDef.HParamType)
  return target;
}

size_t HParamDef_HParamType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.HParamDef.HParamType)
  size_t total_size = 0;

  switch (kind_case()) {
    // optional int64 int64_value = 1;
    case kInt64Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64_value());
      break;
    }
    // optional float float_value = 2;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // optional bytes bytes_value = 3;
    case kBytesValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_value());
      break;
    }
    // optional bool bool_value = 7;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // optional .tensorflow.HParamDef.Int64List int64_list = 4;
    case kInt64List: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *kind_.int64_list_);
      break;
    }
    // optional .tensorflow.HParamDef.FloatList float_list = 5;
    case kFloatList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *kind_.float_list_);
      break;
    }
    // optional .tensorflow.HParamDef.BytesList bytes_list = 6;
    case kBytesList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *kind_.bytes_list_);
      break;
    }
    // optional .tensorflow.HParamDef.BoolList bool_list = 8;
    case kBoolList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *kind_.bool_list_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HParamDef_HParamType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.HParamDef.HParamType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HParamDef_HParamType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HParamDef_HParamType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.HParamDef.HParamType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.HParamDef.HParamType)
    UnsafeMergeFrom(*source);
  }
}

void HParamDef_HParamType::MergeFrom(const HParamDef_HParamType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.HParamDef.HParamType)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HParamDef_HParamType::UnsafeMergeFrom(const HParamDef_HParamType& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.kind_case()) {
    case kInt64Value: {
      set_int64_value(from.int64_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kBytesValue: {
      set_bytes_value(from.bytes_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kInt64List: {
      mutable_int64_list()->::tensorflow::HParamDef_Int64List::MergeFrom(from.int64_list());
      break;
    }
    case kFloatList: {
      mutable_float_list()->::tensorflow::HParamDef_FloatList::MergeFrom(from.float_list());
      break;
    }
    case kBytesList: {
      mutable_bytes_list()->::tensorflow::HParamDef_BytesList::MergeFrom(from.bytes_list());
      break;
    }
    case kBoolList: {
      mutable_bool_list()->::tensorflow::HParamDef_BoolList::MergeFrom(from.bool_list());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void HParamDef_HParamType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.HParamDef.HParamType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HParamDef_HParamType::CopyFrom(const HParamDef_HParamType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.HParamDef.HParamType)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HParamDef_HParamType::IsInitialized() const {

  return true;
}

void HParamDef_HParamType::Swap(HParamDef_HParamType* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HParamDef_HParamType temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void HParamDef_HParamType::UnsafeArenaSwap(HParamDef_HParamType* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HParamDef_HParamType::InternalSwap(HParamDef_HParamType* other) {
  std::swap(kind_, other->kind_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HParamDef_HParamType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HParamDef_HParamType_descriptor_;
  metadata.reflection = HParamDef_HParamType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HParamDef::kHparamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HParamDef::HParamDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.HParamDef)
}
HParamDef::HParamDef(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  hparam_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.HParamDef)
}

void HParamDef::InitAsDefaultInstance() {
}

HParamDef::HParamDef(const HParamDef& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.HParamDef)
}

void HParamDef::SharedCtor() {
  hparam_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  hparam_.SetEntryDescriptor(
      &::tensorflow::HParamDef_HparamEntry_descriptor_);
  _cached_size_ = 0;
}

HParamDef::~HParamDef() {
  // @@protoc_insertion_point(destructor:tensorflow.HParamDef)
  SharedDtor();
}

void HParamDef::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void HParamDef::ArenaDtor(void* object) {
  HParamDef* _this = reinterpret_cast< HParamDef* >(object);
  (void)_this;
}
void HParamDef::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void HParamDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HParamDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HParamDef_descriptor_;
}

const HParamDef& HParamDef::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcontrib_2ftraining_2fpython_2ftraining_2fhparam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HParamDef> HParamDef_default_instance_;

HParamDef* HParamDef::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<HParamDef>(arena);
}

void HParamDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.HParamDef)
  hparam_.Clear();
}

bool HParamDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.HParamDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .tensorflow.HParamDef.HParamType> hparam = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_hparam:
          HParamDef_HparamEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::HParamDef_HParamType,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::HParamDef_HParamType > > parser(&hparam_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.HParamDef.HparamEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_hparam;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.HParamDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.HParamDef)
  return false;
#undef DO_
}

void HParamDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.HParamDef)
  // map<string, .tensorflow.HParamDef.HParamType> hparam = 1;
  if (!this->hparam().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::HParamDef_HParamType >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.HParamDef.HparamEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->hparam().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hparam().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::HParamDef_HParamType >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::HParamDef_HParamType >::const_iterator
          it = this->hparam().begin();
          it != this->hparam().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HParamDef_HparamEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hparam_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HParamDef_HparamEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::HParamDef_HParamType >::const_iterator
          it = this->hparam().begin();
          it != this->hparam().end(); ++it) {
        entry.reset(hparam_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.HParamDef)
}

::google::protobuf::uint8* HParamDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.HParamDef)
  // map<string, .tensorflow.HParamDef.HParamType> hparam = 1;
  if (!this->hparam().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::HParamDef_HParamType >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.HParamDef.HparamEntry.key");
      }
    };

    if (deterministic &&
        this->hparam().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hparam().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::HParamDef_HParamType >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::HParamDef_HParamType >::const_iterator
          it = this->hparam().begin();
          it != this->hparam().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HParamDef_HparamEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hparam_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HParamDef_HparamEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::HParamDef_HParamType >::const_iterator
          it = this->hparam().begin();
          it != this->hparam().end(); ++it) {
        entry.reset(hparam_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.HParamDef)
  return target;
}

size_t HParamDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.HParamDef)
  size_t total_size = 0;

  // map<string, .tensorflow.HParamDef.HParamType> hparam = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hparam_size());
  {
    ::google::protobuf::scoped_ptr<HParamDef_HparamEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::HParamDef_HParamType >::const_iterator
        it = this->hparam().begin();
        it != this->hparam().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(hparam_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HParamDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.HParamDef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HParamDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HParamDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.HParamDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.HParamDef)
    UnsafeMergeFrom(*source);
  }
}

void HParamDef::MergeFrom(const HParamDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.HParamDef)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HParamDef::UnsafeMergeFrom(const HParamDef& from) {
  GOOGLE_DCHECK(&from != this);
  hparam_.MergeFrom(from.hparam_);
}

void HParamDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.HParamDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HParamDef::CopyFrom(const HParamDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.HParamDef)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HParamDef::IsInitialized() const {

  return true;
}

void HParamDef::Swap(HParamDef* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    HParamDef temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void HParamDef::UnsafeArenaSwap(HParamDef* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void HParamDef::InternalSwap(HParamDef* other) {
  hparam_.Swap(&other->hparam_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HParamDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HParamDef_descriptor_;
  metadata.reflection = HParamDef_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HParamDef_BytesList

// repeated bytes value = 1;
int HParamDef_BytesList::value_size() const {
  return value_.size();
}
void HParamDef_BytesList::clear_value() {
  value_.Clear();
}
const ::std::string& HParamDef_BytesList::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.HParamDef.BytesList.value)
  return value_.Get(index);
}
::std::string* HParamDef_BytesList::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.HParamDef.BytesList.value)
  return value_.Mutable(index);
}
void HParamDef_BytesList::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.HParamDef.BytesList.value)
  value_.Mutable(index)->assign(value);
}
void HParamDef_BytesList::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.HParamDef.BytesList.value)
}
void HParamDef_BytesList::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.HParamDef.BytesList.value)
}
::std::string* HParamDef_BytesList::add_value() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.HParamDef.BytesList.value)
  return value_.Add();
}
void HParamDef_BytesList::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.HParamDef.BytesList.value)
}
void HParamDef_BytesList::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.HParamDef.BytesList.value)
}
void HParamDef_BytesList::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.HParamDef.BytesList.value)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
HParamDef_BytesList::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.HParamDef.BytesList.value)
  return value_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
HParamDef_BytesList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.HParamDef.BytesList.value)
  return &value_;
}

inline const HParamDef_BytesList* HParamDef_BytesList::internal_default_instance() {
  return &HParamDef_BytesList_default_instance_.get();
}
// -------------------------------------------------------------------

// HParamDef_FloatList

// repeated float value = 1 [packed = true];
int HParamDef_FloatList::value_size() const {
  return value_.size();
}
void HParamDef_FloatList::clear_value() {
  value_.Clear();
}
float HParamDef_FloatList::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.HParamDef.FloatList.value)
  return value_.Get(index);
}
void HParamDef_FloatList::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.HParamDef.FloatList.value)
}
void HParamDef_FloatList::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.HParamDef.FloatList.value)
}
const ::google::protobuf::RepeatedField< float >&
HParamDef_FloatList::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.HParamDef.FloatList.value)
  return value_;
}
::google::protobuf::RepeatedField< float >*
HParamDef_FloatList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.HParamDef.FloatList.value)
  return &value_;
}

inline const HParamDef_FloatList* HParamDef_FloatList::internal_default_instance() {
  return &HParamDef_FloatList_default_instance_.get();
}
// -------------------------------------------------------------------

// HParamDef_Int64List

// repeated int64 value = 1 [packed = true];
int HParamDef_Int64List::value_size() const {
  return value_.size();
}
void HParamDef_Int64List::clear_value() {
  value_.Clear();
}
::google::protobuf::int64 HParamDef_Int64List::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.HParamDef.Int64List.value)
  return value_.Get(index);
}
void HParamDef_Int64List::set_value(int index, ::google::protobuf::int64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.HParamDef.Int64List.value)
}
void HParamDef_Int64List::add_value(::google::protobuf::int64 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.HParamDef.Int64List.value)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
HParamDef_Int64List::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.HParamDef.Int64List.value)
  return value_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
HParamDef_Int64List::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.HParamDef.Int64List.value)
  return &value_;
}

inline const HParamDef_Int64List* HParamDef_Int64List::internal_default_instance() {
  return &HParamDef_Int64List_default_instance_.get();
}
// -------------------------------------------------------------------

// HParamDef_BoolList

// repeated bool value = 1 [packed = true];
int HParamDef_BoolList::value_size() const {
  return value_.size();
}
void HParamDef_BoolList::clear_value() {
  value_.Clear();
}
bool HParamDef_BoolList::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.HParamDef.BoolList.value)
  return value_.Get(index);
}
void HParamDef_BoolList::set_value(int index, bool value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.HParamDef.BoolList.value)
}
void HParamDef_BoolList::add_value(bool value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.HParamDef.BoolList.value)
}
const ::google::protobuf::RepeatedField< bool >&
HParamDef_BoolList::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.HParamDef.BoolList.value)
  return value_;
}
::google::protobuf::RepeatedField< bool >*
HParamDef_BoolList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.HParamDef.BoolList.value)
  return &value_;
}

inline const HParamDef_BoolList* HParamDef_BoolList::internal_default_instance() {
  return &HParamDef_BoolList_default_instance_.get();
}
// -------------------------------------------------------------------

// HParamDef_HParamType

// optional int64 int64_value = 1;
bool HParamDef_HParamType::has_int64_value() const {
  return kind_case() == kInt64Value;
}
void HParamDef_HParamType::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
void HParamDef_HParamType::clear_int64_value() {
  if (has_int64_value()) {
    kind_.int64_value_ = GOOGLE_LONGLONG(0);
    clear_has_kind();
  }
}
::google::protobuf::int64 HParamDef_HParamType::int64_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.HParamDef.HParamType.int64_value)
  if (has_int64_value()) {
    return kind_.int64_value_;
  }
  return GOOGLE_LONGLONG(0);
}
void HParamDef_HParamType::set_int64_value(::google::protobuf::int64 value) {
  if (!has_int64_value()) {
    clear_kind();
    set_has_int64_value();
  }
  kind_.int64_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.HParamDef.HParamType.int64_value)
}

// optional float float_value = 2;
bool HParamDef_HParamType::has_float_value() const {
  return kind_case() == kFloatValue;
}
void HParamDef_HParamType::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
void HParamDef_HParamType::clear_float_value() {
  if (has_float_value()) {
    kind_.float_value_ = 0;
    clear_has_kind();
  }
}
float HParamDef_HParamType::float_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.HParamDef.HParamType.float_value)
  if (has_float_value()) {
    return kind_.float_value_;
  }
  return 0;
}
void HParamDef_HParamType::set_float_value(float value) {
  if (!has_float_value()) {
    clear_kind();
    set_has_float_value();
  }
  kind_.float_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.HParamDef.HParamType.float_value)
}

// optional bytes bytes_value = 3;
bool HParamDef_HParamType::has_bytes_value() const {
  return kind_case() == kBytesValue;
}
void HParamDef_HParamType::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
void HParamDef_HParamType::clear_bytes_value() {
  if (has_bytes_value()) {
    kind_.bytes_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_kind();
  }
}
const ::std::string& HParamDef_HParamType::bytes_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.HParamDef.HParamType.bytes_value)
  if (has_bytes_value()) {
    return kind_.bytes_value_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void HParamDef_HParamType::set_bytes_value(const ::std::string& value) {
  if (!has_bytes_value()) {
    clear_kind();
    set_has_bytes_value();
    kind_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  kind_.bytes_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.HParamDef.HParamType.bytes_value)
}
void HParamDef_HParamType::set_bytes_value(const char* value) {
  if (!has_bytes_value()) {
    clear_kind();
    set_has_bytes_value();
    kind_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  kind_.bytes_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.HParamDef.HParamType.bytes_value)
}
void HParamDef_HParamType::set_bytes_value(const void* value,
                             size_t size) {
  if (!has_bytes_value()) {
    clear_kind();
    set_has_bytes_value();
    kind_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  kind_.bytes_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.HParamDef.HParamType.bytes_value)
}
::std::string* HParamDef_HParamType::mutable_bytes_value() {
  if (!has_bytes_value()) {
    clear_kind();
    set_has_bytes_value();
    kind_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return kind_.bytes_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:tensorflow.HParamDef.HParamType.bytes_value)
}
::std::string* HParamDef_HParamType::release_bytes_value() {
  // @@protoc_insertion_point(field_release:tensorflow.HParamDef.HParamType.bytes_value)
  if (has_bytes_value()) {
    clear_has_kind();
    return kind_.bytes_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* HParamDef_HParamType::unsafe_arena_release_bytes_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.HParamDef.HParamType.bytes_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_bytes_value()) {
    clear_has_kind();
    return kind_.bytes_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void HParamDef_HParamType::set_allocated_bytes_value(::std::string* bytes_value) {
  if (!has_bytes_value()) {
    kind_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_kind();
  if (bytes_value != NULL) {
    set_has_bytes_value();
    kind_.bytes_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.HParamDef.HParamType.bytes_value)
}
void HParamDef_HParamType::unsafe_arena_set_allocated_bytes_value(::std::string* bytes_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_bytes_value()) {
    kind_.bytes_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_kind();
  if (bytes_value) {
    set_has_bytes_value();
    kind_.bytes_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.HParamDef.HParamType.bytes_value)
}

// optional bool bool_value = 7;
bool HParamDef_HParamType::has_bool_value() const {
  return kind_case() == kBoolValue;
}
void HParamDef_HParamType::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
void HParamDef_HParamType::clear_bool_value() {
  if (has_bool_value()) {
    kind_.bool_value_ = false;
    clear_has_kind();
  }
}
bool HParamDef_HParamType::bool_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.HParamDef.HParamType.bool_value)
  if (has_bool_value()) {
    return kind_.bool_value_;
  }
  return false;
}
void HParamDef_HParamType::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_kind();
    set_has_bool_value();
  }
  kind_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.HParamDef.HParamType.bool_value)
}

// optional .tensorflow.HParamDef.Int64List int64_list = 4;
bool HParamDef_HParamType::has_int64_list() const {
  return kind_case() == kInt64List;
}
void HParamDef_HParamType::set_has_int64_list() {
  _oneof_case_[0] = kInt64List;
}
void HParamDef_HParamType::clear_int64_list() {
  if (has_int64_list()) {
    if (GetArenaNoVirtual() == NULL) {
      delete kind_.int64_list_;
    }
    clear_has_kind();
  }
}
 const ::tensorflow::HParamDef_Int64List& HParamDef_HParamType::int64_list() const {
  // @@protoc_insertion_point(field_get:tensorflow.HParamDef.HParamType.int64_list)
  return has_int64_list()
      ? *kind_.int64_list_
      : ::tensorflow::HParamDef_Int64List::default_instance();
}
::tensorflow::HParamDef_Int64List* HParamDef_HParamType::mutable_int64_list() {
  if (!has_int64_list()) {
    clear_kind();
    set_has_int64_list();
    kind_.int64_list_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::HParamDef_Int64List >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.HParamDef.HParamType.int64_list)
  return kind_.int64_list_;
}
::tensorflow::HParamDef_Int64List* HParamDef_HParamType::release_int64_list() {
  // @@protoc_insertion_point(field_release:tensorflow.HParamDef.HParamType.int64_list)
  if (has_int64_list()) {
    clear_has_kind();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::HParamDef_Int64List* temp = new ::tensorflow::HParamDef_Int64List(*kind_.int64_list_);
      kind_.int64_list_ = NULL;
      return temp;
    } else {
      ::tensorflow::HParamDef_Int64List* temp = kind_.int64_list_;
      kind_.int64_list_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void HParamDef_HParamType::set_allocated_int64_list(::tensorflow::HParamDef_Int64List* int64_list) {
  clear_kind();
  if (int64_list) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(int64_list) == NULL) {
      GetArenaNoVirtual()->Own(int64_list);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(int64_list)) {
      ::tensorflow::HParamDef_Int64List* new_int64_list = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::HParamDef_Int64List >(
          GetArenaNoVirtual());
      new_int64_list->CopyFrom(*int64_list);
      int64_list = new_int64_list;
    }
    set_has_int64_list();
    kind_.int64_list_ = int64_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.HParamDef.HParamType.int64_list)
}
 ::tensorflow::HParamDef_Int64List* HParamDef_HParamType::unsafe_arena_release_int64_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.HParamDef.HParamType.int64_list)
  if (has_int64_list()) {
    clear_has_kind();
    ::tensorflow::HParamDef_Int64List* temp = kind_.int64_list_;
    kind_.int64_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void HParamDef_HParamType::unsafe_arena_set_allocated_int64_list(::tensorflow::HParamDef_Int64List* int64_list) {
  clear_kind();
  if (int64_list) {
    set_has_int64_list();
    kind_.int64_list_ = int64_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.HParamDef.HParamType.int64_list)
}

// optional .tensorflow.HParamDef.FloatList float_list = 5;
bool HParamDef_HParamType::has_float_list() const {
  return kind_case() == kFloatList;
}
void HParamDef_HParamType::set_has_float_list() {
  _oneof_case_[0] = kFloatList;
}
void HParamDef_HParamType::clear_float_list() {
  if (has_float_list()) {
    if (GetArenaNoVirtual() == NULL) {
      delete kind_.float_list_;
    }
    clear_has_kind();
  }
}
 const ::tensorflow::HParamDef_FloatList& HParamDef_HParamType::float_list() const {
  // @@protoc_insertion_point(field_get:tensorflow.HParamDef.HParamType.float_list)
  return has_float_list()
      ? *kind_.float_list_
      : ::tensorflow::HParamDef_FloatList::default_instance();
}
::tensorflow::HParamDef_FloatList* HParamDef_HParamType::mutable_float_list() {
  if (!has_float_list()) {
    clear_kind();
    set_has_float_list();
    kind_.float_list_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::HParamDef_FloatList >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.HParamDef.HParamType.float_list)
  return kind_.float_list_;
}
::tensorflow::HParamDef_FloatList* HParamDef_HParamType::release_float_list() {
  // @@protoc_insertion_point(field_release:tensorflow.HParamDef.HParamType.float_list)
  if (has_float_list()) {
    clear_has_kind();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::HParamDef_FloatList* temp = new ::tensorflow::HParamDef_FloatList(*kind_.float_list_);
      kind_.float_list_ = NULL;
      return temp;
    } else {
      ::tensorflow::HParamDef_FloatList* temp = kind_.float_list_;
      kind_.float_list_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void HParamDef_HParamType::set_allocated_float_list(::tensorflow::HParamDef_FloatList* float_list) {
  clear_kind();
  if (float_list) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(float_list) == NULL) {
      GetArenaNoVirtual()->Own(float_list);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(float_list)) {
      ::tensorflow::HParamDef_FloatList* new_float_list = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::HParamDef_FloatList >(
          GetArenaNoVirtual());
      new_float_list->CopyFrom(*float_list);
      float_list = new_float_list;
    }
    set_has_float_list();
    kind_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.HParamDef.HParamType.float_list)
}
 ::tensorflow::HParamDef_FloatList* HParamDef_HParamType::unsafe_arena_release_float_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.HParamDef.HParamType.float_list)
  if (has_float_list()) {
    clear_has_kind();
    ::tensorflow::HParamDef_FloatList* temp = kind_.float_list_;
    kind_.float_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void HParamDef_HParamType::unsafe_arena_set_allocated_float_list(::tensorflow::HParamDef_FloatList* float_list) {
  clear_kind();
  if (float_list) {
    set_has_float_list();
    kind_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.HParamDef.HParamType.float_list)
}

// optional .tensorflow.HParamDef.BytesList bytes_list = 6;
bool HParamDef_HParamType::has_bytes_list() const {
  return kind_case() == kBytesList;
}
void HParamDef_HParamType::set_has_bytes_list() {
  _oneof_case_[0] = kBytesList;
}
void HParamDef_HParamType::clear_bytes_list() {
  if (has_bytes_list()) {
    if (GetArenaNoVirtual() == NULL) {
      delete kind_.bytes_list_;
    }
    clear_has_kind();
  }
}
 const ::tensorflow::HParamDef_BytesList& HParamDef_HParamType::bytes_list() const {
  // @@protoc_insertion_point(field_get:tensorflow.HParamDef.HParamType.bytes_list)
  return has_bytes_list()
      ? *kind_.bytes_list_
      : ::tensorflow::HParamDef_BytesList::default_instance();
}
::tensorflow::HParamDef_BytesList* HParamDef_HParamType::mutable_bytes_list() {
  if (!has_bytes_list()) {
    clear_kind();
    set_has_bytes_list();
    kind_.bytes_list_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::HParamDef_BytesList >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.HParamDef.HParamType.bytes_list)
  return kind_.bytes_list_;
}
::tensorflow::HParamDef_BytesList* HParamDef_HParamType::release_bytes_list() {
  // @@protoc_insertion_point(field_release:tensorflow.HParamDef.HParamType.bytes_list)
  if (has_bytes_list()) {
    clear_has_kind();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::HParamDef_BytesList* temp = new ::tensorflow::HParamDef_BytesList(*kind_.bytes_list_);
      kind_.bytes_list_ = NULL;
      return temp;
    } else {
      ::tensorflow::HParamDef_BytesList* temp = kind_.bytes_list_;
      kind_.bytes_list_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void HParamDef_HParamType::set_allocated_bytes_list(::tensorflow::HParamDef_BytesList* bytes_list) {
  clear_kind();
  if (bytes_list) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(bytes_list) == NULL) {
      GetArenaNoVirtual()->Own(bytes_list);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(bytes_list)) {
      ::tensorflow::HParamDef_BytesList* new_bytes_list = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::HParamDef_BytesList >(
          GetArenaNoVirtual());
      new_bytes_list->CopyFrom(*bytes_list);
      bytes_list = new_bytes_list;
    }
    set_has_bytes_list();
    kind_.bytes_list_ = bytes_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.HParamDef.HParamType.bytes_list)
}
 ::tensorflow::HParamDef_BytesList* HParamDef_HParamType::unsafe_arena_release_bytes_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.HParamDef.HParamType.bytes_list)
  if (has_bytes_list()) {
    clear_has_kind();
    ::tensorflow::HParamDef_BytesList* temp = kind_.bytes_list_;
    kind_.bytes_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void HParamDef_HParamType::unsafe_arena_set_allocated_bytes_list(::tensorflow::HParamDef_BytesList* bytes_list) {
  clear_kind();
  if (bytes_list) {
    set_has_bytes_list();
    kind_.bytes_list_ = bytes_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.HParamDef.HParamType.bytes_list)
}

// optional .tensorflow.HParamDef.BoolList bool_list = 8;
bool HParamDef_HParamType::has_bool_list() const {
  return kind_case() == kBoolList;
}
void HParamDef_HParamType::set_has_bool_list() {
  _oneof_case_[0] = kBoolList;
}
void HParamDef_HParamType::clear_bool_list() {
  if (has_bool_list()) {
    if (GetArenaNoVirtual() == NULL) {
      delete kind_.bool_list_;
    }
    clear_has_kind();
  }
}
 const ::tensorflow::HParamDef_BoolList& HParamDef_HParamType::bool_list() const {
  // @@protoc_insertion_point(field_get:tensorflow.HParamDef.HParamType.bool_list)
  return has_bool_list()
      ? *kind_.bool_list_
      : ::tensorflow::HParamDef_BoolList::default_instance();
}
::tensorflow::HParamDef_BoolList* HParamDef_HParamType::mutable_bool_list() {
  if (!has_bool_list()) {
    clear_kind();
    set_has_bool_list();
    kind_.bool_list_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::HParamDef_BoolList >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.HParamDef.HParamType.bool_list)
  return kind_.bool_list_;
}
::tensorflow::HParamDef_BoolList* HParamDef_HParamType::release_bool_list() {
  // @@protoc_insertion_point(field_release:tensorflow.HParamDef.HParamType.bool_list)
  if (has_bool_list()) {
    clear_has_kind();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::HParamDef_BoolList* temp = new ::tensorflow::HParamDef_BoolList(*kind_.bool_list_);
      kind_.bool_list_ = NULL;
      return temp;
    } else {
      ::tensorflow::HParamDef_BoolList* temp = kind_.bool_list_;
      kind_.bool_list_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void HParamDef_HParamType::set_allocated_bool_list(::tensorflow::HParamDef_BoolList* bool_list) {
  clear_kind();
  if (bool_list) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(bool_list) == NULL) {
      GetArenaNoVirtual()->Own(bool_list);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(bool_list)) {
      ::tensorflow::HParamDef_BoolList* new_bool_list = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::HParamDef_BoolList >(
          GetArenaNoVirtual());
      new_bool_list->CopyFrom(*bool_list);
      bool_list = new_bool_list;
    }
    set_has_bool_list();
    kind_.bool_list_ = bool_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.HParamDef.HParamType.bool_list)
}
 ::tensorflow::HParamDef_BoolList* HParamDef_HParamType::unsafe_arena_release_bool_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.HParamDef.HParamType.bool_list)
  if (has_bool_list()) {
    clear_has_kind();
    ::tensorflow::HParamDef_BoolList* temp = kind_.bool_list_;
    kind_.bool_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void HParamDef_HParamType::unsafe_arena_set_allocated_bool_list(::tensorflow::HParamDef_BoolList* bool_list) {
  clear_kind();
  if (bool_list) {
    set_has_bool_list();
    kind_.bool_list_ = bool_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.HParamDef.HParamType.bool_list)
}

bool HParamDef_HParamType::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
void HParamDef_HParamType::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
HParamDef_HParamType::KindCase HParamDef_HParamType::kind_case() const {
  return HParamDef_HParamType::KindCase(_oneof_case_[0]);
}
inline const HParamDef_HParamType* HParamDef_HParamType::internal_default_instance() {
  return &HParamDef_HParamType_default_instance_.get();
}
// -------------------------------------------------------------------

// HParamDef

// map<string, .tensorflow.HParamDef.HParamType> hparam = 1;
int HParamDef::hparam_size() const {
  return hparam_.size();
}
void HParamDef::clear_hparam() {
  hparam_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::HParamDef_HParamType >&
HParamDef::hparam() const {
  // @@protoc_insertion_point(field_map:tensorflow.HParamDef.hparam)
  return hparam_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::HParamDef_HParamType >*
HParamDef::mutable_hparam() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.HParamDef.hparam)
  return hparam_.MutableMap();
}

inline const HParamDef* HParamDef::internal_default_instance() {
  return &HParamDef_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
