// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/example/example_parser_configuration.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/example/example_parser_configuration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* VarLenFeatureProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarLenFeatureProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixedLenFeatureProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedLenFeatureProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureConfiguration_reflection_ = NULL;
struct FeatureConfigurationOneofInstance {
  const ::tensorflow::FixedLenFeatureProto* fixed_len_feature_;
  const ::tensorflow::VarLenFeatureProto* var_len_feature_;
}* FeatureConfiguration_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ExampleParserConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExampleParserConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExampleParserConfiguration_FeatureMapEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/example/example_parser_configuration.proto");
  GOOGLE_CHECK(file != NULL);
  VarLenFeatureProto_descriptor_ = file->message_type(0);
  static const int VarLenFeatureProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarLenFeatureProto, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarLenFeatureProto, values_output_tensor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarLenFeatureProto, indices_output_tensor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarLenFeatureProto, shapes_output_tensor_name_),
  };
  VarLenFeatureProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VarLenFeatureProto_descriptor_,
      VarLenFeatureProto::internal_default_instance(),
      VarLenFeatureProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(VarLenFeatureProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarLenFeatureProto, _internal_metadata_));
  FixedLenFeatureProto_descriptor_ = file->message_type(1);
  static const int FixedLenFeatureProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedLenFeatureProto, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedLenFeatureProto, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedLenFeatureProto, default_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedLenFeatureProto, values_output_tensor_name_),
  };
  FixedLenFeatureProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FixedLenFeatureProto_descriptor_,
      FixedLenFeatureProto::internal_default_instance(),
      FixedLenFeatureProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(FixedLenFeatureProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedLenFeatureProto, _internal_metadata_));
  FeatureConfiguration_descriptor_ = file->message_type(2);
  static const int FeatureConfiguration_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(FeatureConfiguration_default_oneof_instance_, fixed_len_feature_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(FeatureConfiguration_default_oneof_instance_, var_len_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureConfiguration, config_),
  };
  FeatureConfiguration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureConfiguration_descriptor_,
      FeatureConfiguration::internal_default_instance(),
      FeatureConfiguration_offsets_,
      -1,
      -1,
      -1,
      FeatureConfiguration_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureConfiguration, _oneof_case_[0]),
      sizeof(FeatureConfiguration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureConfiguration, _internal_metadata_));
  ExampleParserConfiguration_descriptor_ = file->message_type(3);
  static const int ExampleParserConfiguration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleParserConfiguration, feature_map_),
  };
  ExampleParserConfiguration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExampleParserConfiguration_descriptor_,
      ExampleParserConfiguration::internal_default_instance(),
      ExampleParserConfiguration_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExampleParserConfiguration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleParserConfiguration, _internal_metadata_));
  ExampleParserConfiguration_FeatureMapEntry_descriptor_ = ExampleParserConfiguration_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VarLenFeatureProto_descriptor_, VarLenFeatureProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FixedLenFeatureProto_descriptor_, FixedLenFeatureProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureConfiguration_descriptor_, FeatureConfiguration::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExampleParserConfiguration_descriptor_, ExampleParserConfiguration::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ExampleParserConfiguration_FeatureMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::FeatureConfiguration,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ExampleParserConfiguration_FeatureMapEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto() {
  VarLenFeatureProto_default_instance_.Shutdown();
  delete VarLenFeatureProto_reflection_;
  FixedLenFeatureProto_default_instance_.Shutdown();
  delete FixedLenFeatureProto_reflection_;
  FeatureConfiguration_default_instance_.Shutdown();
  delete FeatureConfiguration_default_oneof_instance_;
  delete FeatureConfiguration_reflection_;
  ExampleParserConfiguration_default_instance_.Shutdown();
  delete ExampleParserConfiguration_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto();
  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  VarLenFeatureProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FixedLenFeatureProto_default_instance_.DefaultConstruct();
  FeatureConfiguration_default_instance_.DefaultConstruct();
  FeatureConfiguration_default_oneof_instance_ = new FeatureConfigurationOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  ExampleParserConfiguration_default_instance_.DefaultConstruct();
  VarLenFeatureProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  FixedLenFeatureProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  FeatureConfiguration_default_instance_.get_mutable()->InitAsDefaultInstance();
  ExampleParserConfiguration_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n:tensorflow/core/example/example_parser"
    "_configuration.proto\022\ntensorflow\032,tensor"
    "flow/core/framework/tensor_shape.proto\032&"
    "tensorflow/core/framework/tensor.proto\032%"
    "tensorflow/core/framework/types.proto\"\243\001"
    "\n\022VarLenFeatureProto\022#\n\005dtype\030\001 \001(\0162\024.te"
    "nsorflow.DataType\022!\n\031values_output_tenso"
    "r_name\030\002 \001(\t\022\"\n\032indices_output_tensor_na"
    "me\030\003 \001(\t\022!\n\031shapes_output_tensor_name\030\004 "
    "\001(\t\"\273\001\n\024FixedLenFeatureProto\022#\n\005dtype\030\001 "
    "\001(\0162\024.tensorflow.DataType\022+\n\005shape\030\002 \001(\013"
    "2\034.tensorflow.TensorShapeProto\022.\n\rdefaul"
    "t_value\030\003 \001(\0132\027.tensorflow.TensorProto\022!"
    "\n\031values_output_tensor_name\030\004 \001(\t\"\232\001\n\024Fe"
    "atureConfiguration\022=\n\021fixed_len_feature\030"
    "\001 \001(\0132 .tensorflow.FixedLenFeatureProtoH"
    "\000\0229\n\017var_len_feature\030\002 \001(\0132\036.tensorflow."
    "VarLenFeatureProtoH\000B\010\n\006config\"\276\001\n\032Examp"
    "leParserConfiguration\022K\n\013feature_map\030\001 \003"
    "(\01326.tensorflow.ExampleParserConfigurati"
    "on.FeatureMapEntry\032S\n\017FeatureMapEntry\022\013\n"
    "\003key\030\001 \001(\t\022/\n\005value\030\002 \001(\0132 .tensorflow.F"
    "eatureConfiguration:\0028\001B\?\n\026org.tensorflo"
    "w.exampleB ExampleParserConfigurationPro"
    "tosP\001\370\001\001b\006proto3", 976);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/example/example_parser_configuration.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VarLenFeatureProto::kDtypeFieldNumber;
const int VarLenFeatureProto::kValuesOutputTensorNameFieldNumber;
const int VarLenFeatureProto::kIndicesOutputTensorNameFieldNumber;
const int VarLenFeatureProto::kShapesOutputTensorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VarLenFeatureProto::VarLenFeatureProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.VarLenFeatureProto)
}
VarLenFeatureProto::VarLenFeatureProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.VarLenFeatureProto)
}

void VarLenFeatureProto::InitAsDefaultInstance() {
}

VarLenFeatureProto::VarLenFeatureProto(const VarLenFeatureProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.VarLenFeatureProto)
}

void VarLenFeatureProto::SharedCtor() {
  values_output_tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indices_output_tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shapes_output_tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtype_ = 0;
  _cached_size_ = 0;
}

VarLenFeatureProto::~VarLenFeatureProto() {
  // @@protoc_insertion_point(destructor:tensorflow.VarLenFeatureProto)
  SharedDtor();
}

void VarLenFeatureProto::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  values_output_tensor_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  indices_output_tensor_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  shapes_output_tensor_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void VarLenFeatureProto::ArenaDtor(void* object) {
  VarLenFeatureProto* _this = reinterpret_cast< VarLenFeatureProto* >(object);
  (void)_this;
}
void VarLenFeatureProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VarLenFeatureProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarLenFeatureProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarLenFeatureProto_descriptor_;
}

const VarLenFeatureProto& VarLenFeatureProto::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VarLenFeatureProto> VarLenFeatureProto_default_instance_;

VarLenFeatureProto* VarLenFeatureProto::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VarLenFeatureProto>(arena);
}

void VarLenFeatureProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.VarLenFeatureProto)
  dtype_ = 0;
  values_output_tensor_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  indices_output_tensor_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  shapes_output_tensor_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool VarLenFeatureProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.VarLenFeatureProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.DataType dtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values_output_tensor_name;
        break;
      }

      // optional string values_output_tensor_name = 2;
      case 2: {
        if (tag == 18) {
         parse_values_output_tensor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_values_output_tensor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->values_output_tensor_name().data(), this->values_output_tensor_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.VarLenFeatureProto.values_output_tensor_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_indices_output_tensor_name;
        break;
      }

      // optional string indices_output_tensor_name = 3;
      case 3: {
        if (tag == 26) {
         parse_indices_output_tensor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_indices_output_tensor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->indices_output_tensor_name().data(), this->indices_output_tensor_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.VarLenFeatureProto.indices_output_tensor_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_shapes_output_tensor_name;
        break;
      }

      // optional string shapes_output_tensor_name = 4;
      case 4: {
        if (tag == 34) {
         parse_shapes_output_tensor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shapes_output_tensor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shapes_output_tensor_name().data(), this->shapes_output_tensor_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.VarLenFeatureProto.shapes_output_tensor_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.VarLenFeatureProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.VarLenFeatureProto)
  return false;
#undef DO_
}

void VarLenFeatureProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.VarLenFeatureProto)
  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // optional string values_output_tensor_name = 2;
  if (this->values_output_tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values_output_tensor_name().data(), this->values_output_tensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VarLenFeatureProto.values_output_tensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->values_output_tensor_name(), output);
  }

  // optional string indices_output_tensor_name = 3;
  if (this->indices_output_tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->indices_output_tensor_name().data(), this->indices_output_tensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VarLenFeatureProto.indices_output_tensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->indices_output_tensor_name(), output);
  }

  // optional string shapes_output_tensor_name = 4;
  if (this->shapes_output_tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shapes_output_tensor_name().data(), this->shapes_output_tensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VarLenFeatureProto.shapes_output_tensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->shapes_output_tensor_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.VarLenFeatureProto)
}

::google::protobuf::uint8* VarLenFeatureProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.VarLenFeatureProto)
  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // optional string values_output_tensor_name = 2;
  if (this->values_output_tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values_output_tensor_name().data(), this->values_output_tensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VarLenFeatureProto.values_output_tensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->values_output_tensor_name(), target);
  }

  // optional string indices_output_tensor_name = 3;
  if (this->indices_output_tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->indices_output_tensor_name().data(), this->indices_output_tensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VarLenFeatureProto.indices_output_tensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->indices_output_tensor_name(), target);
  }

  // optional string shapes_output_tensor_name = 4;
  if (this->shapes_output_tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shapes_output_tensor_name().data(), this->shapes_output_tensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VarLenFeatureProto.shapes_output_tensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->shapes_output_tensor_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.VarLenFeatureProto)
  return target;
}

size_t VarLenFeatureProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.VarLenFeatureProto)
  size_t total_size = 0;

  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // optional string values_output_tensor_name = 2;
  if (this->values_output_tensor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->values_output_tensor_name());
  }

  // optional string indices_output_tensor_name = 3;
  if (this->indices_output_tensor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->indices_output_tensor_name());
  }

  // optional string shapes_output_tensor_name = 4;
  if (this->shapes_output_tensor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shapes_output_tensor_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarLenFeatureProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.VarLenFeatureProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VarLenFeatureProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VarLenFeatureProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.VarLenFeatureProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.VarLenFeatureProto)
    UnsafeMergeFrom(*source);
  }
}

void VarLenFeatureProto::MergeFrom(const VarLenFeatureProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.VarLenFeatureProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VarLenFeatureProto::UnsafeMergeFrom(const VarLenFeatureProto& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
  if (from.values_output_tensor_name().size() > 0) {
    set_values_output_tensor_name(from.values_output_tensor_name());
  }
  if (from.indices_output_tensor_name().size() > 0) {
    set_indices_output_tensor_name(from.indices_output_tensor_name());
  }
  if (from.shapes_output_tensor_name().size() > 0) {
    set_shapes_output_tensor_name(from.shapes_output_tensor_name());
  }
}

void VarLenFeatureProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.VarLenFeatureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarLenFeatureProto::CopyFrom(const VarLenFeatureProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.VarLenFeatureProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VarLenFeatureProto::IsInitialized() const {

  return true;
}

void VarLenFeatureProto::Swap(VarLenFeatureProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VarLenFeatureProto temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void VarLenFeatureProto::UnsafeArenaSwap(VarLenFeatureProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VarLenFeatureProto::InternalSwap(VarLenFeatureProto* other) {
  std::swap(dtype_, other->dtype_);
  values_output_tensor_name_.Swap(&other->values_output_tensor_name_);
  indices_output_tensor_name_.Swap(&other->indices_output_tensor_name_);
  shapes_output_tensor_name_.Swap(&other->shapes_output_tensor_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VarLenFeatureProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarLenFeatureProto_descriptor_;
  metadata.reflection = VarLenFeatureProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VarLenFeatureProto

// optional .tensorflow.DataType dtype = 1;
void VarLenFeatureProto::clear_dtype() {
  dtype_ = 0;
}
::tensorflow::DataType VarLenFeatureProto::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.VarLenFeatureProto.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
void VarLenFeatureProto::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.VarLenFeatureProto.dtype)
}

// optional string values_output_tensor_name = 2;
void VarLenFeatureProto::clear_values_output_tensor_name() {
  values_output_tensor_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VarLenFeatureProto::values_output_tensor_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.VarLenFeatureProto.values_output_tensor_name)
  return values_output_tensor_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VarLenFeatureProto::set_values_output_tensor_name(const ::std::string& value) {
  
  values_output_tensor_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.VarLenFeatureProto.values_output_tensor_name)
}
void VarLenFeatureProto::set_values_output_tensor_name(const char* value) {
  
  values_output_tensor_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.VarLenFeatureProto.values_output_tensor_name)
}
void VarLenFeatureProto::set_values_output_tensor_name(const char* value,
    size_t size) {
  
  values_output_tensor_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.VarLenFeatureProto.values_output_tensor_name)
}
::std::string* VarLenFeatureProto::mutable_values_output_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.VarLenFeatureProto.values_output_tensor_name)
  return values_output_tensor_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VarLenFeatureProto::release_values_output_tensor_name() {
  // @@protoc_insertion_point(field_release:tensorflow.VarLenFeatureProto.values_output_tensor_name)
  
  return values_output_tensor_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VarLenFeatureProto::unsafe_arena_release_values_output_tensor_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.VarLenFeatureProto.values_output_tensor_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return values_output_tensor_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VarLenFeatureProto::set_allocated_values_output_tensor_name(::std::string* values_output_tensor_name) {
  if (values_output_tensor_name != NULL) {
    
  } else {
    
  }
  values_output_tensor_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), values_output_tensor_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.VarLenFeatureProto.values_output_tensor_name)
}
void VarLenFeatureProto::unsafe_arena_set_allocated_values_output_tensor_name(
    ::std::string* values_output_tensor_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (values_output_tensor_name != NULL) {
    
  } else {
    
  }
  values_output_tensor_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      values_output_tensor_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.VarLenFeatureProto.values_output_tensor_name)
}

// optional string indices_output_tensor_name = 3;
void VarLenFeatureProto::clear_indices_output_tensor_name() {
  indices_output_tensor_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VarLenFeatureProto::indices_output_tensor_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.VarLenFeatureProto.indices_output_tensor_name)
  return indices_output_tensor_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VarLenFeatureProto::set_indices_output_tensor_name(const ::std::string& value) {
  
  indices_output_tensor_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.VarLenFeatureProto.indices_output_tensor_name)
}
void VarLenFeatureProto::set_indices_output_tensor_name(const char* value) {
  
  indices_output_tensor_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.VarLenFeatureProto.indices_output_tensor_name)
}
void VarLenFeatureProto::set_indices_output_tensor_name(const char* value,
    size_t size) {
  
  indices_output_tensor_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.VarLenFeatureProto.indices_output_tensor_name)
}
::std::string* VarLenFeatureProto::mutable_indices_output_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.VarLenFeatureProto.indices_output_tensor_name)
  return indices_output_tensor_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VarLenFeatureProto::release_indices_output_tensor_name() {
  // @@protoc_insertion_point(field_release:tensorflow.VarLenFeatureProto.indices_output_tensor_name)
  
  return indices_output_tensor_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VarLenFeatureProto::unsafe_arena_release_indices_output_tensor_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.VarLenFeatureProto.indices_output_tensor_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return indices_output_tensor_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VarLenFeatureProto::set_allocated_indices_output_tensor_name(::std::string* indices_output_tensor_name) {
  if (indices_output_tensor_name != NULL) {
    
  } else {
    
  }
  indices_output_tensor_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), indices_output_tensor_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.VarLenFeatureProto.indices_output_tensor_name)
}
void VarLenFeatureProto::unsafe_arena_set_allocated_indices_output_tensor_name(
    ::std::string* indices_output_tensor_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (indices_output_tensor_name != NULL) {
    
  } else {
    
  }
  indices_output_tensor_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      indices_output_tensor_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.VarLenFeatureProto.indices_output_tensor_name)
}

// optional string shapes_output_tensor_name = 4;
void VarLenFeatureProto::clear_shapes_output_tensor_name() {
  shapes_output_tensor_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& VarLenFeatureProto::shapes_output_tensor_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.VarLenFeatureProto.shapes_output_tensor_name)
  return shapes_output_tensor_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VarLenFeatureProto::set_shapes_output_tensor_name(const ::std::string& value) {
  
  shapes_output_tensor_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.VarLenFeatureProto.shapes_output_tensor_name)
}
void VarLenFeatureProto::set_shapes_output_tensor_name(const char* value) {
  
  shapes_output_tensor_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.VarLenFeatureProto.shapes_output_tensor_name)
}
void VarLenFeatureProto::set_shapes_output_tensor_name(const char* value,
    size_t size) {
  
  shapes_output_tensor_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.VarLenFeatureProto.shapes_output_tensor_name)
}
::std::string* VarLenFeatureProto::mutable_shapes_output_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.VarLenFeatureProto.shapes_output_tensor_name)
  return shapes_output_tensor_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VarLenFeatureProto::release_shapes_output_tensor_name() {
  // @@protoc_insertion_point(field_release:tensorflow.VarLenFeatureProto.shapes_output_tensor_name)
  
  return shapes_output_tensor_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* VarLenFeatureProto::unsafe_arena_release_shapes_output_tensor_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.VarLenFeatureProto.shapes_output_tensor_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return shapes_output_tensor_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void VarLenFeatureProto::set_allocated_shapes_output_tensor_name(::std::string* shapes_output_tensor_name) {
  if (shapes_output_tensor_name != NULL) {
    
  } else {
    
  }
  shapes_output_tensor_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shapes_output_tensor_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.VarLenFeatureProto.shapes_output_tensor_name)
}
void VarLenFeatureProto::unsafe_arena_set_allocated_shapes_output_tensor_name(
    ::std::string* shapes_output_tensor_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (shapes_output_tensor_name != NULL) {
    
  } else {
    
  }
  shapes_output_tensor_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      shapes_output_tensor_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.VarLenFeatureProto.shapes_output_tensor_name)
}

inline const VarLenFeatureProto* VarLenFeatureProto::internal_default_instance() {
  return &VarLenFeatureProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void FixedLenFeatureProto::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorShapeProto* FixedLenFeatureProto::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorShapeProto* temp = new ::tensorflow::TensorShapeProto(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::tensorflow::TensorShapeProto* FixedLenFeatureProto::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.FixedLenFeatureProto.shape)
  
  ::tensorflow::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
void FixedLenFeatureProto::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorShapeProto** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::tensorflow::TensorShapeProto* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void FixedLenFeatureProto::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.FixedLenFeatureProto.shape)
}
void FixedLenFeatureProto::_slow_mutable_default_value() {
  default_value_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorProto* FixedLenFeatureProto::_slow_release_default_value() {
  if (default_value_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorProto* temp = new ::tensorflow::TensorProto(*default_value_);
    default_value_ = NULL;
    return temp;
  }
}
::tensorflow::TensorProto* FixedLenFeatureProto::unsafe_arena_release_default_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.FixedLenFeatureProto.default_value)
  
  ::tensorflow::TensorProto* temp = default_value_;
  default_value_ = NULL;
  return temp;
}
void FixedLenFeatureProto::_slow_set_allocated_default_value(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorProto** default_value) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*default_value) == NULL) {
      message_arena->Own(*default_value);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*default_value)) {
      ::tensorflow::TensorProto* new_default_value = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
            message_arena);
      new_default_value->CopyFrom(**default_value);
      *default_value = new_default_value;
    }
}
void FixedLenFeatureProto::unsafe_arena_set_allocated_default_value(
    ::tensorflow::TensorProto* default_value) {
  if (GetArenaNoVirtual() == NULL) {
    delete default_value_;
  }
  default_value_ = default_value;
  if (default_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.FixedLenFeatureProto.default_value)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedLenFeatureProto::kDtypeFieldNumber;
const int FixedLenFeatureProto::kShapeFieldNumber;
const int FixedLenFeatureProto::kDefaultValueFieldNumber;
const int FixedLenFeatureProto::kValuesOutputTensorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedLenFeatureProto::FixedLenFeatureProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.FixedLenFeatureProto)
}
FixedLenFeatureProto::FixedLenFeatureProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.FixedLenFeatureProto)
}

void FixedLenFeatureProto::InitAsDefaultInstance() {
  shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
  default_value_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
}

FixedLenFeatureProto::FixedLenFeatureProto(const FixedLenFeatureProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.FixedLenFeatureProto)
}

void FixedLenFeatureProto::SharedCtor() {
  values_output_tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_ = NULL;
  default_value_ = NULL;
  dtype_ = 0;
  _cached_size_ = 0;
}

FixedLenFeatureProto::~FixedLenFeatureProto() {
  // @@protoc_insertion_point(destructor:tensorflow.FixedLenFeatureProto)
  SharedDtor();
}

void FixedLenFeatureProto::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  values_output_tensor_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &FixedLenFeatureProto_default_instance_.get()) {
    delete shape_;
    delete default_value_;
  }
}

void FixedLenFeatureProto::ArenaDtor(void* object) {
  FixedLenFeatureProto* _this = reinterpret_cast< FixedLenFeatureProto* >(object);
  (void)_this;
}
void FixedLenFeatureProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FixedLenFeatureProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedLenFeatureProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedLenFeatureProto_descriptor_;
}

const FixedLenFeatureProto& FixedLenFeatureProto::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FixedLenFeatureProto> FixedLenFeatureProto_default_instance_;

FixedLenFeatureProto* FixedLenFeatureProto::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<FixedLenFeatureProto>(arena);
}

void FixedLenFeatureProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.FixedLenFeatureProto)
  dtype_ = 0;
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
  if (GetArenaNoVirtual() == NULL && default_value_ != NULL) delete default_value_;
  default_value_ = NULL;
  values_output_tensor_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool FixedLenFeatureProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.FixedLenFeatureProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.DataType dtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shape;
        break;
      }

      // optional .tensorflow.TensorShapeProto shape = 2;
      case 2: {
        if (tag == 18) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_default_value;
        break;
      }

      // optional .tensorflow.TensorProto default_value = 3;
      case 3: {
        if (tag == 26) {
         parse_default_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_values_output_tensor_name;
        break;
      }

      // optional string values_output_tensor_name = 4;
      case 4: {
        if (tag == 34) {
         parse_values_output_tensor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_values_output_tensor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->values_output_tensor_name().data(), this->values_output_tensor_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.FixedLenFeatureProto.values_output_tensor_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.FixedLenFeatureProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.FixedLenFeatureProto)
  return false;
#undef DO_
}

void FixedLenFeatureProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.FixedLenFeatureProto)
  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // optional .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shape_, output);
  }

  // optional .tensorflow.TensorProto default_value = 3;
  if (this->has_default_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->default_value_, output);
  }

  // optional string values_output_tensor_name = 4;
  if (this->values_output_tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values_output_tensor_name().data(), this->values_output_tensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.FixedLenFeatureProto.values_output_tensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->values_output_tensor_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.FixedLenFeatureProto)
}

::google::protobuf::uint8* FixedLenFeatureProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.FixedLenFeatureProto)
  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // optional .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shape_, false, target);
  }

  // optional .tensorflow.TensorProto default_value = 3;
  if (this->has_default_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->default_value_, false, target);
  }

  // optional string values_output_tensor_name = 4;
  if (this->values_output_tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values_output_tensor_name().data(), this->values_output_tensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.FixedLenFeatureProto.values_output_tensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->values_output_tensor_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.FixedLenFeatureProto)
  return target;
}

size_t FixedLenFeatureProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.FixedLenFeatureProto)
  size_t total_size = 0;

  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // optional .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  // optional .tensorflow.TensorProto default_value = 3;
  if (this->has_default_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->default_value_);
  }

  // optional string values_output_tensor_name = 4;
  if (this->values_output_tensor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->values_output_tensor_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedLenFeatureProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.FixedLenFeatureProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FixedLenFeatureProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedLenFeatureProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.FixedLenFeatureProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.FixedLenFeatureProto)
    UnsafeMergeFrom(*source);
  }
}

void FixedLenFeatureProto::MergeFrom(const FixedLenFeatureProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.FixedLenFeatureProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FixedLenFeatureProto::UnsafeMergeFrom(const FixedLenFeatureProto& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
  if (from.has_shape()) {
    mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from.shape());
  }
  if (from.has_default_value()) {
    mutable_default_value()->::tensorflow::TensorProto::MergeFrom(from.default_value());
  }
  if (from.values_output_tensor_name().size() > 0) {
    set_values_output_tensor_name(from.values_output_tensor_name());
  }
}

void FixedLenFeatureProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.FixedLenFeatureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedLenFeatureProto::CopyFrom(const FixedLenFeatureProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.FixedLenFeatureProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FixedLenFeatureProto::IsInitialized() const {

  return true;
}

void FixedLenFeatureProto::Swap(FixedLenFeatureProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FixedLenFeatureProto temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void FixedLenFeatureProto::UnsafeArenaSwap(FixedLenFeatureProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FixedLenFeatureProto::InternalSwap(FixedLenFeatureProto* other) {
  std::swap(dtype_, other->dtype_);
  std::swap(shape_, other->shape_);
  std::swap(default_value_, other->default_value_);
  values_output_tensor_name_.Swap(&other->values_output_tensor_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixedLenFeatureProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedLenFeatureProto_descriptor_;
  metadata.reflection = FixedLenFeatureProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FixedLenFeatureProto

// optional .tensorflow.DataType dtype = 1;
void FixedLenFeatureProto::clear_dtype() {
  dtype_ = 0;
}
::tensorflow::DataType FixedLenFeatureProto::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.FixedLenFeatureProto.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
void FixedLenFeatureProto::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.FixedLenFeatureProto.dtype)
}

// optional .tensorflow.TensorShapeProto shape = 2;
bool FixedLenFeatureProto::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void FixedLenFeatureProto::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::tensorflow::TensorShapeProto& FixedLenFeatureProto::shape() const {
  // @@protoc_insertion_point(field_get:tensorflow.FixedLenFeatureProto.shape)
  return shape_ != NULL ? *shape_
                         : *::tensorflow::TensorShapeProto::internal_default_instance();
}
::tensorflow::TensorShapeProto* FixedLenFeatureProto::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.FixedLenFeatureProto.shape)
  return shape_;
}
::tensorflow::TensorShapeProto* FixedLenFeatureProto::release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.FixedLenFeatureProto.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::tensorflow::TensorShapeProto* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void FixedLenFeatureProto::set_allocated_shape(::tensorflow::TensorShapeProto* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.FixedLenFeatureProto.shape)
}

// optional .tensorflow.TensorProto default_value = 3;
bool FixedLenFeatureProto::has_default_value() const {
  return this != internal_default_instance() && default_value_ != NULL;
}
void FixedLenFeatureProto::clear_default_value() {
  if (GetArenaNoVirtual() == NULL && default_value_ != NULL) delete default_value_;
  default_value_ = NULL;
}
const ::tensorflow::TensorProto& FixedLenFeatureProto::default_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.FixedLenFeatureProto.default_value)
  return default_value_ != NULL ? *default_value_
                         : *::tensorflow::TensorProto::internal_default_instance();
}
::tensorflow::TensorProto* FixedLenFeatureProto::mutable_default_value() {
  
  if (default_value_ == NULL) {
    _slow_mutable_default_value();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.FixedLenFeatureProto.default_value)
  return default_value_;
}
::tensorflow::TensorProto* FixedLenFeatureProto::release_default_value() {
  // @@protoc_insertion_point(field_release:tensorflow.FixedLenFeatureProto.default_value)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_default_value();
  } else {
    ::tensorflow::TensorProto* temp = default_value_;
    default_value_ = NULL;
    return temp;
  }
}
 void FixedLenFeatureProto::set_allocated_default_value(::tensorflow::TensorProto* default_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete default_value_;
  }
  if (default_value != NULL) {
    _slow_set_allocated_default_value(message_arena, &default_value);
  }
  default_value_ = default_value;
  if (default_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.FixedLenFeatureProto.default_value)
}

// optional string values_output_tensor_name = 4;
void FixedLenFeatureProto::clear_values_output_tensor_name() {
  values_output_tensor_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& FixedLenFeatureProto::values_output_tensor_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.FixedLenFeatureProto.values_output_tensor_name)
  return values_output_tensor_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FixedLenFeatureProto::set_values_output_tensor_name(const ::std::string& value) {
  
  values_output_tensor_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.FixedLenFeatureProto.values_output_tensor_name)
}
void FixedLenFeatureProto::set_values_output_tensor_name(const char* value) {
  
  values_output_tensor_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.FixedLenFeatureProto.values_output_tensor_name)
}
void FixedLenFeatureProto::set_values_output_tensor_name(const char* value,
    size_t size) {
  
  values_output_tensor_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.FixedLenFeatureProto.values_output_tensor_name)
}
::std::string* FixedLenFeatureProto::mutable_values_output_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.FixedLenFeatureProto.values_output_tensor_name)
  return values_output_tensor_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* FixedLenFeatureProto::release_values_output_tensor_name() {
  // @@protoc_insertion_point(field_release:tensorflow.FixedLenFeatureProto.values_output_tensor_name)
  
  return values_output_tensor_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* FixedLenFeatureProto::unsafe_arena_release_values_output_tensor_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.FixedLenFeatureProto.values_output_tensor_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return values_output_tensor_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void FixedLenFeatureProto::set_allocated_values_output_tensor_name(::std::string* values_output_tensor_name) {
  if (values_output_tensor_name != NULL) {
    
  } else {
    
  }
  values_output_tensor_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), values_output_tensor_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.FixedLenFeatureProto.values_output_tensor_name)
}
void FixedLenFeatureProto::unsafe_arena_set_allocated_values_output_tensor_name(
    ::std::string* values_output_tensor_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (values_output_tensor_name != NULL) {
    
  } else {
    
  }
  values_output_tensor_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      values_output_tensor_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.FixedLenFeatureProto.values_output_tensor_name)
}

inline const FixedLenFeatureProto* FixedLenFeatureProto::internal_default_instance() {
  return &FixedLenFeatureProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureConfiguration::kFixedLenFeatureFieldNumber;
const int FeatureConfiguration::kVarLenFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureConfiguration::FeatureConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.FeatureConfiguration)
}
FeatureConfiguration::FeatureConfiguration(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.FeatureConfiguration)
}

void FeatureConfiguration::InitAsDefaultInstance() {
  FeatureConfiguration_default_oneof_instance_->fixed_len_feature_ = const_cast< ::tensorflow::FixedLenFeatureProto*>(
      ::tensorflow::FixedLenFeatureProto::internal_default_instance());
  FeatureConfiguration_default_oneof_instance_->var_len_feature_ = const_cast< ::tensorflow::VarLenFeatureProto*>(
      ::tensorflow::VarLenFeatureProto::internal_default_instance());
}

FeatureConfiguration::FeatureConfiguration(const FeatureConfiguration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.FeatureConfiguration)
}

void FeatureConfiguration::SharedCtor() {
  clear_has_config();
  _cached_size_ = 0;
}

FeatureConfiguration::~FeatureConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.FeatureConfiguration)
  SharedDtor();
}

void FeatureConfiguration::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (has_config()) {
    clear_config();
  }
}

void FeatureConfiguration::ArenaDtor(void* object) {
  FeatureConfiguration* _this = reinterpret_cast< FeatureConfiguration* >(object);
  (void)_this;
}
void FeatureConfiguration::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FeatureConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureConfiguration_descriptor_;
}

const FeatureConfiguration& FeatureConfiguration::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FeatureConfiguration> FeatureConfiguration_default_instance_;

FeatureConfiguration* FeatureConfiguration::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<FeatureConfiguration>(arena);
}

void FeatureConfiguration::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.FeatureConfiguration)
  switch (config_case()) {
    case kFixedLenFeature: {
      if (GetArenaNoVirtual() == NULL) {
        delete config_.fixed_len_feature_;
      }
      break;
    }
    case kVarLenFeature: {
      if (GetArenaNoVirtual() == NULL) {
        delete config_.var_len_feature_;
      }
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_NOT_SET;
}


void FeatureConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.FeatureConfiguration)
  clear_config();
}

bool FeatureConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.FeatureConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.FixedLenFeatureProto fixed_len_feature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed_len_feature()));
        } else {
          goto handle_unusual;
        }
        goto after_var_len_feature;
        break;
      }

      // optional .tensorflow.VarLenFeatureProto var_len_feature = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_var_len_feature()));
        } else {
          goto handle_unusual;
        }
       after_var_len_feature:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.FeatureConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.FeatureConfiguration)
  return false;
#undef DO_
}

void FeatureConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.FeatureConfiguration)
  // optional .tensorflow.FixedLenFeatureProto fixed_len_feature = 1;
  if (has_fixed_len_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *config_.fixed_len_feature_, output);
  }

  // optional .tensorflow.VarLenFeatureProto var_len_feature = 2;
  if (has_var_len_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *config_.var_len_feature_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.FeatureConfiguration)
}

::google::protobuf::uint8* FeatureConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.FeatureConfiguration)
  // optional .tensorflow.FixedLenFeatureProto fixed_len_feature = 1;
  if (has_fixed_len_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *config_.fixed_len_feature_, false, target);
  }

  // optional .tensorflow.VarLenFeatureProto var_len_feature = 2;
  if (has_var_len_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *config_.var_len_feature_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.FeatureConfiguration)
  return target;
}

size_t FeatureConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.FeatureConfiguration)
  size_t total_size = 0;

  switch (config_case()) {
    // optional .tensorflow.FixedLenFeatureProto fixed_len_feature = 1;
    case kFixedLenFeature: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.fixed_len_feature_);
      break;
    }
    // optional .tensorflow.VarLenFeatureProto var_len_feature = 2;
    case kVarLenFeature: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.var_len_feature_);
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.FeatureConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeatureConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.FeatureConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.FeatureConfiguration)
    UnsafeMergeFrom(*source);
  }
}

void FeatureConfiguration::MergeFrom(const FeatureConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.FeatureConfiguration)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FeatureConfiguration::UnsafeMergeFrom(const FeatureConfiguration& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.config_case()) {
    case kFixedLenFeature: {
      mutable_fixed_len_feature()->::tensorflow::FixedLenFeatureProto::MergeFrom(from.fixed_len_feature());
      break;
    }
    case kVarLenFeature: {
      mutable_var_len_feature()->::tensorflow::VarLenFeatureProto::MergeFrom(from.var_len_feature());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
}

void FeatureConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.FeatureConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureConfiguration::CopyFrom(const FeatureConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.FeatureConfiguration)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FeatureConfiguration::IsInitialized() const {

  return true;
}

void FeatureConfiguration::Swap(FeatureConfiguration* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FeatureConfiguration temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void FeatureConfiguration::UnsafeArenaSwap(FeatureConfiguration* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FeatureConfiguration::InternalSwap(FeatureConfiguration* other) {
  std::swap(config_, other->config_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureConfiguration_descriptor_;
  metadata.reflection = FeatureConfiguration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureConfiguration

// optional .tensorflow.FixedLenFeatureProto fixed_len_feature = 1;
bool FeatureConfiguration::has_fixed_len_feature() const {
  return config_case() == kFixedLenFeature;
}
void FeatureConfiguration::set_has_fixed_len_feature() {
  _oneof_case_[0] = kFixedLenFeature;
}
void FeatureConfiguration::clear_fixed_len_feature() {
  if (has_fixed_len_feature()) {
    if (GetArenaNoVirtual() == NULL) {
      delete config_.fixed_len_feature_;
    }
    clear_has_config();
  }
}
 const ::tensorflow::FixedLenFeatureProto& FeatureConfiguration::fixed_len_feature() const {
  // @@protoc_insertion_point(field_get:tensorflow.FeatureConfiguration.fixed_len_feature)
  return has_fixed_len_feature()
      ? *config_.fixed_len_feature_
      : ::tensorflow::FixedLenFeatureProto::default_instance();
}
::tensorflow::FixedLenFeatureProto* FeatureConfiguration::mutable_fixed_len_feature() {
  if (!has_fixed_len_feature()) {
    clear_config();
    set_has_fixed_len_feature();
    config_.fixed_len_feature_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::FixedLenFeatureProto >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.FeatureConfiguration.fixed_len_feature)
  return config_.fixed_len_feature_;
}
::tensorflow::FixedLenFeatureProto* FeatureConfiguration::release_fixed_len_feature() {
  // @@protoc_insertion_point(field_release:tensorflow.FeatureConfiguration.fixed_len_feature)
  if (has_fixed_len_feature()) {
    clear_has_config();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::FixedLenFeatureProto* temp = new ::tensorflow::FixedLenFeatureProto(*config_.fixed_len_feature_);
      config_.fixed_len_feature_ = NULL;
      return temp;
    } else {
      ::tensorflow::FixedLenFeatureProto* temp = config_.fixed_len_feature_;
      config_.fixed_len_feature_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void FeatureConfiguration::set_allocated_fixed_len_feature(::tensorflow::FixedLenFeatureProto* fixed_len_feature) {
  clear_config();
  if (fixed_len_feature) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(fixed_len_feature) == NULL) {
      GetArenaNoVirtual()->Own(fixed_len_feature);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(fixed_len_feature)) {
      ::tensorflow::FixedLenFeatureProto* new_fixed_len_feature = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::FixedLenFeatureProto >(
          GetArenaNoVirtual());
      new_fixed_len_feature->CopyFrom(*fixed_len_feature);
      fixed_len_feature = new_fixed_len_feature;
    }
    set_has_fixed_len_feature();
    config_.fixed_len_feature_ = fixed_len_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.FeatureConfiguration.fixed_len_feature)
}
 ::tensorflow::FixedLenFeatureProto* FeatureConfiguration::unsafe_arena_release_fixed_len_feature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.FeatureConfiguration.fixed_len_feature)
  if (has_fixed_len_feature()) {
    clear_has_config();
    ::tensorflow::FixedLenFeatureProto* temp = config_.fixed_len_feature_;
    config_.fixed_len_feature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void FeatureConfiguration::unsafe_arena_set_allocated_fixed_len_feature(::tensorflow::FixedLenFeatureProto* fixed_len_feature) {
  clear_config();
  if (fixed_len_feature) {
    set_has_fixed_len_feature();
    config_.fixed_len_feature_ = fixed_len_feature;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.FeatureConfiguration.fixed_len_feature)
}

// optional .tensorflow.VarLenFeatureProto var_len_feature = 2;
bool FeatureConfiguration::has_var_len_feature() const {
  return config_case() == kVarLenFeature;
}
void FeatureConfiguration::set_has_var_len_feature() {
  _oneof_case_[0] = kVarLenFeature;
}
void FeatureConfiguration::clear_var_len_feature() {
  if (has_var_len_feature()) {
    if (GetArenaNoVirtual() == NULL) {
      delete config_.var_len_feature_;
    }
    clear_has_config();
  }
}
 const ::tensorflow::VarLenFeatureProto& FeatureConfiguration::var_len_feature() const {
  // @@protoc_insertion_point(field_get:tensorflow.FeatureConfiguration.var_len_feature)
  return has_var_len_feature()
      ? *config_.var_len_feature_
      : ::tensorflow::VarLenFeatureProto::default_instance();
}
::tensorflow::VarLenFeatureProto* FeatureConfiguration::mutable_var_len_feature() {
  if (!has_var_len_feature()) {
    clear_config();
    set_has_var_len_feature();
    config_.var_len_feature_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::VarLenFeatureProto >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.FeatureConfiguration.var_len_feature)
  return config_.var_len_feature_;
}
::tensorflow::VarLenFeatureProto* FeatureConfiguration::release_var_len_feature() {
  // @@protoc_insertion_point(field_release:tensorflow.FeatureConfiguration.var_len_feature)
  if (has_var_len_feature()) {
    clear_has_config();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::VarLenFeatureProto* temp = new ::tensorflow::VarLenFeatureProto(*config_.var_len_feature_);
      config_.var_len_feature_ = NULL;
      return temp;
    } else {
      ::tensorflow::VarLenFeatureProto* temp = config_.var_len_feature_;
      config_.var_len_feature_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void FeatureConfiguration::set_allocated_var_len_feature(::tensorflow::VarLenFeatureProto* var_len_feature) {
  clear_config();
  if (var_len_feature) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(var_len_feature) == NULL) {
      GetArenaNoVirtual()->Own(var_len_feature);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(var_len_feature)) {
      ::tensorflow::VarLenFeatureProto* new_var_len_feature = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::VarLenFeatureProto >(
          GetArenaNoVirtual());
      new_var_len_feature->CopyFrom(*var_len_feature);
      var_len_feature = new_var_len_feature;
    }
    set_has_var_len_feature();
    config_.var_len_feature_ = var_len_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.FeatureConfiguration.var_len_feature)
}
 ::tensorflow::VarLenFeatureProto* FeatureConfiguration::unsafe_arena_release_var_len_feature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.FeatureConfiguration.var_len_feature)
  if (has_var_len_feature()) {
    clear_has_config();
    ::tensorflow::VarLenFeatureProto* temp = config_.var_len_feature_;
    config_.var_len_feature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void FeatureConfiguration::unsafe_arena_set_allocated_var_len_feature(::tensorflow::VarLenFeatureProto* var_len_feature) {
  clear_config();
  if (var_len_feature) {
    set_has_var_len_feature();
    config_.var_len_feature_ = var_len_feature;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.FeatureConfiguration.var_len_feature)
}

bool FeatureConfiguration::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
void FeatureConfiguration::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
FeatureConfiguration::ConfigCase FeatureConfiguration::config_case() const {
  return FeatureConfiguration::ConfigCase(_oneof_case_[0]);
}
inline const FeatureConfiguration* FeatureConfiguration::internal_default_instance() {
  return &FeatureConfiguration_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExampleParserConfiguration::kFeatureMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExampleParserConfiguration::ExampleParserConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ExampleParserConfiguration)
}
ExampleParserConfiguration::ExampleParserConfiguration(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feature_map_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ExampleParserConfiguration)
}

void ExampleParserConfiguration::InitAsDefaultInstance() {
}

ExampleParserConfiguration::ExampleParserConfiguration(const ExampleParserConfiguration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ExampleParserConfiguration)
}

void ExampleParserConfiguration::SharedCtor() {
  feature_map_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  feature_map_.SetEntryDescriptor(
      &::tensorflow::ExampleParserConfiguration_FeatureMapEntry_descriptor_);
  _cached_size_ = 0;
}

ExampleParserConfiguration::~ExampleParserConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.ExampleParserConfiguration)
  SharedDtor();
}

void ExampleParserConfiguration::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ExampleParserConfiguration::ArenaDtor(void* object) {
  ExampleParserConfiguration* _this = reinterpret_cast< ExampleParserConfiguration* >(object);
  (void)_this;
}
void ExampleParserConfiguration::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExampleParserConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExampleParserConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExampleParserConfiguration_descriptor_;
}

const ExampleParserConfiguration& ExampleParserConfiguration::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ExampleParserConfiguration> ExampleParserConfiguration_default_instance_;

ExampleParserConfiguration* ExampleParserConfiguration::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExampleParserConfiguration>(arena);
}

void ExampleParserConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ExampleParserConfiguration)
  feature_map_.Clear();
}

bool ExampleParserConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ExampleParserConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .tensorflow.FeatureConfiguration> feature_map = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_feature_map:
          ExampleParserConfiguration_FeatureMapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::FeatureConfiguration,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureConfiguration > > parser(&feature_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ExampleParserConfiguration.FeatureMapEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_feature_map;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ExampleParserConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ExampleParserConfiguration)
  return false;
#undef DO_
}

void ExampleParserConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ExampleParserConfiguration)
  // map<string, .tensorflow.FeatureConfiguration> feature_map = 1;
  if (!this->feature_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureConfiguration >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.ExampleParserConfiguration.FeatureMapEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->feature_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->feature_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureConfiguration >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::FeatureConfiguration >::const_iterator
          it = this->feature_map().begin();
          it != this->feature_map().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ExampleParserConfiguration_FeatureMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feature_map_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExampleParserConfiguration_FeatureMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::FeatureConfiguration >::const_iterator
          it = this->feature_map().begin();
          it != this->feature_map().end(); ++it) {
        entry.reset(feature_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.ExampleParserConfiguration)
}

::google::protobuf::uint8* ExampleParserConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ExampleParserConfiguration)
  // map<string, .tensorflow.FeatureConfiguration> feature_map = 1;
  if (!this->feature_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureConfiguration >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.ExampleParserConfiguration.FeatureMapEntry.key");
      }
    };

    if (deterministic &&
        this->feature_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->feature_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureConfiguration >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::FeatureConfiguration >::const_iterator
          it = this->feature_map().begin();
          it != this->feature_map().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ExampleParserConfiguration_FeatureMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feature_map_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExampleParserConfiguration_FeatureMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::FeatureConfiguration >::const_iterator
          it = this->feature_map().begin();
          it != this->feature_map().end(); ++it) {
        entry.reset(feature_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ExampleParserConfiguration)
  return target;
}

size_t ExampleParserConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ExampleParserConfiguration)
  size_t total_size = 0;

  // map<string, .tensorflow.FeatureConfiguration> feature_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->feature_map_size());
  {
    ::google::protobuf::scoped_ptr<ExampleParserConfiguration_FeatureMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::FeatureConfiguration >::const_iterator
        it = this->feature_map().begin();
        it != this->feature_map().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(feature_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExampleParserConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ExampleParserConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExampleParserConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExampleParserConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ExampleParserConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ExampleParserConfiguration)
    UnsafeMergeFrom(*source);
  }
}

void ExampleParserConfiguration::MergeFrom(const ExampleParserConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ExampleParserConfiguration)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ExampleParserConfiguration::UnsafeMergeFrom(const ExampleParserConfiguration& from) {
  GOOGLE_DCHECK(&from != this);
  feature_map_.MergeFrom(from.feature_map_);
}

void ExampleParserConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ExampleParserConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExampleParserConfiguration::CopyFrom(const ExampleParserConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ExampleParserConfiguration)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ExampleParserConfiguration::IsInitialized() const {

  return true;
}

void ExampleParserConfiguration::Swap(ExampleParserConfiguration* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExampleParserConfiguration temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ExampleParserConfiguration::UnsafeArenaSwap(ExampleParserConfiguration* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExampleParserConfiguration::InternalSwap(ExampleParserConfiguration* other) {
  feature_map_.Swap(&other->feature_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExampleParserConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExampleParserConfiguration_descriptor_;
  metadata.reflection = ExampleParserConfiguration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExampleParserConfiguration

// map<string, .tensorflow.FeatureConfiguration> feature_map = 1;
int ExampleParserConfiguration::feature_map_size() const {
  return feature_map_.size();
}
void ExampleParserConfiguration::clear_feature_map() {
  feature_map_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureConfiguration >&
ExampleParserConfiguration::feature_map() const {
  // @@protoc_insertion_point(field_map:tensorflow.ExampleParserConfiguration.feature_map)
  return feature_map_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureConfiguration >*
ExampleParserConfiguration::mutable_feature_map() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.ExampleParserConfiguration.feature_map)
  return feature_map_.MutableMap();
}

inline const ExampleParserConfiguration* ExampleParserConfiguration::internal_default_instance() {
  return &ExampleParserConfiguration_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
