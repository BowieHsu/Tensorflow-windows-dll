// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/example/feature.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/example/feature.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* BytesList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BytesList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Int64List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Int64List_reflection_ = NULL;
const ::google::protobuf::Descriptor* Feature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Feature_reflection_ = NULL;
struct FeatureOneofInstance {
  const ::tensorflow::BytesList* bytes_list_;
  const ::tensorflow::FloatList* float_list_;
  const ::tensorflow::Int64List* int64_list_;
}* Feature_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Features_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Features_reflection_ = NULL;
const ::google::protobuf::Descriptor* Features_FeatureEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FeatureList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureLists_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureLists_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureLists_FeatureListEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fexample_2ffeature_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fexample_2ffeature_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/example/feature.proto");
  GOOGLE_CHECK(file != NULL);
  BytesList_descriptor_ = file->message_type(0);
  static const int BytesList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesList, value_),
  };
  BytesList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BytesList_descriptor_,
      BytesList::internal_default_instance(),
      BytesList_offsets_,
      -1,
      -1,
      -1,
      sizeof(BytesList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesList, _internal_metadata_));
  FloatList_descriptor_ = file->message_type(1);
  static const int FloatList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatList, value_),
  };
  FloatList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FloatList_descriptor_,
      FloatList::internal_default_instance(),
      FloatList_offsets_,
      -1,
      -1,
      -1,
      sizeof(FloatList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatList, _internal_metadata_));
  Int64List_descriptor_ = file->message_type(2);
  static const int Int64List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64List, value_),
  };
  Int64List_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Int64List_descriptor_,
      Int64List::internal_default_instance(),
      Int64List_offsets_,
      -1,
      -1,
      -1,
      sizeof(Int64List),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64List, _internal_metadata_));
  Feature_descriptor_ = file->message_type(3);
  static const int Feature_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Feature_default_oneof_instance_, bytes_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Feature_default_oneof_instance_, float_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Feature_default_oneof_instance_, int64_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, kind_),
  };
  Feature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Feature_descriptor_,
      Feature::internal_default_instance(),
      Feature_offsets_,
      -1,
      -1,
      -1,
      Feature_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _oneof_case_[0]),
      sizeof(Feature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _internal_metadata_));
  Features_descriptor_ = file->message_type(4);
  static const int Features_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, feature_),
  };
  Features_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Features_descriptor_,
      Features::internal_default_instance(),
      Features_offsets_,
      -1,
      -1,
      -1,
      sizeof(Features),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, _internal_metadata_));
  Features_FeatureEntry_descriptor_ = Features_descriptor_->nested_type(0);
  FeatureList_descriptor_ = file->message_type(5);
  static const int FeatureList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureList, feature_),
  };
  FeatureList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureList_descriptor_,
      FeatureList::internal_default_instance(),
      FeatureList_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeatureList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureList, _internal_metadata_));
  FeatureLists_descriptor_ = file->message_type(6);
  static const int FeatureLists_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLists, feature_list_),
  };
  FeatureLists_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureLists_descriptor_,
      FeatureLists::internal_default_instance(),
      FeatureLists_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeatureLists),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLists, _internal_metadata_));
  FeatureLists_FeatureListEntry_descriptor_ = FeatureLists_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fexample_2ffeature_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BytesList_descriptor_, BytesList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FloatList_descriptor_, FloatList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Int64List_descriptor_, Int64List::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Feature_descriptor_, Feature::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Features_descriptor_, Features::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Features_FeatureEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::Feature,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Features_FeatureEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureList_descriptor_, FeatureList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureLists_descriptor_, FeatureLists::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        FeatureLists_FeatureListEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::FeatureList,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                FeatureLists_FeatureListEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fexample_2ffeature_2eproto() {
  BytesList_default_instance_.Shutdown();
  delete BytesList_reflection_;
  FloatList_default_instance_.Shutdown();
  delete FloatList_reflection_;
  Int64List_default_instance_.Shutdown();
  delete Int64List_reflection_;
  Feature_default_instance_.Shutdown();
  delete Feature_default_oneof_instance_;
  delete Feature_reflection_;
  Features_default_instance_.Shutdown();
  delete Features_reflection_;
  FeatureList_default_instance_.Shutdown();
  delete FeatureList_reflection_;
  FeatureLists_default_instance_.Shutdown();
  delete FeatureLists_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  BytesList_default_instance_.DefaultConstruct();
  FloatList_default_instance_.DefaultConstruct();
  Int64List_default_instance_.DefaultConstruct();
  Feature_default_instance_.DefaultConstruct();
  Feature_default_oneof_instance_ = new FeatureOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  Features_default_instance_.DefaultConstruct();
  FeatureList_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FeatureLists_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BytesList_default_instance_.get_mutable()->InitAsDefaultInstance();
  FloatList_default_instance_.get_mutable()->InitAsDefaultInstance();
  Int64List_default_instance_.get_mutable()->InitAsDefaultInstance();
  Feature_default_instance_.get_mutable()->InitAsDefaultInstance();
  Features_default_instance_.get_mutable()->InitAsDefaultInstance();
  FeatureList_default_instance_.get_mutable()->InitAsDefaultInstance();
  FeatureLists_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2fexample_2ffeature_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%tensorflow/core/example/feature.proto\022"
    "\ntensorflow\"\032\n\tBytesList\022\r\n\005value\030\001 \003(\014\""
    "\036\n\tFloatList\022\021\n\005value\030\001 \003(\002B\002\020\001\"\036\n\tInt64"
    "List\022\021\n\005value\030\001 \003(\003B\002\020\001\"\230\001\n\007Feature\022+\n\nb"
    "ytes_list\030\001 \001(\0132\025.tensorflow.BytesListH\000"
    "\022+\n\nfloat_list\030\002 \001(\0132\025.tensorflow.FloatL"
    "istH\000\022+\n\nint64_list\030\003 \001(\0132\025.tensorflow.I"
    "nt64ListH\000B\006\n\004kind\"\203\001\n\010Features\0222\n\007featu"
    "re\030\001 \003(\0132!.tensorflow.Features.FeatureEn"
    "try\032C\n\014FeatureEntry\022\013\n\003key\030\001 \001(\t\022\"\n\005valu"
    "e\030\002 \001(\0132\023.tensorflow.Feature:\0028\001\"3\n\013Feat"
    "ureList\022$\n\007feature\030\001 \003(\0132\023.tensorflow.Fe"
    "ature\"\234\001\n\014FeatureLists\022\?\n\014feature_list\030\001"
    " \003(\0132).tensorflow.FeatureLists.FeatureLi"
    "stEntry\032K\n\020FeatureListEntry\022\013\n\003key\030\001 \001(\t"
    "\022&\n\005value\030\002 \001(\0132\027.tensorflow.FeatureList"
    ":\0028\001B,\n\026org.tensorflow.exampleB\rFeatureP"
    "rotosP\001\370\001\001b\006proto3", 698);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/example/feature.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fexample_2ffeature_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2fexample_2ffeature_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2fexample_2ffeature_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2fexample_2ffeature_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2fexample_2ffeature_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fexample_2ffeature_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fexample_2ffeature_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fexample_2ffeature_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BytesList::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BytesList::BytesList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.BytesList)
}
BytesList::BytesList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  value_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BytesList)
}

void BytesList::InitAsDefaultInstance() {
}

BytesList::BytesList(const BytesList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.BytesList)
}

void BytesList::SharedCtor() {
  _cached_size_ = 0;
}

BytesList::~BytesList() {
  // @@protoc_insertion_point(destructor:tensorflow.BytesList)
  SharedDtor();
}

void BytesList::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void BytesList::ArenaDtor(void* object) {
  BytesList* _this = reinterpret_cast< BytesList* >(object);
  (void)_this;
}
void BytesList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BytesList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BytesList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BytesList_descriptor_;
}

const BytesList& BytesList::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BytesList> BytesList_default_instance_;

BytesList* BytesList::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BytesList>(arena);
}

void BytesList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BytesList)
  value_.Clear();
}

bool BytesList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.BytesList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes value = 1;
      case 1: {
        if (tag == 10) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.BytesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.BytesList)
  return false;
#undef DO_
}

void BytesList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.BytesList)
  // repeated bytes value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.BytesList)
}

::google::protobuf::uint8* BytesList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BytesList)
  // repeated bytes value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BytesList)
  return target;
}

size_t BytesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BytesList)
  size_t total_size = 0;

  // repeated bytes value = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->value_size());
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BytesList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.BytesList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BytesList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BytesList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.BytesList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.BytesList)
    UnsafeMergeFrom(*source);
  }
}

void BytesList::MergeFrom(const BytesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BytesList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BytesList::UnsafeMergeFrom(const BytesList& from) {
  GOOGLE_DCHECK(&from != this);
  value_.UnsafeMergeFrom(from.value_);
}

void BytesList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.BytesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BytesList::CopyFrom(const BytesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BytesList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BytesList::IsInitialized() const {

  return true;
}

void BytesList::Swap(BytesList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BytesList temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BytesList::UnsafeArenaSwap(BytesList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BytesList::InternalSwap(BytesList* other) {
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BytesList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BytesList_descriptor_;
  metadata.reflection = BytesList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BytesList

// repeated bytes value = 1;
int BytesList::value_size() const {
  return value_.size();
}
void BytesList::clear_value() {
  value_.Clear();
}
const ::std::string& BytesList::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.BytesList.value)
  return value_.Get(index);
}
::std::string* BytesList::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.BytesList.value)
  return value_.Mutable(index);
}
void BytesList::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.BytesList.value)
  value_.Mutable(index)->assign(value);
}
void BytesList::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.BytesList.value)
}
void BytesList::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.BytesList.value)
}
::std::string* BytesList::add_value() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.BytesList.value)
  return value_.Add();
}
void BytesList::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.BytesList.value)
}
void BytesList::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.BytesList.value)
}
void BytesList::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.BytesList.value)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BytesList::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.BytesList.value)
  return value_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BytesList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.BytesList.value)
  return &value_;
}

inline const BytesList* BytesList::internal_default_instance() {
  return &BytesList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatList::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatList::FloatList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.FloatList)
}
FloatList::FloatList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  value_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.FloatList)
}

void FloatList::InitAsDefaultInstance() {
}

FloatList::FloatList(const FloatList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.FloatList)
}

void FloatList::SharedCtor() {
  _cached_size_ = 0;
}

FloatList::~FloatList() {
  // @@protoc_insertion_point(destructor:tensorflow.FloatList)
  SharedDtor();
}

void FloatList::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void FloatList::ArenaDtor(void* object) {
  FloatList* _this = reinterpret_cast< FloatList* >(object);
  (void)_this;
}
void FloatList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FloatList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatList_descriptor_;
}

const FloatList& FloatList::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FloatList> FloatList_default_instance_;

FloatList* FloatList::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<FloatList>(arena);
}

void FloatList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.FloatList)
  value_.Clear();
}

bool FloatList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.FloatList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.FloatList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.FloatList)
  return false;
#undef DO_
}

void FloatList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.FloatList)
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.FloatList)
}

::google::protobuf::uint8* FloatList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.FloatList)
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.FloatList)
  return target;
}

size_t FloatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.FloatList)
  size_t total_size = 0;

  // repeated float value = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->value_size();
    data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.FloatList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FloatList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.FloatList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.FloatList)
    UnsafeMergeFrom(*source);
  }
}

void FloatList::MergeFrom(const FloatList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.FloatList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FloatList::UnsafeMergeFrom(const FloatList& from) {
  GOOGLE_DCHECK(&from != this);
  value_.UnsafeMergeFrom(from.value_);
}

void FloatList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.FloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatList::CopyFrom(const FloatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.FloatList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FloatList::IsInitialized() const {

  return true;
}

void FloatList::Swap(FloatList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FloatList temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void FloatList::UnsafeArenaSwap(FloatList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FloatList::InternalSwap(FloatList* other) {
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FloatList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatList_descriptor_;
  metadata.reflection = FloatList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FloatList

// repeated float value = 1 [packed = true];
int FloatList::value_size() const {
  return value_.size();
}
void FloatList::clear_value() {
  value_.Clear();
}
float FloatList::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.FloatList.value)
  return value_.Get(index);
}
void FloatList::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.FloatList.value)
}
void FloatList::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.FloatList.value)
}
const ::google::protobuf::RepeatedField< float >&
FloatList::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.FloatList.value)
  return value_;
}
::google::protobuf::RepeatedField< float >*
FloatList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.FloatList.value)
  return &value_;
}

inline const FloatList* FloatList::internal_default_instance() {
  return &FloatList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int64List::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int64List::Int64List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.Int64List)
}
Int64List::Int64List(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  value_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.Int64List)
}

void Int64List::InitAsDefaultInstance() {
}

Int64List::Int64List(const Int64List& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.Int64List)
}

void Int64List::SharedCtor() {
  _cached_size_ = 0;
}

Int64List::~Int64List() {
  // @@protoc_insertion_point(destructor:tensorflow.Int64List)
  SharedDtor();
}

void Int64List::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Int64List::ArenaDtor(void* object) {
  Int64List* _this = reinterpret_cast< Int64List* >(object);
  (void)_this;
}
void Int64List::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Int64List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int64List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Int64List_descriptor_;
}

const Int64List& Int64List::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Int64List> Int64List_default_instance_;

Int64List* Int64List::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Int64List>(arena);
}

void Int64List::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.Int64List)
  value_.Clear();
}

bool Int64List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.Int64List)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 value = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_value())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.Int64List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.Int64List)
  return false;
#undef DO_
}

void Int64List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.Int64List)
  // repeated int64 value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.Int64List)
}

::google::protobuf::uint8* Int64List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Int64List)
  // repeated int64 value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Int64List)
  return target;
}

size_t Int64List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.Int64List)
  size_t total_size = 0;

  // repeated int64 value = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = this->value_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int64List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.Int64List)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Int64List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Int64List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.Int64List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.Int64List)
    UnsafeMergeFrom(*source);
  }
}

void Int64List::MergeFrom(const Int64List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.Int64List)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Int64List::UnsafeMergeFrom(const Int64List& from) {
  GOOGLE_DCHECK(&from != this);
  value_.UnsafeMergeFrom(from.value_);
}

void Int64List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.Int64List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int64List::CopyFrom(const Int64List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.Int64List)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Int64List::IsInitialized() const {

  return true;
}

void Int64List::Swap(Int64List* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Int64List temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Int64List::UnsafeArenaSwap(Int64List* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Int64List::InternalSwap(Int64List* other) {
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Int64List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Int64List_descriptor_;
  metadata.reflection = Int64List_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Int64List

// repeated int64 value = 1 [packed = true];
int Int64List::value_size() const {
  return value_.size();
}
void Int64List::clear_value() {
  value_.Clear();
}
::google::protobuf::int64 Int64List::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.Int64List.value)
  return value_.Get(index);
}
void Int64List::set_value(int index, ::google::protobuf::int64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.Int64List.value)
}
void Int64List::add_value(::google::protobuf::int64 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.Int64List.value)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Int64List::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.Int64List.value)
  return value_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Int64List::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.Int64List.value)
  return &value_;
}

inline const Int64List* Int64List::internal_default_instance() {
  return &Int64List_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feature::kBytesListFieldNumber;
const int Feature::kFloatListFieldNumber;
const int Feature::kInt64ListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feature::Feature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.Feature)
}
Feature::Feature(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.Feature)
}

void Feature::InitAsDefaultInstance() {
  Feature_default_oneof_instance_->bytes_list_ = const_cast< ::tensorflow::BytesList*>(
      ::tensorflow::BytesList::internal_default_instance());
  Feature_default_oneof_instance_->float_list_ = const_cast< ::tensorflow::FloatList*>(
      ::tensorflow::FloatList::internal_default_instance());
  Feature_default_oneof_instance_->int64_list_ = const_cast< ::tensorflow::Int64List*>(
      ::tensorflow::Int64List::internal_default_instance());
}

Feature::Feature(const Feature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.Feature)
}

void Feature::SharedCtor() {
  clear_has_kind();
  _cached_size_ = 0;
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:tensorflow.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (has_kind()) {
    clear_kind();
  }
}

void Feature::ArenaDtor(void* object) {
  Feature* _this = reinterpret_cast< Feature* >(object);
  (void)_this;
}
void Feature::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Feature_descriptor_;
}

const Feature& Feature::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Feature> Feature_default_instance_;

Feature* Feature::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Feature>(arena);
}

void Feature::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.Feature)
  switch (kind_case()) {
    case kBytesList: {
      if (GetArenaNoVirtual() == NULL) {
        delete kind_.bytes_list_;
      }
      break;
    }
    case kFloatList: {
      if (GetArenaNoVirtual() == NULL) {
        delete kind_.float_list_;
      }
      break;
    }
    case kInt64List: {
      if (GetArenaNoVirtual() == NULL) {
        delete kind_.int64_list_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.Feature)
  clear_kind();
}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.BytesList bytes_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bytes_list()));
        } else {
          goto handle_unusual;
        }
        goto after_int64_list;
        break;
      }

      // optional .tensorflow.FloatList float_list = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_float_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_int64_list;
        break;
      }

      // optional .tensorflow.Int64List int64_list = 3;
      case 3: {
        if (tag == 26) {
         parse_int64_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int64_list()));
        } else {
          goto handle_unusual;
        }
       after_int64_list:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.Feature)
  return false;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.Feature)
  // optional .tensorflow.BytesList bytes_list = 1;
  if (has_bytes_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *kind_.bytes_list_, output);
  }

  // optional .tensorflow.FloatList float_list = 2;
  if (has_float_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *kind_.float_list_, output);
  }

  // optional .tensorflow.Int64List int64_list = 3;
  if (has_int64_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *kind_.int64_list_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.Feature)
}

::google::protobuf::uint8* Feature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Feature)
  // optional .tensorflow.BytesList bytes_list = 1;
  if (has_bytes_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *kind_.bytes_list_, false, target);
  }

  // optional .tensorflow.FloatList float_list = 2;
  if (has_float_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *kind_.float_list_, false, target);
  }

  // optional .tensorflow.Int64List int64_list = 3;
  if (has_int64_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *kind_.int64_list_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.Feature)
  size_t total_size = 0;

  switch (kind_case()) {
    // optional .tensorflow.BytesList bytes_list = 1;
    case kBytesList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *kind_.bytes_list_);
      break;
    }
    // optional .tensorflow.FloatList float_list = 2;
    case kFloatList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *kind_.float_list_);
      break;
    }
    // optional .tensorflow.Int64List int64_list = 3;
    case kInt64List: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *kind_.int64_list_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.Feature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Feature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Feature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.Feature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.Feature)
    UnsafeMergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.Feature)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Feature::UnsafeMergeFrom(const Feature& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.kind_case()) {
    case kBytesList: {
      mutable_bytes_list()->::tensorflow::BytesList::MergeFrom(from.bytes_list());
      break;
    }
    case kFloatList: {
      mutable_float_list()->::tensorflow::FloatList::MergeFrom(from.float_list());
      break;
    }
    case kInt64List: {
      mutable_int64_list()->::tensorflow::Int64List::MergeFrom(from.int64_list());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void Feature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.Feature)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Feature::IsInitialized() const {

  return true;
}

void Feature::Swap(Feature* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Feature temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Feature::UnsafeArenaSwap(Feature* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Feature::InternalSwap(Feature* other) {
  std::swap(kind_, other->kind_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Feature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Feature_descriptor_;
  metadata.reflection = Feature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feature

// optional .tensorflow.BytesList bytes_list = 1;
bool Feature::has_bytes_list() const {
  return kind_case() == kBytesList;
}
void Feature::set_has_bytes_list() {
  _oneof_case_[0] = kBytesList;
}
void Feature::clear_bytes_list() {
  if (has_bytes_list()) {
    if (GetArenaNoVirtual() == NULL) {
      delete kind_.bytes_list_;
    }
    clear_has_kind();
  }
}
 const ::tensorflow::BytesList& Feature::bytes_list() const {
  // @@protoc_insertion_point(field_get:tensorflow.Feature.bytes_list)
  return has_bytes_list()
      ? *kind_.bytes_list_
      : ::tensorflow::BytesList::default_instance();
}
::tensorflow::BytesList* Feature::mutable_bytes_list() {
  if (!has_bytes_list()) {
    clear_kind();
    set_has_bytes_list();
    kind_.bytes_list_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::BytesList >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.Feature.bytes_list)
  return kind_.bytes_list_;
}
::tensorflow::BytesList* Feature::release_bytes_list() {
  // @@protoc_insertion_point(field_release:tensorflow.Feature.bytes_list)
  if (has_bytes_list()) {
    clear_has_kind();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::BytesList* temp = new ::tensorflow::BytesList(*kind_.bytes_list_);
      kind_.bytes_list_ = NULL;
      return temp;
    } else {
      ::tensorflow::BytesList* temp = kind_.bytes_list_;
      kind_.bytes_list_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Feature::set_allocated_bytes_list(::tensorflow::BytesList* bytes_list) {
  clear_kind();
  if (bytes_list) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(bytes_list) == NULL) {
      GetArenaNoVirtual()->Own(bytes_list);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(bytes_list)) {
      ::tensorflow::BytesList* new_bytes_list = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::BytesList >(
          GetArenaNoVirtual());
      new_bytes_list->CopyFrom(*bytes_list);
      bytes_list = new_bytes_list;
    }
    set_has_bytes_list();
    kind_.bytes_list_ = bytes_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Feature.bytes_list)
}
 ::tensorflow::BytesList* Feature::unsafe_arena_release_bytes_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.Feature.bytes_list)
  if (has_bytes_list()) {
    clear_has_kind();
    ::tensorflow::BytesList* temp = kind_.bytes_list_;
    kind_.bytes_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Feature::unsafe_arena_set_allocated_bytes_list(::tensorflow::BytesList* bytes_list) {
  clear_kind();
  if (bytes_list) {
    set_has_bytes_list();
    kind_.bytes_list_ = bytes_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.Feature.bytes_list)
}

// optional .tensorflow.FloatList float_list = 2;
bool Feature::has_float_list() const {
  return kind_case() == kFloatList;
}
void Feature::set_has_float_list() {
  _oneof_case_[0] = kFloatList;
}
void Feature::clear_float_list() {
  if (has_float_list()) {
    if (GetArenaNoVirtual() == NULL) {
      delete kind_.float_list_;
    }
    clear_has_kind();
  }
}
 const ::tensorflow::FloatList& Feature::float_list() const {
  // @@protoc_insertion_point(field_get:tensorflow.Feature.float_list)
  return has_float_list()
      ? *kind_.float_list_
      : ::tensorflow::FloatList::default_instance();
}
::tensorflow::FloatList* Feature::mutable_float_list() {
  if (!has_float_list()) {
    clear_kind();
    set_has_float_list();
    kind_.float_list_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::FloatList >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.Feature.float_list)
  return kind_.float_list_;
}
::tensorflow::FloatList* Feature::release_float_list() {
  // @@protoc_insertion_point(field_release:tensorflow.Feature.float_list)
  if (has_float_list()) {
    clear_has_kind();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::FloatList* temp = new ::tensorflow::FloatList(*kind_.float_list_);
      kind_.float_list_ = NULL;
      return temp;
    } else {
      ::tensorflow::FloatList* temp = kind_.float_list_;
      kind_.float_list_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Feature::set_allocated_float_list(::tensorflow::FloatList* float_list) {
  clear_kind();
  if (float_list) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(float_list) == NULL) {
      GetArenaNoVirtual()->Own(float_list);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(float_list)) {
      ::tensorflow::FloatList* new_float_list = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::FloatList >(
          GetArenaNoVirtual());
      new_float_list->CopyFrom(*float_list);
      float_list = new_float_list;
    }
    set_has_float_list();
    kind_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Feature.float_list)
}
 ::tensorflow::FloatList* Feature::unsafe_arena_release_float_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.Feature.float_list)
  if (has_float_list()) {
    clear_has_kind();
    ::tensorflow::FloatList* temp = kind_.float_list_;
    kind_.float_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Feature::unsafe_arena_set_allocated_float_list(::tensorflow::FloatList* float_list) {
  clear_kind();
  if (float_list) {
    set_has_float_list();
    kind_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.Feature.float_list)
}

// optional .tensorflow.Int64List int64_list = 3;
bool Feature::has_int64_list() const {
  return kind_case() == kInt64List;
}
void Feature::set_has_int64_list() {
  _oneof_case_[0] = kInt64List;
}
void Feature::clear_int64_list() {
  if (has_int64_list()) {
    if (GetArenaNoVirtual() == NULL) {
      delete kind_.int64_list_;
    }
    clear_has_kind();
  }
}
 const ::tensorflow::Int64List& Feature::int64_list() const {
  // @@protoc_insertion_point(field_get:tensorflow.Feature.int64_list)
  return has_int64_list()
      ? *kind_.int64_list_
      : ::tensorflow::Int64List::default_instance();
}
::tensorflow::Int64List* Feature::mutable_int64_list() {
  if (!has_int64_list()) {
    clear_kind();
    set_has_int64_list();
    kind_.int64_list_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::Int64List >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.Feature.int64_list)
  return kind_.int64_list_;
}
::tensorflow::Int64List* Feature::release_int64_list() {
  // @@protoc_insertion_point(field_release:tensorflow.Feature.int64_list)
  if (has_int64_list()) {
    clear_has_kind();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::Int64List* temp = new ::tensorflow::Int64List(*kind_.int64_list_);
      kind_.int64_list_ = NULL;
      return temp;
    } else {
      ::tensorflow::Int64List* temp = kind_.int64_list_;
      kind_.int64_list_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Feature::set_allocated_int64_list(::tensorflow::Int64List* int64_list) {
  clear_kind();
  if (int64_list) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(int64_list) == NULL) {
      GetArenaNoVirtual()->Own(int64_list);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(int64_list)) {
      ::tensorflow::Int64List* new_int64_list = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::Int64List >(
          GetArenaNoVirtual());
      new_int64_list->CopyFrom(*int64_list);
      int64_list = new_int64_list;
    }
    set_has_int64_list();
    kind_.int64_list_ = int64_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Feature.int64_list)
}
 ::tensorflow::Int64List* Feature::unsafe_arena_release_int64_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.Feature.int64_list)
  if (has_int64_list()) {
    clear_has_kind();
    ::tensorflow::Int64List* temp = kind_.int64_list_;
    kind_.int64_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Feature::unsafe_arena_set_allocated_int64_list(::tensorflow::Int64List* int64_list) {
  clear_kind();
  if (int64_list) {
    set_has_int64_list();
    kind_.int64_list_ = int64_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.Feature.int64_list)
}

bool Feature::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
void Feature::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
Feature::KindCase Feature::kind_case() const {
  return Feature::KindCase(_oneof_case_[0]);
}
inline const Feature* Feature::internal_default_instance() {
  return &Feature_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Features::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Features::Features()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.Features)
}
Features::Features(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feature_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.Features)
}

void Features::InitAsDefaultInstance() {
}

Features::Features(const Features& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.Features)
}

void Features::SharedCtor() {
  feature_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  feature_.SetEntryDescriptor(
      &::tensorflow::Features_FeatureEntry_descriptor_);
  _cached_size_ = 0;
}

Features::~Features() {
  // @@protoc_insertion_point(destructor:tensorflow.Features)
  SharedDtor();
}

void Features::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Features::ArenaDtor(void* object) {
  Features* _this = reinterpret_cast< Features* >(object);
  (void)_this;
}
void Features::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Features::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Features_descriptor_;
}

const Features& Features::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Features> Features_default_instance_;

Features* Features::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Features>(arena);
}

void Features::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.Features)
  feature_.Clear();
}

bool Features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.Features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .tensorflow.Feature> feature = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_feature:
          Features_FeatureEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::Feature,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::Feature > > parser(&feature_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.Features.FeatureEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_feature;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.Features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.Features)
  return false;
#undef DO_
}

void Features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.Features)
  // map<string, .tensorflow.Feature> feature = 1;
  if (!this->feature().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::Feature >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.Features.FeatureEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->feature().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->feature().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::Feature >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::Feature >::const_iterator
          it = this->feature().begin();
          it != this->feature().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Features_FeatureEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feature_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Features_FeatureEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::Feature >::const_iterator
          it = this->feature().begin();
          it != this->feature().end(); ++it) {
        entry.reset(feature_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.Features)
}

::google::protobuf::uint8* Features::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Features)
  // map<string, .tensorflow.Feature> feature = 1;
  if (!this->feature().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::Feature >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.Features.FeatureEntry.key");
      }
    };

    if (deterministic &&
        this->feature().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->feature().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::Feature >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::Feature >::const_iterator
          it = this->feature().begin();
          it != this->feature().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Features_FeatureEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feature_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Features_FeatureEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::Feature >::const_iterator
          it = this->feature().begin();
          it != this->feature().end(); ++it) {
        entry.reset(feature_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Features)
  return target;
}

size_t Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.Features)
  size_t total_size = 0;

  // map<string, .tensorflow.Feature> feature = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->feature_size());
  {
    ::google::protobuf::scoped_ptr<Features_FeatureEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::Feature >::const_iterator
        it = this->feature().begin();
        it != this->feature().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(feature_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Features::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.Features)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Features* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Features>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.Features)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.Features)
    UnsafeMergeFrom(*source);
  }
}

void Features::MergeFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.Features)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Features::UnsafeMergeFrom(const Features& from) {
  GOOGLE_DCHECK(&from != this);
  feature_.MergeFrom(from.feature_);
}

void Features::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Features::CopyFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.Features)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Features::IsInitialized() const {

  return true;
}

void Features::Swap(Features* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Features temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Features::UnsafeArenaSwap(Features* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Features::InternalSwap(Features* other) {
  feature_.Swap(&other->feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Features::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Features_descriptor_;
  metadata.reflection = Features_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Features

// map<string, .tensorflow.Feature> feature = 1;
int Features::feature_size() const {
  return feature_.size();
}
void Features::clear_feature() {
  feature_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::Feature >&
Features::feature() const {
  // @@protoc_insertion_point(field_map:tensorflow.Features.feature)
  return feature_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::Feature >*
Features::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.Features.feature)
  return feature_.MutableMap();
}

inline const Features* Features::internal_default_instance() {
  return &Features_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureList::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureList::FeatureList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.FeatureList)
}
FeatureList::FeatureList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feature_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.FeatureList)
}

void FeatureList::InitAsDefaultInstance() {
}

FeatureList::FeatureList(const FeatureList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.FeatureList)
}

void FeatureList::SharedCtor() {
  _cached_size_ = 0;
}

FeatureList::~FeatureList() {
  // @@protoc_insertion_point(destructor:tensorflow.FeatureList)
  SharedDtor();
}

void FeatureList::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void FeatureList::ArenaDtor(void* object) {
  FeatureList* _this = reinterpret_cast< FeatureList* >(object);
  (void)_this;
}
void FeatureList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FeatureList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureList_descriptor_;
}

const FeatureList& FeatureList::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FeatureList> FeatureList_default_instance_;

FeatureList* FeatureList::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<FeatureList>(arena);
}

void FeatureList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.FeatureList)
  feature_.Clear();
}

bool FeatureList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.FeatureList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.Feature feature = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_feature;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.FeatureList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.FeatureList)
  return false;
#undef DO_
}

void FeatureList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.FeatureList)
  // repeated .tensorflow.Feature feature = 1;
  for (unsigned int i = 0, n = this->feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->feature(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.FeatureList)
}

::google::protobuf::uint8* FeatureList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.FeatureList)
  // repeated .tensorflow.Feature feature = 1;
  for (unsigned int i = 0, n = this->feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->feature(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.FeatureList)
  return target;
}

size_t FeatureList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.FeatureList)
  size_t total_size = 0;

  // repeated .tensorflow.Feature feature = 1;
  {
    unsigned int count = this->feature_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feature(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.FeatureList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeatureList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.FeatureList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.FeatureList)
    UnsafeMergeFrom(*source);
  }
}

void FeatureList::MergeFrom(const FeatureList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.FeatureList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FeatureList::UnsafeMergeFrom(const FeatureList& from) {
  GOOGLE_DCHECK(&from != this);
  feature_.MergeFrom(from.feature_);
}

void FeatureList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.FeatureList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureList::CopyFrom(const FeatureList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.FeatureList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FeatureList::IsInitialized() const {

  return true;
}

void FeatureList::Swap(FeatureList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FeatureList temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void FeatureList::UnsafeArenaSwap(FeatureList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FeatureList::InternalSwap(FeatureList* other) {
  feature_.UnsafeArenaSwap(&other->feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureList_descriptor_;
  metadata.reflection = FeatureList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureList

// repeated .tensorflow.Feature feature = 1;
int FeatureList::feature_size() const {
  return feature_.size();
}
void FeatureList::clear_feature() {
  feature_.Clear();
}
const ::tensorflow::Feature& FeatureList::feature(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.FeatureList.feature)
  return feature_.Get(index);
}
::tensorflow::Feature* FeatureList::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.FeatureList.feature)
  return feature_.Mutable(index);
}
::tensorflow::Feature* FeatureList::add_feature() {
  // @@protoc_insertion_point(field_add:tensorflow.FeatureList.feature)
  return feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::Feature >*
FeatureList::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.FeatureList.feature)
  return &feature_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::Feature >&
FeatureList::feature() const {
  // @@protoc_insertion_point(field_list:tensorflow.FeatureList.feature)
  return feature_;
}

inline const FeatureList* FeatureList::internal_default_instance() {
  return &FeatureList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureLists::kFeatureListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureLists::FeatureLists()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.FeatureLists)
}
FeatureLists::FeatureLists(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  feature_list_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.FeatureLists)
}

void FeatureLists::InitAsDefaultInstance() {
}

FeatureLists::FeatureLists(const FeatureLists& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.FeatureLists)
}

void FeatureLists::SharedCtor() {
  feature_list_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  feature_list_.SetEntryDescriptor(
      &::tensorflow::FeatureLists_FeatureListEntry_descriptor_);
  _cached_size_ = 0;
}

FeatureLists::~FeatureLists() {
  // @@protoc_insertion_point(destructor:tensorflow.FeatureLists)
  SharedDtor();
}

void FeatureLists::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void FeatureLists::ArenaDtor(void* object) {
  FeatureLists* _this = reinterpret_cast< FeatureLists* >(object);
  (void)_this;
}
void FeatureLists::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FeatureLists::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureLists::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureLists_descriptor_;
}

const FeatureLists& FeatureLists::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fexample_2ffeature_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FeatureLists> FeatureLists_default_instance_;

FeatureLists* FeatureLists::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<FeatureLists>(arena);
}

void FeatureLists::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.FeatureLists)
  feature_list_.Clear();
}

bool FeatureLists::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.FeatureLists)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .tensorflow.FeatureList> feature_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_feature_list:
          FeatureLists_FeatureListEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::FeatureList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureList > > parser(&feature_list_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.FeatureLists.FeatureListEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_feature_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.FeatureLists)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.FeatureLists)
  return false;
#undef DO_
}

void FeatureLists::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.FeatureLists)
  // map<string, .tensorflow.FeatureList> feature_list = 1;
  if (!this->feature_list().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.FeatureLists.FeatureListEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->feature_list().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->feature_list().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::FeatureList >::const_iterator
          it = this->feature_list().begin();
          it != this->feature_list().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FeatureLists_FeatureListEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feature_list_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FeatureLists_FeatureListEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::FeatureList >::const_iterator
          it = this->feature_list().begin();
          it != this->feature_list().end(); ++it) {
        entry.reset(feature_list_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.FeatureLists)
}

::google::protobuf::uint8* FeatureLists::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.FeatureLists)
  // map<string, .tensorflow.FeatureList> feature_list = 1;
  if (!this->feature_list().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.FeatureLists.FeatureListEntry.key");
      }
    };

    if (deterministic &&
        this->feature_list().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->feature_list().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::FeatureList >::const_iterator
          it = this->feature_list().begin();
          it != this->feature_list().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FeatureLists_FeatureListEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(feature_list_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FeatureLists_FeatureListEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::FeatureList >::const_iterator
          it = this->feature_list().begin();
          it != this->feature_list().end(); ++it) {
        entry.reset(feature_list_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.FeatureLists)
  return target;
}

size_t FeatureLists::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.FeatureLists)
  size_t total_size = 0;

  // map<string, .tensorflow.FeatureList> feature_list = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->feature_list_size());
  {
    ::google::protobuf::scoped_ptr<FeatureLists_FeatureListEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::FeatureList >::const_iterator
        it = this->feature_list().begin();
        it != this->feature_list().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(feature_list_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureLists::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.FeatureLists)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeatureLists* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureLists>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.FeatureLists)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.FeatureLists)
    UnsafeMergeFrom(*source);
  }
}

void FeatureLists::MergeFrom(const FeatureLists& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.FeatureLists)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FeatureLists::UnsafeMergeFrom(const FeatureLists& from) {
  GOOGLE_DCHECK(&from != this);
  feature_list_.MergeFrom(from.feature_list_);
}

void FeatureLists::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.FeatureLists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureLists::CopyFrom(const FeatureLists& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.FeatureLists)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FeatureLists::IsInitialized() const {

  return true;
}

void FeatureLists::Swap(FeatureLists* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FeatureLists temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void FeatureLists::UnsafeArenaSwap(FeatureLists* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FeatureLists::InternalSwap(FeatureLists* other) {
  feature_list_.Swap(&other->feature_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureLists::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureLists_descriptor_;
  metadata.reflection = FeatureLists_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureLists

// map<string, .tensorflow.FeatureList> feature_list = 1;
int FeatureLists::feature_list_size() const {
  return feature_list_.size();
}
void FeatureLists::clear_feature_list() {
  feature_list_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureList >&
FeatureLists::feature_list() const {
  // @@protoc_insertion_point(field_map:tensorflow.FeatureLists.feature_list)
  return feature_list_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::FeatureList >*
FeatureLists::mutable_feature_list() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.FeatureLists.feature_list)
  return feature_list_.MutableMap();
}

inline const FeatureLists* FeatureLists::internal_default_instance() {
  return &FeatureLists_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
