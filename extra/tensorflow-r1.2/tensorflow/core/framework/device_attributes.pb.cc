// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/device_attributes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/framework/device_attributes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* DeviceLocality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceLocality_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceAttributes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/framework/device_attributes.proto");
  GOOGLE_CHECK(file != NULL);
  DeviceLocality_descriptor_ = file->message_type(0);
  static const int DeviceLocality_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocality, bus_id_),
  };
  DeviceLocality_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceLocality_descriptor_,
      DeviceLocality::internal_default_instance(),
      DeviceLocality_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeviceLocality),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLocality, _internal_metadata_));
  DeviceAttributes_descriptor_ = file->message_type(1);
  static const int DeviceAttributes_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttributes, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttributes, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttributes, memory_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttributes, locality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttributes, incarnation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttributes, physical_device_desc_),
  };
  DeviceAttributes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceAttributes_descriptor_,
      DeviceAttributes::internal_default_instance(),
      DeviceAttributes_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeviceAttributes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttributes, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceLocality_descriptor_, DeviceLocality::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceAttributes_descriptor_, DeviceAttributes::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto() {
  DeviceLocality_default_instance_.Shutdown();
  delete DeviceLocality_reflection_;
  DeviceAttributes_default_instance_.Shutdown();
  delete DeviceAttributes_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  DeviceLocality_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeviceAttributes_default_instance_.DefaultConstruct();
  DeviceLocality_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeviceAttributes_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n1tensorflow/core/framework/device_attri"
    "butes.proto\022\ntensorflow\" \n\016DeviceLocalit"
    "y\022\016\n\006bus_id\030\001 \001(\005\"\254\001\n\020DeviceAttributes\022\014"
    "\n\004name\030\001 \001(\t\022\023\n\013device_type\030\002 \001(\t\022\024\n\014mem"
    "ory_limit\030\004 \001(\003\022,\n\010locality\030\005 \001(\0132\032.tens"
    "orflow.DeviceLocality\022\023\n\013incarnation\030\006 \001"
    "(\006\022\034\n\024physical_device_desc\030\007 \001(\tB7\n\030org."
    "tensorflow.frameworkB\026DeviceAttributesPr"
    "otosP\001\370\001\001b\006proto3", 337);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/framework/device_attributes.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceLocality::kBusIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceLocality::DeviceLocality()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeviceLocality)
}
DeviceLocality::DeviceLocality(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeviceLocality)
}

void DeviceLocality::InitAsDefaultInstance() {
}

DeviceLocality::DeviceLocality(const DeviceLocality& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeviceLocality)
}

void DeviceLocality::SharedCtor() {
  bus_id_ = 0;
  _cached_size_ = 0;
}

DeviceLocality::~DeviceLocality() {
  // @@protoc_insertion_point(destructor:tensorflow.DeviceLocality)
  SharedDtor();
}

void DeviceLocality::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void DeviceLocality::ArenaDtor(void* object) {
  DeviceLocality* _this = reinterpret_cast< DeviceLocality* >(object);
  (void)_this;
}
void DeviceLocality::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeviceLocality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceLocality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceLocality_descriptor_;
}

const DeviceLocality& DeviceLocality::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeviceLocality> DeviceLocality_default_instance_;

DeviceLocality* DeviceLocality::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeviceLocality>(arena);
}

void DeviceLocality::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeviceLocality)
  bus_id_ = 0;
}

bool DeviceLocality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeviceLocality)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bus_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bus_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeviceLocality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeviceLocality)
  return false;
#undef DO_
}

void DeviceLocality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeviceLocality)
  // optional int32 bus_id = 1;
  if (this->bus_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bus_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.DeviceLocality)
}

::google::protobuf::uint8* DeviceLocality::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeviceLocality)
  // optional int32 bus_id = 1;
  if (this->bus_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bus_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeviceLocality)
  return target;
}

size_t DeviceLocality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeviceLocality)
  size_t total_size = 0;

  // optional int32 bus_id = 1;
  if (this->bus_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bus_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceLocality::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeviceLocality)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeviceLocality* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceLocality>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeviceLocality)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeviceLocality)
    UnsafeMergeFrom(*source);
  }
}

void DeviceLocality::MergeFrom(const DeviceLocality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeviceLocality)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeviceLocality::UnsafeMergeFrom(const DeviceLocality& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bus_id() != 0) {
    set_bus_id(from.bus_id());
  }
}

void DeviceLocality::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeviceLocality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceLocality::CopyFrom(const DeviceLocality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeviceLocality)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeviceLocality::IsInitialized() const {

  return true;
}

void DeviceLocality::Swap(DeviceLocality* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeviceLocality temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeviceLocality::UnsafeArenaSwap(DeviceLocality* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeviceLocality::InternalSwap(DeviceLocality* other) {
  std::swap(bus_id_, other->bus_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceLocality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceLocality_descriptor_;
  metadata.reflection = DeviceLocality_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceLocality

// optional int32 bus_id = 1;
void DeviceLocality::clear_bus_id() {
  bus_id_ = 0;
}
::google::protobuf::int32 DeviceLocality::bus_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceLocality.bus_id)
  return bus_id_;
}
void DeviceLocality::set_bus_id(::google::protobuf::int32 value) {
  
  bus_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceLocality.bus_id)
}

inline const DeviceLocality* DeviceLocality::internal_default_instance() {
  return &DeviceLocality_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void DeviceAttributes::_slow_mutable_locality() {
  locality_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
      GetArenaNoVirtual());
}
::tensorflow::DeviceLocality* DeviceAttributes::_slow_release_locality() {
  if (locality_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::DeviceLocality* temp = new ::tensorflow::DeviceLocality(*locality_);
    locality_ = NULL;
    return temp;
  }
}
::tensorflow::DeviceLocality* DeviceAttributes::unsafe_arena_release_locality() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeviceAttributes.locality)
  
  ::tensorflow::DeviceLocality* temp = locality_;
  locality_ = NULL;
  return temp;
}
void DeviceAttributes::_slow_set_allocated_locality(
    ::google::protobuf::Arena* message_arena, ::tensorflow::DeviceLocality** locality) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*locality) == NULL) {
      message_arena->Own(*locality);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*locality)) {
      ::tensorflow::DeviceLocality* new_locality = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceLocality >(
            message_arena);
      new_locality->CopyFrom(**locality);
      *locality = new_locality;
    }
}
void DeviceAttributes::unsafe_arena_set_allocated_locality(
    ::tensorflow::DeviceLocality* locality) {
  if (GetArenaNoVirtual() == NULL) {
    delete locality_;
  }
  locality_ = locality;
  if (locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeviceAttributes.locality)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAttributes::kNameFieldNumber;
const int DeviceAttributes::kDeviceTypeFieldNumber;
const int DeviceAttributes::kMemoryLimitFieldNumber;
const int DeviceAttributes::kLocalityFieldNumber;
const int DeviceAttributes::kIncarnationFieldNumber;
const int DeviceAttributes::kPhysicalDeviceDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAttributes::DeviceAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeviceAttributes)
}
DeviceAttributes::DeviceAttributes(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeviceAttributes)
}

void DeviceAttributes::InitAsDefaultInstance() {
  locality_ = const_cast< ::tensorflow::DeviceLocality*>(
      ::tensorflow::DeviceLocality::internal_default_instance());
}

DeviceAttributes::DeviceAttributes(const DeviceAttributes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeviceAttributes)
}

void DeviceAttributes::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_device_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locality_ = NULL;
  ::memset(&memory_limit_, 0, reinterpret_cast<char*>(&incarnation_) -
    reinterpret_cast<char*>(&memory_limit_) + sizeof(incarnation_));
  _cached_size_ = 0;
}

DeviceAttributes::~DeviceAttributes() {
  // @@protoc_insertion_point(destructor:tensorflow.DeviceAttributes)
  SharedDtor();
}

void DeviceAttributes::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  device_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  physical_device_desc_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &DeviceAttributes_default_instance_.get()) {
    delete locality_;
  }
}

void DeviceAttributes::ArenaDtor(void* object) {
  DeviceAttributes* _this = reinterpret_cast< DeviceAttributes* >(object);
  (void)_this;
}
void DeviceAttributes::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeviceAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceAttributes_descriptor_;
}

const DeviceAttributes& DeviceAttributes::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeviceAttributes> DeviceAttributes_default_instance_;

DeviceAttributes* DeviceAttributes::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeviceAttributes>(arena);
}

void DeviceAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeviceAttributes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeviceAttributes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeviceAttributes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(memory_limit_, incarnation_);
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && locality_ != NULL) delete locality_;
  locality_ = NULL;
  physical_device_desc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool DeviceAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeviceAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeviceAttributes.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device_type;
        break;
      }

      // optional string device_type = 2;
      case 2: {
        if (tag == 18) {
         parse_device_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_type().data(), this->device_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeviceAttributes.device_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_memory_limit;
        break;
      }

      // optional int64 memory_limit = 4;
      case 4: {
        if (tag == 32) {
         parse_memory_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memory_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_locality;
        break;
      }

      // optional .tensorflow.DeviceLocality locality = 5;
      case 5: {
        if (tag == 42) {
         parse_locality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locality()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_incarnation;
        break;
      }

      // optional fixed64 incarnation = 6;
      case 6: {
        if (tag == 49) {
         parse_incarnation:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &incarnation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_physical_device_desc;
        break;
      }

      // optional string physical_device_desc = 7;
      case 7: {
        if (tag == 58) {
         parse_physical_device_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_physical_device_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->physical_device_desc().data(), this->physical_device_desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeviceAttributes.physical_device_desc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeviceAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeviceAttributes)
  return false;
#undef DO_
}

void DeviceAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeviceAttributes)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceAttributes.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string device_type = 2;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceAttributes.device_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_type(), output);
  }

  // optional int64 memory_limit = 4;
  if (this->memory_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->memory_limit(), output);
  }

  // optional .tensorflow.DeviceLocality locality = 5;
  if (this->has_locality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->locality_, output);
  }

  // optional fixed64 incarnation = 6;
  if (this->incarnation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->incarnation(), output);
  }

  // optional string physical_device_desc = 7;
  if (this->physical_device_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->physical_device_desc().data(), this->physical_device_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceAttributes.physical_device_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->physical_device_desc(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.DeviceAttributes)
}

::google::protobuf::uint8* DeviceAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeviceAttributes)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceAttributes.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string device_type = 2;
  if (this->device_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceAttributes.device_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_type(), target);
  }

  // optional int64 memory_limit = 4;
  if (this->memory_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->memory_limit(), target);
  }

  // optional .tensorflow.DeviceLocality locality = 5;
  if (this->has_locality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->locality_, false, target);
  }

  // optional fixed64 incarnation = 6;
  if (this->incarnation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->incarnation(), target);
  }

  // optional string physical_device_desc = 7;
  if (this->physical_device_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->physical_device_desc().data(), this->physical_device_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceAttributes.physical_device_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->physical_device_desc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeviceAttributes)
  return target;
}

size_t DeviceAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeviceAttributes)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string device_type = 2;
  if (this->device_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_type());
  }

  // optional int64 memory_limit = 4;
  if (this->memory_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->memory_limit());
  }

  // optional .tensorflow.DeviceLocality locality = 5;
  if (this->has_locality()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->locality_);
  }

  // optional fixed64 incarnation = 6;
  if (this->incarnation() != 0) {
    total_size += 1 + 8;
  }

  // optional string physical_device_desc = 7;
  if (this->physical_device_desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->physical_device_desc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeviceAttributes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeviceAttributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeviceAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeviceAttributes)
    UnsafeMergeFrom(*source);
  }
}

void DeviceAttributes::MergeFrom(const DeviceAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeviceAttributes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeviceAttributes::UnsafeMergeFrom(const DeviceAttributes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.device_type().size() > 0) {
    set_device_type(from.device_type());
  }
  if (from.memory_limit() != 0) {
    set_memory_limit(from.memory_limit());
  }
  if (from.has_locality()) {
    mutable_locality()->::tensorflow::DeviceLocality::MergeFrom(from.locality());
  }
  if (from.incarnation() != 0) {
    set_incarnation(from.incarnation());
  }
  if (from.physical_device_desc().size() > 0) {
    set_physical_device_desc(from.physical_device_desc());
  }
}

void DeviceAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeviceAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceAttributes::CopyFrom(const DeviceAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeviceAttributes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeviceAttributes::IsInitialized() const {

  return true;
}

void DeviceAttributes::Swap(DeviceAttributes* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeviceAttributes temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeviceAttributes::UnsafeArenaSwap(DeviceAttributes* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeviceAttributes::InternalSwap(DeviceAttributes* other) {
  name_.Swap(&other->name_);
  device_type_.Swap(&other->device_type_);
  std::swap(memory_limit_, other->memory_limit_);
  std::swap(locality_, other->locality_);
  std::swap(incarnation_, other->incarnation_);
  physical_device_desc_.Swap(&other->physical_device_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceAttributes_descriptor_;
  metadata.reflection = DeviceAttributes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAttributes

// optional string name = 1;
void DeviceAttributes::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeviceAttributes::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceAttributes::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.name)
}
void DeviceAttributes::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeviceAttributes.name)
}
void DeviceAttributes::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeviceAttributes.name)
}
::std::string* DeviceAttributes::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceAttributes.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceAttributes::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceAttributes.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceAttributes::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeviceAttributes.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeviceAttributes::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceAttributes.name)
}
void DeviceAttributes::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeviceAttributes.name)
}

// optional string device_type = 2;
void DeviceAttributes::clear_device_type() {
  device_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeviceAttributes::device_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.device_type)
  return device_type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceAttributes::set_device_type(const ::std::string& value) {
  
  device_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.device_type)
}
void DeviceAttributes::set_device_type(const char* value) {
  
  device_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeviceAttributes.device_type)
}
void DeviceAttributes::set_device_type(const char* value,
    size_t size) {
  
  device_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeviceAttributes.device_type)
}
::std::string* DeviceAttributes::mutable_device_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceAttributes.device_type)
  return device_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceAttributes::release_device_type() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceAttributes.device_type)
  
  return device_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceAttributes::unsafe_arena_release_device_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeviceAttributes.device_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return device_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeviceAttributes::set_allocated_device_type(::std::string* device_type) {
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceAttributes.device_type)
}
void DeviceAttributes::unsafe_arena_set_allocated_device_type(
    ::std::string* device_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (device_type != NULL) {
    
  } else {
    
  }
  device_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      device_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeviceAttributes.device_type)
}

// optional int64 memory_limit = 4;
void DeviceAttributes::clear_memory_limit() {
  memory_limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DeviceAttributes::memory_limit() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.memory_limit)
  return memory_limit_;
}
void DeviceAttributes::set_memory_limit(::google::protobuf::int64 value) {
  
  memory_limit_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.memory_limit)
}

// optional .tensorflow.DeviceLocality locality = 5;
bool DeviceAttributes::has_locality() const {
  return this != internal_default_instance() && locality_ != NULL;
}
void DeviceAttributes::clear_locality() {
  if (GetArenaNoVirtual() == NULL && locality_ != NULL) delete locality_;
  locality_ = NULL;
}
const ::tensorflow::DeviceLocality& DeviceAttributes::locality() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.locality)
  return locality_ != NULL ? *locality_
                         : *::tensorflow::DeviceLocality::internal_default_instance();
}
::tensorflow::DeviceLocality* DeviceAttributes::mutable_locality() {
  
  if (locality_ == NULL) {
    _slow_mutable_locality();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceAttributes.locality)
  return locality_;
}
::tensorflow::DeviceLocality* DeviceAttributes::release_locality() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceAttributes.locality)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_locality();
  } else {
    ::tensorflow::DeviceLocality* temp = locality_;
    locality_ = NULL;
    return temp;
  }
}
 void DeviceAttributes::set_allocated_locality(::tensorflow::DeviceLocality* locality) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete locality_;
  }
  if (locality != NULL) {
    _slow_set_allocated_locality(message_arena, &locality);
  }
  locality_ = locality;
  if (locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceAttributes.locality)
}

// optional fixed64 incarnation = 6;
void DeviceAttributes::clear_incarnation() {
  incarnation_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DeviceAttributes::incarnation() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.incarnation)
  return incarnation_;
}
void DeviceAttributes::set_incarnation(::google::protobuf::uint64 value) {
  
  incarnation_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.incarnation)
}

// optional string physical_device_desc = 7;
void DeviceAttributes::clear_physical_device_desc() {
  physical_device_desc_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeviceAttributes::physical_device_desc() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.physical_device_desc)
  return physical_device_desc_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceAttributes::set_physical_device_desc(const ::std::string& value) {
  
  physical_device_desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.physical_device_desc)
}
void DeviceAttributes::set_physical_device_desc(const char* value) {
  
  physical_device_desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeviceAttributes.physical_device_desc)
}
void DeviceAttributes::set_physical_device_desc(const char* value,
    size_t size) {
  
  physical_device_desc_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeviceAttributes.physical_device_desc)
}
::std::string* DeviceAttributes::mutable_physical_device_desc() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceAttributes.physical_device_desc)
  return physical_device_desc_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceAttributes::release_physical_device_desc() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceAttributes.physical_device_desc)
  
  return physical_device_desc_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceAttributes::unsafe_arena_release_physical_device_desc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeviceAttributes.physical_device_desc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return physical_device_desc_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeviceAttributes::set_allocated_physical_device_desc(::std::string* physical_device_desc) {
  if (physical_device_desc != NULL) {
    
  } else {
    
  }
  physical_device_desc_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physical_device_desc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceAttributes.physical_device_desc)
}
void DeviceAttributes::unsafe_arena_set_allocated_physical_device_desc(
    ::std::string* physical_device_desc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (physical_device_desc != NULL) {
    
  } else {
    
  }
  physical_device_desc_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      physical_device_desc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeviceAttributes.physical_device_desc)
}

inline const DeviceAttributes* DeviceAttributes::internal_default_instance() {
  return &DeviceAttributes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
