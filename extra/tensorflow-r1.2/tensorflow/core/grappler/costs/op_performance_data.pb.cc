// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/grappler/costs/op_performance_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/grappler/costs/op_performance_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* OpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpInfo_AttrEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OpInfo_TensorProperties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpInfo_TensorProperties_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpPerformance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpPerformance_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpPerformance_OpMemory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpPerformance_OpMemory_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpPerformanceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpPerformanceList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/grappler/costs/op_performance_data.proto");
  GOOGLE_CHECK(file != NULL);
  OpInfo_descriptor_ = file->message_type(0);
  static const int OpInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, device_),
  };
  OpInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpInfo_descriptor_,
      OpInfo::internal_default_instance(),
      OpInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, _internal_metadata_));
  OpInfo_AttrEntry_descriptor_ = OpInfo_descriptor_->nested_type(0);
  OpInfo_TensorProperties_descriptor_ = OpInfo_descriptor_->nested_type(1);
  static const int OpInfo_TensorProperties_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo_TensorProperties, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo_TensorProperties, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo_TensorProperties, value_),
  };
  OpInfo_TensorProperties_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpInfo_TensorProperties_descriptor_,
      OpInfo_TensorProperties::internal_default_instance(),
      OpInfo_TensorProperties_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpInfo_TensorProperties),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo_TensorProperties, _internal_metadata_));
  OpPerformance_descriptor_ = file->message_type(1);
  static const int OpPerformance_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, temporary_memory_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, compute_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, compute_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, memory_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, compute_efficiency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, memory_efficiency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, op_memory_),
  };
  OpPerformance_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpPerformance_descriptor_,
      OpPerformance::internal_default_instance(),
      OpPerformance_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpPerformance),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, _internal_metadata_));
  OpPerformance_OpMemory_descriptor_ = OpPerformance_descriptor_->nested_type(0);
  static const int OpPerformance_OpMemory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance_OpMemory, output_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance_OpMemory, host_temp_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance_OpMemory, device_temp_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance_OpMemory, host_persistent_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance_OpMemory, device_persistent_memory_),
  };
  OpPerformance_OpMemory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpPerformance_OpMemory_descriptor_,
      OpPerformance_OpMemory::internal_default_instance(),
      OpPerformance_OpMemory_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpPerformance_OpMemory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance_OpMemory, _internal_metadata_));
  OpPerformanceList_descriptor_ = file->message_type(2);
  static const int OpPerformanceList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformanceList, op_performance_),
  };
  OpPerformanceList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpPerformanceList_descriptor_,
      OpPerformanceList::internal_default_instance(),
      OpPerformanceList_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpPerformanceList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformanceList, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpInfo_descriptor_, OpInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        OpInfo_AttrEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::AttrValue,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                OpInfo_AttrEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpInfo_TensorProperties_descriptor_, OpInfo_TensorProperties::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpPerformance_descriptor_, OpPerformance::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpPerformance_OpMemory_descriptor_, OpPerformance_OpMemory::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpPerformanceList_descriptor_, OpPerformanceList::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
  OpInfo_default_instance_.Shutdown();
  delete OpInfo_reflection_;
  OpInfo_TensorProperties_default_instance_.Shutdown();
  delete OpInfo_TensorProperties_reflection_;
  OpPerformance_default_instance_.Shutdown();
  delete OpPerformance_reflection_;
  OpPerformance_OpMemory_default_instance_.Shutdown();
  delete OpPerformance_OpMemory_reflection_;
  OpPerformanceList_default_instance_.Shutdown();
  delete OpPerformanceList_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto();
  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto();
  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  OpInfo_default_instance_.DefaultConstruct();
  OpInfo_TensorProperties_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OpPerformance_default_instance_.DefaultConstruct();
  OpPerformance_OpMemory_default_instance_.DefaultConstruct();
  OpPerformanceList_default_instance_.DefaultConstruct();
  OpInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  OpInfo_TensorProperties_default_instance_.get_mutable()->InitAsDefaultInstance();
  OpPerformance_default_instance_.get_mutable()->InitAsDefaultInstance();
  OpPerformance_OpMemory_default_instance_.get_mutable()->InitAsDefaultInstance();
  OpPerformanceList_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n8tensorflow/core/grappler/costs/op_perf"
    "ormance_data.proto\022\ntensorflow\032&tensorfl"
    "ow/core/framework/tensor.proto\032,tensorfl"
    "ow/core/framework/tensor_shape.proto\032%te"
    "nsorflow/core/framework/types.proto\032*ten"
    "sorflow/core/framework/attr_value.proto\032"
    "0tensorflow/core/protobuf/device_propert"
    "ies.proto\"\366\002\n\006OpInfo\022\n\n\002op\030\001 \001(\t\022*\n\004attr"
    "\030\002 \003(\0132\034.tensorflow.OpInfo.AttrEntry\0223\n\006"
    "inputs\030\003 \003(\0132#.tensorflow.OpInfo.TensorP"
    "roperties\022,\n\006device\030\004 \001(\0132\034.tensorflow.D"
    "eviceProperties\032B\n\tAttrEntry\022\013\n\003key\030\001 \001("
    "\t\022$\n\005value\030\002 \001(\0132\025.tensorflow.AttrValue:"
    "\0028\001\032\214\001\n\020TensorProperties\022#\n\005dtype\030\001 \001(\0162"
    "\024.tensorflow.DataType\022+\n\005shape\030\002 \001(\0132\034.t"
    "ensorflow.TensorShapeProto\022&\n\005value\030\003 \001("
    "\0132\027.tensorflow.TensorProto\"\247\003\n\rOpPerform"
    "ance\022\036\n\002op\030\001 \001(\0132\022.tensorflow.OpInfo\022\014\n\004"
    "node\030\005 \001(\t\022\035\n\025temporary_memory_size\030\002 \001("
    "\003\022\024\n\014compute_cost\030\003 \001(\003\022\024\n\014compute_time\030"
    "\006 \001(\003\022\023\n\013memory_time\030\007 \001(\003\022\032\n\022compute_ef"
    "ficiency\030\004 \001(\001\022\031\n\021memory_efficiency\030\010 \001("
    "\001\0225\n\top_memory\030\t \001(\0132\".tensorflow.OpPerf"
    "ormance.OpMemory\032\231\001\n\010OpMemory\022\025\n\routput_"
    "memory\030\001 \003(\003\022\030\n\020host_temp_memory\030\002 \001(\003\022\032"
    "\n\022device_temp_memory\030\003 \001(\003\022\036\n\026host_persi"
    "stent_memory\030\004 \001(\003\022 \n\030device_persistent_"
    "memory\030\005 \001(\003\"F\n\021OpPerformanceList\0221\n\016op_"
    "performance\030\001 \003(\0132\031.tensorflow.OpPerform"
    "anceB\003\370\001\001b\006proto3", 1177);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/grappler/costs/op_performance_data.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

void OpInfo_TensorProperties::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorShapeProto* OpInfo_TensorProperties::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorShapeProto* temp = new ::tensorflow::TensorShapeProto(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::tensorflow::TensorShapeProto* OpInfo_TensorProperties::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpInfo.TensorProperties.shape)
  
  ::tensorflow::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
void OpInfo_TensorProperties::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorShapeProto** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::tensorflow::TensorShapeProto* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void OpInfo_TensorProperties::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpInfo.TensorProperties.shape)
}
void OpInfo_TensorProperties::_slow_mutable_value() {
  value_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorProto* OpInfo_TensorProperties::_slow_release_value() {
  if (value_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorProto* temp = new ::tensorflow::TensorProto(*value_);
    value_ = NULL;
    return temp;
  }
}
::tensorflow::TensorProto* OpInfo_TensorProperties::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpInfo.TensorProperties.value)
  
  ::tensorflow::TensorProto* temp = value_;
  value_ = NULL;
  return temp;
}
void OpInfo_TensorProperties::_slow_set_allocated_value(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorProto** value) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*value) == NULL) {
      message_arena->Own(*value);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*value)) {
      ::tensorflow::TensorProto* new_value = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
            message_arena);
      new_value->CopyFrom(**value);
      *value = new_value;
    }
}
void OpInfo_TensorProperties::unsafe_arena_set_allocated_value(
    ::tensorflow::TensorProto* value) {
  if (GetArenaNoVirtual() == NULL) {
    delete value_;
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpInfo.TensorProperties.value)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpInfo_TensorProperties::kDtypeFieldNumber;
const int OpInfo_TensorProperties::kShapeFieldNumber;
const int OpInfo_TensorProperties::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpInfo_TensorProperties::OpInfo_TensorProperties()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpInfo.TensorProperties)
}
OpInfo_TensorProperties::OpInfo_TensorProperties(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpInfo.TensorProperties)
}

void OpInfo_TensorProperties::InitAsDefaultInstance() {
  shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
  value_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
}

OpInfo_TensorProperties::OpInfo_TensorProperties(const OpInfo_TensorProperties& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpInfo.TensorProperties)
}

void OpInfo_TensorProperties::SharedCtor() {
  shape_ = NULL;
  value_ = NULL;
  dtype_ = 0;
  _cached_size_ = 0;
}

OpInfo_TensorProperties::~OpInfo_TensorProperties() {
  // @@protoc_insertion_point(destructor:tensorflow.OpInfo.TensorProperties)
  SharedDtor();
}

void OpInfo_TensorProperties::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &OpInfo_TensorProperties_default_instance_.get()) {
    delete shape_;
    delete value_;
  }
}

void OpInfo_TensorProperties::ArenaDtor(void* object) {
  OpInfo_TensorProperties* _this = reinterpret_cast< OpInfo_TensorProperties* >(object);
  (void)_this;
}
void OpInfo_TensorProperties::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OpInfo_TensorProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpInfo_TensorProperties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpInfo_TensorProperties_descriptor_;
}

const OpInfo_TensorProperties& OpInfo_TensorProperties::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OpInfo_TensorProperties> OpInfo_TensorProperties_default_instance_;

OpInfo_TensorProperties* OpInfo_TensorProperties::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OpInfo_TensorProperties>(arena);
}

void OpInfo_TensorProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpInfo.TensorProperties)
  dtype_ = 0;
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool OpInfo_TensorProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.OpInfo.TensorProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.DataType dtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shape;
        break;
      }

      // optional .tensorflow.TensorShapeProto shape = 2;
      case 2: {
        if (tag == 18) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional .tensorflow.TensorProto value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.OpInfo.TensorProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.OpInfo.TensorProperties)
  return false;
#undef DO_
}

void OpInfo_TensorProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.OpInfo.TensorProperties)
  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // optional .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shape_, output);
  }

  // optional .tensorflow.TensorProto value = 3;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.OpInfo.TensorProperties)
}

::google::protobuf::uint8* OpInfo_TensorProperties::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpInfo.TensorProperties)
  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // optional .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shape_, false, target);
  }

  // optional .tensorflow.TensorProto value = 3;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->value_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpInfo.TensorProperties)
  return target;
}

size_t OpInfo_TensorProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpInfo.TensorProperties)
  size_t total_size = 0;

  // optional .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // optional .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  // optional .tensorflow.TensorProto value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpInfo_TensorProperties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpInfo.TensorProperties)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpInfo_TensorProperties* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpInfo_TensorProperties>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpInfo.TensorProperties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpInfo.TensorProperties)
    UnsafeMergeFrom(*source);
  }
}

void OpInfo_TensorProperties::MergeFrom(const OpInfo_TensorProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpInfo.TensorProperties)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OpInfo_TensorProperties::UnsafeMergeFrom(const OpInfo_TensorProperties& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
  if (from.has_shape()) {
    mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from.shape());
  }
  if (from.has_value()) {
    mutable_value()->::tensorflow::TensorProto::MergeFrom(from.value());
  }
}

void OpInfo_TensorProperties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpInfo.TensorProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpInfo_TensorProperties::CopyFrom(const OpInfo_TensorProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpInfo.TensorProperties)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OpInfo_TensorProperties::IsInitialized() const {

  return true;
}

void OpInfo_TensorProperties::Swap(OpInfo_TensorProperties* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OpInfo_TensorProperties temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void OpInfo_TensorProperties::UnsafeArenaSwap(OpInfo_TensorProperties* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OpInfo_TensorProperties::InternalSwap(OpInfo_TensorProperties* other) {
  std::swap(dtype_, other->dtype_);
  std::swap(shape_, other->shape_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpInfo_TensorProperties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpInfo_TensorProperties_descriptor_;
  metadata.reflection = OpInfo_TensorProperties_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

void OpInfo::_slow_mutable_device() {
  device_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceProperties >(
      GetArenaNoVirtual());
}
::tensorflow::DeviceProperties* OpInfo::_slow_release_device() {
  if (device_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::DeviceProperties* temp = new ::tensorflow::DeviceProperties(*device_);
    device_ = NULL;
    return temp;
  }
}
::tensorflow::DeviceProperties* OpInfo::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpInfo.device)
  
  ::tensorflow::DeviceProperties* temp = device_;
  device_ = NULL;
  return temp;
}
void OpInfo::_slow_set_allocated_device(
    ::google::protobuf::Arena* message_arena, ::tensorflow::DeviceProperties** device) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*device) == NULL) {
      message_arena->Own(*device);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*device)) {
      ::tensorflow::DeviceProperties* new_device = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceProperties >(
            message_arena);
      new_device->CopyFrom(**device);
      *device = new_device;
    }
}
void OpInfo::unsafe_arena_set_allocated_device(
    ::tensorflow::DeviceProperties* device) {
  if (GetArenaNoVirtual() == NULL) {
    delete device_;
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpInfo.device)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpInfo::kOpFieldNumber;
const int OpInfo::kAttrFieldNumber;
const int OpInfo::kInputsFieldNumber;
const int OpInfo::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpInfo::OpInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpInfo)
}
OpInfo::OpInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  attr_(arena),
  inputs_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpInfo)
}

void OpInfo::InitAsDefaultInstance() {
  device_ = const_cast< ::tensorflow::DeviceProperties*>(
      ::tensorflow::DeviceProperties::internal_default_instance());
}

OpInfo::OpInfo(const OpInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpInfo)
}

void OpInfo::SharedCtor() {
  attr_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  attr_.SetEntryDescriptor(
      &::tensorflow::OpInfo_AttrEntry_descriptor_);
  op_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = NULL;
  _cached_size_ = 0;
}

OpInfo::~OpInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.OpInfo)
  SharedDtor();
}

void OpInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  op_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &OpInfo_default_instance_.get()) {
    delete device_;
  }
}

void OpInfo::ArenaDtor(void* object) {
  OpInfo* _this = reinterpret_cast< OpInfo* >(object);
  (void)_this;
}
void OpInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpInfo_descriptor_;
}

const OpInfo& OpInfo::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OpInfo> OpInfo_default_instance_;

OpInfo* OpInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OpInfo>(arena);
}

void OpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpInfo)
  op_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && device_ != NULL) delete device_;
  device_ = NULL;
  attr_.Clear();
  inputs_.Clear();
}

bool OpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.OpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string op = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op().data(), this->op().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.OpInfo.op"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // map<string, .tensorflow.AttrValue> attr = 2;
      case 2: {
        if (tag == 18) {
         parse_attr:
          DO_(input->IncrementRecursionDepth());
         parse_loop_attr:
          OpInfo_AttrEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::AttrValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue > > parser(&attr_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.OpInfo.AttrEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_attr;
        if (input->ExpectTag(26)) goto parse_loop_inputs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.OpInfo.TensorProperties inputs = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_inputs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_device;
        break;
      }

      // optional .tensorflow.DeviceProperties device = 4;
      case 4: {
        if (tag == 34) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.OpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.OpInfo)
  return false;
#undef DO_
}

void OpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.OpInfo)
  // optional string op = 1;
  if (this->op().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op().data(), this->op().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.OpInfo.op");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->op(), output);
  }

  // map<string, .tensorflow.AttrValue> attr = 2;
  if (!this->attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.OpInfo.AttrEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attr().begin();
          it != this->attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<OpInfo_AttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<OpInfo_AttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attr().begin();
          it != this->attr().end(); ++it) {
        entry.reset(attr_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .tensorflow.OpInfo.TensorProperties inputs = 3;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->inputs(i), output);
  }

  // optional .tensorflow.DeviceProperties device = 4;
  if (this->has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->device_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.OpInfo)
}

::google::protobuf::uint8* OpInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpInfo)
  // optional string op = 1;
  if (this->op().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op().data(), this->op().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.OpInfo.op");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->op(), target);
  }

  // map<string, .tensorflow.AttrValue> attr = 2;
  if (!this->attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.OpInfo.AttrEntry.key");
      }
    };

    if (deterministic &&
        this->attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attr().begin();
          it != this->attr().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<OpInfo_AttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attr_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<OpInfo_AttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attr().begin();
          it != this->attr().end(); ++it) {
        entry.reset(attr_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .tensorflow.OpInfo.TensorProperties inputs = 3;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->inputs(i), false, target);
  }

  // optional .tensorflow.DeviceProperties device = 4;
  if (this->has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->device_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpInfo)
  return target;
}

size_t OpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpInfo)
  size_t total_size = 0;

  // optional string op = 1;
  if (this->op().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op());
  }

  // optional .tensorflow.DeviceProperties device = 4;
  if (this->has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->device_);
  }

  // map<string, .tensorflow.AttrValue> attr = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attr_size());
  {
    ::google::protobuf::scoped_ptr<OpInfo_AttrEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
        it = this->attr().begin();
        it != this->attr().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(attr_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // repeated .tensorflow.OpInfo.TensorProperties inputs = 3;
  {
    unsigned int count = this->inputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpInfo)
    UnsafeMergeFrom(*source);
  }
}

void OpInfo::MergeFrom(const OpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OpInfo::UnsafeMergeFrom(const OpInfo& from) {
  GOOGLE_DCHECK(&from != this);
  attr_.MergeFrom(from.attr_);
  inputs_.MergeFrom(from.inputs_);
  if (from.op().size() > 0) {
    set_op(from.op());
  }
  if (from.has_device()) {
    mutable_device()->::tensorflow::DeviceProperties::MergeFrom(from.device());
  }
}

void OpInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpInfo::CopyFrom(const OpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OpInfo::IsInitialized() const {

  return true;
}

void OpInfo::Swap(OpInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OpInfo temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void OpInfo::UnsafeArenaSwap(OpInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OpInfo::InternalSwap(OpInfo* other) {
  op_.Swap(&other->op_);
  attr_.Swap(&other->attr_);
  inputs_.UnsafeArenaSwap(&other->inputs_);
  std::swap(device_, other->device_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpInfo_descriptor_;
  metadata.reflection = OpInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpInfo_TensorProperties

// optional .tensorflow.DataType dtype = 1;
void OpInfo_TensorProperties::clear_dtype() {
  dtype_ = 0;
}
::tensorflow::DataType OpInfo_TensorProperties::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.TensorProperties.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
void OpInfo_TensorProperties::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpInfo.TensorProperties.dtype)
}

// optional .tensorflow.TensorShapeProto shape = 2;
bool OpInfo_TensorProperties::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void OpInfo_TensorProperties::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::tensorflow::TensorShapeProto& OpInfo_TensorProperties::shape() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.TensorProperties.shape)
  return shape_ != NULL ? *shape_
                         : *::tensorflow::TensorShapeProto::internal_default_instance();
}
::tensorflow::TensorShapeProto* OpInfo_TensorProperties::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpInfo.TensorProperties.shape)
  return shape_;
}
::tensorflow::TensorShapeProto* OpInfo_TensorProperties::release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.OpInfo.TensorProperties.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::tensorflow::TensorShapeProto* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void OpInfo_TensorProperties::set_allocated_shape(::tensorflow::TensorShapeProto* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpInfo.TensorProperties.shape)
}

// optional .tensorflow.TensorProto value = 3;
bool OpInfo_TensorProperties::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void OpInfo_TensorProperties::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::tensorflow::TensorProto& OpInfo_TensorProperties::value() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.TensorProperties.value)
  return value_ != NULL ? *value_
                         : *::tensorflow::TensorProto::internal_default_instance();
}
::tensorflow::TensorProto* OpInfo_TensorProperties::mutable_value() {
  
  if (value_ == NULL) {
    _slow_mutable_value();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpInfo.TensorProperties.value)
  return value_;
}
::tensorflow::TensorProto* OpInfo_TensorProperties::release_value() {
  // @@protoc_insertion_point(field_release:tensorflow.OpInfo.TensorProperties.value)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_value();
  } else {
    ::tensorflow::TensorProto* temp = value_;
    value_ = NULL;
    return temp;
  }
}
 void OpInfo_TensorProperties::set_allocated_value(::tensorflow::TensorProto* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value != NULL) {
    _slow_set_allocated_value(message_arena, &value);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpInfo.TensorProperties.value)
}

inline const OpInfo_TensorProperties* OpInfo_TensorProperties::internal_default_instance() {
  return &OpInfo_TensorProperties_default_instance_.get();
}
// -------------------------------------------------------------------

// OpInfo

// optional string op = 1;
void OpInfo::clear_op() {
  op_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& OpInfo::op() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.op)
  return op_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpInfo::set_op(const ::std::string& value) {
  
  op_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.OpInfo.op)
}
void OpInfo::set_op(const char* value) {
  
  op_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.OpInfo.op)
}
void OpInfo::set_op(const char* value,
    size_t size) {
  
  op_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.OpInfo.op)
}
::std::string* OpInfo::mutable_op() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.OpInfo.op)
  return op_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpInfo::release_op() {
  // @@protoc_insertion_point(field_release:tensorflow.OpInfo.op)
  
  return op_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpInfo::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpInfo.op)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return op_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void OpInfo::set_allocated_op(::std::string* op) {
  if (op != NULL) {
    
  } else {
    
  }
  op_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpInfo.op)
}
void OpInfo::unsafe_arena_set_allocated_op(
    ::std::string* op) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (op != NULL) {
    
  } else {
    
  }
  op_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      op, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpInfo.op)
}

// map<string, .tensorflow.AttrValue> attr = 2;
int OpInfo::attr_size() const {
  return attr_.size();
}
void OpInfo::clear_attr() {
  attr_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >&
OpInfo::attr() const {
  // @@protoc_insertion_point(field_map:tensorflow.OpInfo.attr)
  return attr_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >*
OpInfo::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.OpInfo.attr)
  return attr_.MutableMap();
}

// repeated .tensorflow.OpInfo.TensorProperties inputs = 3;
int OpInfo::inputs_size() const {
  return inputs_.size();
}
void OpInfo::clear_inputs() {
  inputs_.Clear();
}
const ::tensorflow::OpInfo_TensorProperties& OpInfo::inputs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.inputs)
  return inputs_.Get(index);
}
::tensorflow::OpInfo_TensorProperties* OpInfo::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.OpInfo.inputs)
  return inputs_.Mutable(index);
}
::tensorflow::OpInfo_TensorProperties* OpInfo::add_inputs() {
  // @@protoc_insertion_point(field_add:tensorflow.OpInfo.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::OpInfo_TensorProperties >*
OpInfo::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.OpInfo.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::OpInfo_TensorProperties >&
OpInfo::inputs() const {
  // @@protoc_insertion_point(field_list:tensorflow.OpInfo.inputs)
  return inputs_;
}

// optional .tensorflow.DeviceProperties device = 4;
bool OpInfo::has_device() const {
  return this != internal_default_instance() && device_ != NULL;
}
void OpInfo::clear_device() {
  if (GetArenaNoVirtual() == NULL && device_ != NULL) delete device_;
  device_ = NULL;
}
const ::tensorflow::DeviceProperties& OpInfo::device() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.device)
  return device_ != NULL ? *device_
                         : *::tensorflow::DeviceProperties::internal_default_instance();
}
::tensorflow::DeviceProperties* OpInfo::mutable_device() {
  
  if (device_ == NULL) {
    _slow_mutable_device();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpInfo.device)
  return device_;
}
::tensorflow::DeviceProperties* OpInfo::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.OpInfo.device)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_device();
  } else {
    ::tensorflow::DeviceProperties* temp = device_;
    device_ = NULL;
    return temp;
  }
}
 void OpInfo::set_allocated_device(::tensorflow::DeviceProperties* device) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_;
  }
  if (device != NULL) {
    _slow_set_allocated_device(message_arena, &device);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpInfo.device)
}

inline const OpInfo* OpInfo::internal_default_instance() {
  return &OpInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpPerformance_OpMemory::kOutputMemoryFieldNumber;
const int OpPerformance_OpMemory::kHostTempMemoryFieldNumber;
const int OpPerformance_OpMemory::kDeviceTempMemoryFieldNumber;
const int OpPerformance_OpMemory::kHostPersistentMemoryFieldNumber;
const int OpPerformance_OpMemory::kDevicePersistentMemoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpPerformance_OpMemory::OpPerformance_OpMemory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpPerformance.OpMemory)
}
OpPerformance_OpMemory::OpPerformance_OpMemory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  output_memory_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpPerformance.OpMemory)
}

void OpPerformance_OpMemory::InitAsDefaultInstance() {
}

OpPerformance_OpMemory::OpPerformance_OpMemory(const OpPerformance_OpMemory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpPerformance.OpMemory)
}

void OpPerformance_OpMemory::SharedCtor() {
  ::memset(&host_temp_memory_, 0, reinterpret_cast<char*>(&device_persistent_memory_) -
    reinterpret_cast<char*>(&host_temp_memory_) + sizeof(device_persistent_memory_));
  _cached_size_ = 0;
}

OpPerformance_OpMemory::~OpPerformance_OpMemory() {
  // @@protoc_insertion_point(destructor:tensorflow.OpPerformance.OpMemory)
  SharedDtor();
}

void OpPerformance_OpMemory::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void OpPerformance_OpMemory::ArenaDtor(void* object) {
  OpPerformance_OpMemory* _this = reinterpret_cast< OpPerformance_OpMemory* >(object);
  (void)_this;
}
void OpPerformance_OpMemory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OpPerformance_OpMemory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpPerformance_OpMemory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpPerformance_OpMemory_descriptor_;
}

const OpPerformance_OpMemory& OpPerformance_OpMemory::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OpPerformance_OpMemory> OpPerformance_OpMemory_default_instance_;

OpPerformance_OpMemory* OpPerformance_OpMemory::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OpPerformance_OpMemory>(arena);
}

void OpPerformance_OpMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpPerformance.OpMemory)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OpPerformance_OpMemory, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OpPerformance_OpMemory*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(host_temp_memory_, device_persistent_memory_);

#undef ZR_HELPER_
#undef ZR_

  output_memory_.Clear();
}

bool OpPerformance_OpMemory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.OpPerformance.OpMemory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 output_memory = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_output_memory())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_output_memory())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_host_temp_memory;
        break;
      }

      // optional int64 host_temp_memory = 2;
      case 2: {
        if (tag == 16) {
         parse_host_temp_memory:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &host_temp_memory_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_device_temp_memory;
        break;
      }

      // optional int64 device_temp_memory = 3;
      case 3: {
        if (tag == 24) {
         parse_device_temp_memory:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &device_temp_memory_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_host_persistent_memory;
        break;
      }

      // optional int64 host_persistent_memory = 4;
      case 4: {
        if (tag == 32) {
         parse_host_persistent_memory:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &host_persistent_memory_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_device_persistent_memory;
        break;
      }

      // optional int64 device_persistent_memory = 5;
      case 5: {
        if (tag == 40) {
         parse_device_persistent_memory:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &device_persistent_memory_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.OpPerformance.OpMemory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.OpPerformance.OpMemory)
  return false;
#undef DO_
}

void OpPerformance_OpMemory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.OpPerformance.OpMemory)
  // repeated int64 output_memory = 1;
  if (this->output_memory_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_output_memory_cached_byte_size_);
  }
  for (int i = 0; i < this->output_memory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->output_memory(i), output);
  }

  // optional int64 host_temp_memory = 2;
  if (this->host_temp_memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->host_temp_memory(), output);
  }

  // optional int64 device_temp_memory = 3;
  if (this->device_temp_memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->device_temp_memory(), output);
  }

  // optional int64 host_persistent_memory = 4;
  if (this->host_persistent_memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->host_persistent_memory(), output);
  }

  // optional int64 device_persistent_memory = 5;
  if (this->device_persistent_memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->device_persistent_memory(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.OpPerformance.OpMemory)
}

::google::protobuf::uint8* OpPerformance_OpMemory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpPerformance.OpMemory)
  // repeated int64 output_memory = 1;
  if (this->output_memory_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _output_memory_cached_byte_size_, target);
  }
  for (int i = 0; i < this->output_memory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->output_memory(i), target);
  }

  // optional int64 host_temp_memory = 2;
  if (this->host_temp_memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->host_temp_memory(), target);
  }

  // optional int64 device_temp_memory = 3;
  if (this->device_temp_memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->device_temp_memory(), target);
  }

  // optional int64 host_persistent_memory = 4;
  if (this->host_persistent_memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->host_persistent_memory(), target);
  }

  // optional int64 device_persistent_memory = 5;
  if (this->device_persistent_memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->device_persistent_memory(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpPerformance.OpMemory)
  return target;
}

size_t OpPerformance_OpMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpPerformance.OpMemory)
  size_t total_size = 0;

  // optional int64 host_temp_memory = 2;
  if (this->host_temp_memory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->host_temp_memory());
  }

  // optional int64 device_temp_memory = 3;
  if (this->device_temp_memory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->device_temp_memory());
  }

  // optional int64 host_persistent_memory = 4;
  if (this->host_persistent_memory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->host_persistent_memory());
  }

  // optional int64 device_persistent_memory = 5;
  if (this->device_persistent_memory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->device_persistent_memory());
  }

  // repeated int64 output_memory = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->output_memory_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->output_memory(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _output_memory_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpPerformance_OpMemory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpPerformance.OpMemory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpPerformance_OpMemory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpPerformance_OpMemory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpPerformance.OpMemory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpPerformance.OpMemory)
    UnsafeMergeFrom(*source);
  }
}

void OpPerformance_OpMemory::MergeFrom(const OpPerformance_OpMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpPerformance.OpMemory)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OpPerformance_OpMemory::UnsafeMergeFrom(const OpPerformance_OpMemory& from) {
  GOOGLE_DCHECK(&from != this);
  output_memory_.UnsafeMergeFrom(from.output_memory_);
  if (from.host_temp_memory() != 0) {
    set_host_temp_memory(from.host_temp_memory());
  }
  if (from.device_temp_memory() != 0) {
    set_device_temp_memory(from.device_temp_memory());
  }
  if (from.host_persistent_memory() != 0) {
    set_host_persistent_memory(from.host_persistent_memory());
  }
  if (from.device_persistent_memory() != 0) {
    set_device_persistent_memory(from.device_persistent_memory());
  }
}

void OpPerformance_OpMemory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpPerformance.OpMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpPerformance_OpMemory::CopyFrom(const OpPerformance_OpMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpPerformance.OpMemory)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OpPerformance_OpMemory::IsInitialized() const {

  return true;
}

void OpPerformance_OpMemory::Swap(OpPerformance_OpMemory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OpPerformance_OpMemory temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void OpPerformance_OpMemory::UnsafeArenaSwap(OpPerformance_OpMemory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OpPerformance_OpMemory::InternalSwap(OpPerformance_OpMemory* other) {
  output_memory_.UnsafeArenaSwap(&other->output_memory_);
  std::swap(host_temp_memory_, other->host_temp_memory_);
  std::swap(device_temp_memory_, other->device_temp_memory_);
  std::swap(host_persistent_memory_, other->host_persistent_memory_);
  std::swap(device_persistent_memory_, other->device_persistent_memory_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpPerformance_OpMemory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpPerformance_OpMemory_descriptor_;
  metadata.reflection = OpPerformance_OpMemory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

void OpPerformance::_slow_mutable_op() {
  op_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::OpInfo >(
      GetArenaNoVirtual());
}
::tensorflow::OpInfo* OpPerformance::_slow_release_op() {
  if (op_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::OpInfo* temp = new ::tensorflow::OpInfo(*op_);
    op_ = NULL;
    return temp;
  }
}
::tensorflow::OpInfo* OpPerformance::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpPerformance.op)
  
  ::tensorflow::OpInfo* temp = op_;
  op_ = NULL;
  return temp;
}
void OpPerformance::_slow_set_allocated_op(
    ::google::protobuf::Arena* message_arena, ::tensorflow::OpInfo** op) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*op) == NULL) {
      message_arena->Own(*op);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*op)) {
      ::tensorflow::OpInfo* new_op = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::OpInfo >(
            message_arena);
      new_op->CopyFrom(**op);
      *op = new_op;
    }
}
void OpPerformance::unsafe_arena_set_allocated_op(
    ::tensorflow::OpInfo* op) {
  if (GetArenaNoVirtual() == NULL) {
    delete op_;
  }
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpPerformance.op)
}
void OpPerformance::_slow_mutable_op_memory() {
  op_memory_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::OpPerformance_OpMemory >(
      GetArenaNoVirtual());
}
::tensorflow::OpPerformance_OpMemory* OpPerformance::_slow_release_op_memory() {
  if (op_memory_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::OpPerformance_OpMemory* temp = new ::tensorflow::OpPerformance_OpMemory(*op_memory_);
    op_memory_ = NULL;
    return temp;
  }
}
::tensorflow::OpPerformance_OpMemory* OpPerformance::unsafe_arena_release_op_memory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpPerformance.op_memory)
  
  ::tensorflow::OpPerformance_OpMemory* temp = op_memory_;
  op_memory_ = NULL;
  return temp;
}
void OpPerformance::_slow_set_allocated_op_memory(
    ::google::protobuf::Arena* message_arena, ::tensorflow::OpPerformance_OpMemory** op_memory) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*op_memory) == NULL) {
      message_arena->Own(*op_memory);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*op_memory)) {
      ::tensorflow::OpPerformance_OpMemory* new_op_memory = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::OpPerformance_OpMemory >(
            message_arena);
      new_op_memory->CopyFrom(**op_memory);
      *op_memory = new_op_memory;
    }
}
void OpPerformance::unsafe_arena_set_allocated_op_memory(
    ::tensorflow::OpPerformance_OpMemory* op_memory) {
  if (GetArenaNoVirtual() == NULL) {
    delete op_memory_;
  }
  op_memory_ = op_memory;
  if (op_memory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpPerformance.op_memory)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpPerformance::kOpFieldNumber;
const int OpPerformance::kNodeFieldNumber;
const int OpPerformance::kTemporaryMemorySizeFieldNumber;
const int OpPerformance::kComputeCostFieldNumber;
const int OpPerformance::kComputeTimeFieldNumber;
const int OpPerformance::kMemoryTimeFieldNumber;
const int OpPerformance::kComputeEfficiencyFieldNumber;
const int OpPerformance::kMemoryEfficiencyFieldNumber;
const int OpPerformance::kOpMemoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpPerformance::OpPerformance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpPerformance)
}
OpPerformance::OpPerformance(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpPerformance)
}

void OpPerformance::InitAsDefaultInstance() {
  op_ = const_cast< ::tensorflow::OpInfo*>(
      ::tensorflow::OpInfo::internal_default_instance());
  op_memory_ = const_cast< ::tensorflow::OpPerformance_OpMemory*>(
      ::tensorflow::OpPerformance_OpMemory::internal_default_instance());
}

OpPerformance::OpPerformance(const OpPerformance& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpPerformance)
}

void OpPerformance::SharedCtor() {
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_ = NULL;
  op_memory_ = NULL;
  ::memset(&temporary_memory_size_, 0, reinterpret_cast<char*>(&memory_efficiency_) -
    reinterpret_cast<char*>(&temporary_memory_size_) + sizeof(memory_efficiency_));
  _cached_size_ = 0;
}

OpPerformance::~OpPerformance() {
  // @@protoc_insertion_point(destructor:tensorflow.OpPerformance)
  SharedDtor();
}

void OpPerformance::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  node_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &OpPerformance_default_instance_.get()) {
    delete op_;
    delete op_memory_;
  }
}

void OpPerformance::ArenaDtor(void* object) {
  OpPerformance* _this = reinterpret_cast< OpPerformance* >(object);
  (void)_this;
}
void OpPerformance::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OpPerformance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpPerformance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpPerformance_descriptor_;
}

const OpPerformance& OpPerformance::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OpPerformance> OpPerformance_default_instance_;

OpPerformance* OpPerformance::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OpPerformance>(arena);
}

void OpPerformance::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpPerformance)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OpPerformance, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OpPerformance*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(temporary_memory_size_, memory_efficiency_);
  if (GetArenaNoVirtual() == NULL && op_ != NULL) delete op_;
  op_ = NULL;
  node_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && op_memory_ != NULL) delete op_memory_;
  op_memory_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool OpPerformance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.OpPerformance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.OpInfo op = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_temporary_memory_size;
        break;
      }

      // optional int64 temporary_memory_size = 2;
      case 2: {
        if (tag == 16) {
         parse_temporary_memory_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &temporary_memory_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_compute_cost;
        break;
      }

      // optional int64 compute_cost = 3;
      case 3: {
        if (tag == 24) {
         parse_compute_cost:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &compute_cost_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_compute_efficiency;
        break;
      }

      // optional double compute_efficiency = 4;
      case 4: {
        if (tag == 33) {
         parse_compute_efficiency:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &compute_efficiency_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_node;
        break;
      }

      // optional string node = 5;
      case 5: {
        if (tag == 42) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node().data(), this->node().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.OpPerformance.node"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_compute_time;
        break;
      }

      // optional int64 compute_time = 6;
      case 6: {
        if (tag == 48) {
         parse_compute_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &compute_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_memory_time;
        break;
      }

      // optional int64 memory_time = 7;
      case 7: {
        if (tag == 56) {
         parse_memory_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memory_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_memory_efficiency;
        break;
      }

      // optional double memory_efficiency = 8;
      case 8: {
        if (tag == 65) {
         parse_memory_efficiency:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &memory_efficiency_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_op_memory;
        break;
      }

      // optional .tensorflow.OpPerformance.OpMemory op_memory = 9;
      case 9: {
        if (tag == 74) {
         parse_op_memory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_memory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.OpPerformance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.OpPerformance)
  return false;
#undef DO_
}

void OpPerformance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.OpPerformance)
  // optional .tensorflow.OpInfo op = 1;
  if (this->has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->op_, output);
  }

  // optional int64 temporary_memory_size = 2;
  if (this->temporary_memory_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->temporary_memory_size(), output);
  }

  // optional int64 compute_cost = 3;
  if (this->compute_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->compute_cost(), output);
  }

  // optional double compute_efficiency = 4;
  if (this->compute_efficiency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->compute_efficiency(), output);
  }

  // optional string node = 5;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.OpPerformance.node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->node(), output);
  }

  // optional int64 compute_time = 6;
  if (this->compute_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->compute_time(), output);
  }

  // optional int64 memory_time = 7;
  if (this->memory_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->memory_time(), output);
  }

  // optional double memory_efficiency = 8;
  if (this->memory_efficiency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->memory_efficiency(), output);
  }

  // optional .tensorflow.OpPerformance.OpMemory op_memory = 9;
  if (this->has_op_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->op_memory_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.OpPerformance)
}

::google::protobuf::uint8* OpPerformance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpPerformance)
  // optional .tensorflow.OpInfo op = 1;
  if (this->has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->op_, false, target);
  }

  // optional int64 temporary_memory_size = 2;
  if (this->temporary_memory_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->temporary_memory_size(), target);
  }

  // optional int64 compute_cost = 3;
  if (this->compute_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->compute_cost(), target);
  }

  // optional double compute_efficiency = 4;
  if (this->compute_efficiency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->compute_efficiency(), target);
  }

  // optional string node = 5;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.OpPerformance.node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->node(), target);
  }

  // optional int64 compute_time = 6;
  if (this->compute_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->compute_time(), target);
  }

  // optional int64 memory_time = 7;
  if (this->memory_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->memory_time(), target);
  }

  // optional double memory_efficiency = 8;
  if (this->memory_efficiency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->memory_efficiency(), target);
  }

  // optional .tensorflow.OpPerformance.OpMemory op_memory = 9;
  if (this->has_op_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->op_memory_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpPerformance)
  return target;
}

size_t OpPerformance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpPerformance)
  size_t total_size = 0;

  // optional .tensorflow.OpInfo op = 1;
  if (this->has_op()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_);
  }

  // optional string node = 5;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node());
  }

  // optional int64 temporary_memory_size = 2;
  if (this->temporary_memory_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->temporary_memory_size());
  }

  // optional int64 compute_cost = 3;
  if (this->compute_cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->compute_cost());
  }

  // optional int64 compute_time = 6;
  if (this->compute_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->compute_time());
  }

  // optional int64 memory_time = 7;
  if (this->memory_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->memory_time());
  }

  // optional double compute_efficiency = 4;
  if (this->compute_efficiency() != 0) {
    total_size += 1 + 8;
  }

  // optional double memory_efficiency = 8;
  if (this->memory_efficiency() != 0) {
    total_size += 1 + 8;
  }

  // optional .tensorflow.OpPerformance.OpMemory op_memory = 9;
  if (this->has_op_memory()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_memory_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpPerformance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpPerformance)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpPerformance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpPerformance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpPerformance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpPerformance)
    UnsafeMergeFrom(*source);
  }
}

void OpPerformance::MergeFrom(const OpPerformance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpPerformance)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OpPerformance::UnsafeMergeFrom(const OpPerformance& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_op()) {
    mutable_op()->::tensorflow::OpInfo::MergeFrom(from.op());
  }
  if (from.node().size() > 0) {
    set_node(from.node());
  }
  if (from.temporary_memory_size() != 0) {
    set_temporary_memory_size(from.temporary_memory_size());
  }
  if (from.compute_cost() != 0) {
    set_compute_cost(from.compute_cost());
  }
  if (from.compute_time() != 0) {
    set_compute_time(from.compute_time());
  }
  if (from.memory_time() != 0) {
    set_memory_time(from.memory_time());
  }
  if (from.compute_efficiency() != 0) {
    set_compute_efficiency(from.compute_efficiency());
  }
  if (from.memory_efficiency() != 0) {
    set_memory_efficiency(from.memory_efficiency());
  }
  if (from.has_op_memory()) {
    mutable_op_memory()->::tensorflow::OpPerformance_OpMemory::MergeFrom(from.op_memory());
  }
}

void OpPerformance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpPerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpPerformance::CopyFrom(const OpPerformance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpPerformance)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OpPerformance::IsInitialized() const {

  return true;
}

void OpPerformance::Swap(OpPerformance* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OpPerformance temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void OpPerformance::UnsafeArenaSwap(OpPerformance* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OpPerformance::InternalSwap(OpPerformance* other) {
  std::swap(op_, other->op_);
  node_.Swap(&other->node_);
  std::swap(temporary_memory_size_, other->temporary_memory_size_);
  std::swap(compute_cost_, other->compute_cost_);
  std::swap(compute_time_, other->compute_time_);
  std::swap(memory_time_, other->memory_time_);
  std::swap(compute_efficiency_, other->compute_efficiency_);
  std::swap(memory_efficiency_, other->memory_efficiency_);
  std::swap(op_memory_, other->op_memory_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpPerformance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpPerformance_descriptor_;
  metadata.reflection = OpPerformance_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpPerformance_OpMemory

// repeated int64 output_memory = 1;
int OpPerformance_OpMemory::output_memory_size() const {
  return output_memory_.size();
}
void OpPerformance_OpMemory::clear_output_memory() {
  output_memory_.Clear();
}
::google::protobuf::int64 OpPerformance_OpMemory::output_memory(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.OpMemory.output_memory)
  return output_memory_.Get(index);
}
void OpPerformance_OpMemory::set_output_memory(int index, ::google::protobuf::int64 value) {
  output_memory_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.OpMemory.output_memory)
}
void OpPerformance_OpMemory::add_output_memory(::google::protobuf::int64 value) {
  output_memory_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.OpPerformance.OpMemory.output_memory)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
OpPerformance_OpMemory::output_memory() const {
  // @@protoc_insertion_point(field_list:tensorflow.OpPerformance.OpMemory.output_memory)
  return output_memory_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
OpPerformance_OpMemory::mutable_output_memory() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.OpPerformance.OpMemory.output_memory)
  return &output_memory_;
}

// optional int64 host_temp_memory = 2;
void OpPerformance_OpMemory::clear_host_temp_memory() {
  host_temp_memory_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance_OpMemory::host_temp_memory() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.OpMemory.host_temp_memory)
  return host_temp_memory_;
}
void OpPerformance_OpMemory::set_host_temp_memory(::google::protobuf::int64 value) {
  
  host_temp_memory_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.OpMemory.host_temp_memory)
}

// optional int64 device_temp_memory = 3;
void OpPerformance_OpMemory::clear_device_temp_memory() {
  device_temp_memory_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance_OpMemory::device_temp_memory() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.OpMemory.device_temp_memory)
  return device_temp_memory_;
}
void OpPerformance_OpMemory::set_device_temp_memory(::google::protobuf::int64 value) {
  
  device_temp_memory_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.OpMemory.device_temp_memory)
}

// optional int64 host_persistent_memory = 4;
void OpPerformance_OpMemory::clear_host_persistent_memory() {
  host_persistent_memory_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance_OpMemory::host_persistent_memory() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.OpMemory.host_persistent_memory)
  return host_persistent_memory_;
}
void OpPerformance_OpMemory::set_host_persistent_memory(::google::protobuf::int64 value) {
  
  host_persistent_memory_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.OpMemory.host_persistent_memory)
}

// optional int64 device_persistent_memory = 5;
void OpPerformance_OpMemory::clear_device_persistent_memory() {
  device_persistent_memory_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance_OpMemory::device_persistent_memory() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.OpMemory.device_persistent_memory)
  return device_persistent_memory_;
}
void OpPerformance_OpMemory::set_device_persistent_memory(::google::protobuf::int64 value) {
  
  device_persistent_memory_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.OpMemory.device_persistent_memory)
}

inline const OpPerformance_OpMemory* OpPerformance_OpMemory::internal_default_instance() {
  return &OpPerformance_OpMemory_default_instance_.get();
}
// -------------------------------------------------------------------

// OpPerformance

// optional .tensorflow.OpInfo op = 1;
bool OpPerformance::has_op() const {
  return this != internal_default_instance() && op_ != NULL;
}
void OpPerformance::clear_op() {
  if (GetArenaNoVirtual() == NULL && op_ != NULL) delete op_;
  op_ = NULL;
}
const ::tensorflow::OpInfo& OpPerformance::op() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.op)
  return op_ != NULL ? *op_
                         : *::tensorflow::OpInfo::internal_default_instance();
}
::tensorflow::OpInfo* OpPerformance::mutable_op() {
  
  if (op_ == NULL) {
    _slow_mutable_op();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpPerformance.op)
  return op_;
}
::tensorflow::OpInfo* OpPerformance::release_op() {
  // @@protoc_insertion_point(field_release:tensorflow.OpPerformance.op)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_op();
  } else {
    ::tensorflow::OpInfo* temp = op_;
    op_ = NULL;
    return temp;
  }
}
 void OpPerformance::set_allocated_op(::tensorflow::OpInfo* op) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete op_;
  }
  if (op != NULL) {
    _slow_set_allocated_op(message_arena, &op);
  }
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpPerformance.op)
}

// optional string node = 5;
void OpPerformance::clear_node() {
  node_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& OpPerformance::node() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.node)
  return node_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpPerformance::set_node(const ::std::string& value) {
  
  node_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.node)
}
void OpPerformance::set_node(const char* value) {
  
  node_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.OpPerformance.node)
}
void OpPerformance::set_node(const char* value,
    size_t size) {
  
  node_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.OpPerformance.node)
}
::std::string* OpPerformance::mutable_node() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.OpPerformance.node)
  return node_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpPerformance::release_node() {
  // @@protoc_insertion_point(field_release:tensorflow.OpPerformance.node)
  
  return node_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpPerformance::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpPerformance.node)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void OpPerformance::set_allocated_node(::std::string* node) {
  if (node != NULL) {
    
  } else {
    
  }
  node_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpPerformance.node)
}
void OpPerformance::unsafe_arena_set_allocated_node(
    ::std::string* node) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node != NULL) {
    
  } else {
    
  }
  node_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpPerformance.node)
}

// optional int64 temporary_memory_size = 2;
void OpPerformance::clear_temporary_memory_size() {
  temporary_memory_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance::temporary_memory_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.temporary_memory_size)
  return temporary_memory_size_;
}
void OpPerformance::set_temporary_memory_size(::google::protobuf::int64 value) {
  
  temporary_memory_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.temporary_memory_size)
}

// optional int64 compute_cost = 3;
void OpPerformance::clear_compute_cost() {
  compute_cost_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance::compute_cost() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.compute_cost)
  return compute_cost_;
}
void OpPerformance::set_compute_cost(::google::protobuf::int64 value) {
  
  compute_cost_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.compute_cost)
}

// optional int64 compute_time = 6;
void OpPerformance::clear_compute_time() {
  compute_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance::compute_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.compute_time)
  return compute_time_;
}
void OpPerformance::set_compute_time(::google::protobuf::int64 value) {
  
  compute_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.compute_time)
}

// optional int64 memory_time = 7;
void OpPerformance::clear_memory_time() {
  memory_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance::memory_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.memory_time)
  return memory_time_;
}
void OpPerformance::set_memory_time(::google::protobuf::int64 value) {
  
  memory_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.memory_time)
}

// optional double compute_efficiency = 4;
void OpPerformance::clear_compute_efficiency() {
  compute_efficiency_ = 0;
}
double OpPerformance::compute_efficiency() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.compute_efficiency)
  return compute_efficiency_;
}
void OpPerformance::set_compute_efficiency(double value) {
  
  compute_efficiency_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.compute_efficiency)
}

// optional double memory_efficiency = 8;
void OpPerformance::clear_memory_efficiency() {
  memory_efficiency_ = 0;
}
double OpPerformance::memory_efficiency() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.memory_efficiency)
  return memory_efficiency_;
}
void OpPerformance::set_memory_efficiency(double value) {
  
  memory_efficiency_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.memory_efficiency)
}

// optional .tensorflow.OpPerformance.OpMemory op_memory = 9;
bool OpPerformance::has_op_memory() const {
  return this != internal_default_instance() && op_memory_ != NULL;
}
void OpPerformance::clear_op_memory() {
  if (GetArenaNoVirtual() == NULL && op_memory_ != NULL) delete op_memory_;
  op_memory_ = NULL;
}
const ::tensorflow::OpPerformance_OpMemory& OpPerformance::op_memory() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.op_memory)
  return op_memory_ != NULL ? *op_memory_
                         : *::tensorflow::OpPerformance_OpMemory::internal_default_instance();
}
::tensorflow::OpPerformance_OpMemory* OpPerformance::mutable_op_memory() {
  
  if (op_memory_ == NULL) {
    _slow_mutable_op_memory();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpPerformance.op_memory)
  return op_memory_;
}
::tensorflow::OpPerformance_OpMemory* OpPerformance::release_op_memory() {
  // @@protoc_insertion_point(field_release:tensorflow.OpPerformance.op_memory)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_op_memory();
  } else {
    ::tensorflow::OpPerformance_OpMemory* temp = op_memory_;
    op_memory_ = NULL;
    return temp;
  }
}
 void OpPerformance::set_allocated_op_memory(::tensorflow::OpPerformance_OpMemory* op_memory) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete op_memory_;
  }
  if (op_memory != NULL) {
    _slow_set_allocated_op_memory(message_arena, &op_memory);
  }
  op_memory_ = op_memory;
  if (op_memory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpPerformance.op_memory)
}

inline const OpPerformance* OpPerformance::internal_default_instance() {
  return &OpPerformance_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpPerformanceList::kOpPerformanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpPerformanceList::OpPerformanceList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpPerformanceList)
}
OpPerformanceList::OpPerformanceList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  op_performance_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpPerformanceList)
}

void OpPerformanceList::InitAsDefaultInstance() {
}

OpPerformanceList::OpPerformanceList(const OpPerformanceList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpPerformanceList)
}

void OpPerformanceList::SharedCtor() {
  _cached_size_ = 0;
}

OpPerformanceList::~OpPerformanceList() {
  // @@protoc_insertion_point(destructor:tensorflow.OpPerformanceList)
  SharedDtor();
}

void OpPerformanceList::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void OpPerformanceList::ArenaDtor(void* object) {
  OpPerformanceList* _this = reinterpret_cast< OpPerformanceList* >(object);
  (void)_this;
}
void OpPerformanceList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OpPerformanceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpPerformanceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpPerformanceList_descriptor_;
}

const OpPerformanceList& OpPerformanceList::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OpPerformanceList> OpPerformanceList_default_instance_;

OpPerformanceList* OpPerformanceList::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OpPerformanceList>(arena);
}

void OpPerformanceList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpPerformanceList)
  op_performance_.Clear();
}

bool OpPerformanceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.OpPerformanceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.OpPerformance op_performance = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_op_performance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_op_performance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_op_performance;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.OpPerformanceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.OpPerformanceList)
  return false;
#undef DO_
}

void OpPerformanceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.OpPerformanceList)
  // repeated .tensorflow.OpPerformance op_performance = 1;
  for (unsigned int i = 0, n = this->op_performance_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->op_performance(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.OpPerformanceList)
}

::google::protobuf::uint8* OpPerformanceList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpPerformanceList)
  // repeated .tensorflow.OpPerformance op_performance = 1;
  for (unsigned int i = 0, n = this->op_performance_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->op_performance(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpPerformanceList)
  return target;
}

size_t OpPerformanceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpPerformanceList)
  size_t total_size = 0;

  // repeated .tensorflow.OpPerformance op_performance = 1;
  {
    unsigned int count = this->op_performance_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op_performance(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpPerformanceList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpPerformanceList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpPerformanceList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpPerformanceList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpPerformanceList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpPerformanceList)
    UnsafeMergeFrom(*source);
  }
}

void OpPerformanceList::MergeFrom(const OpPerformanceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpPerformanceList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OpPerformanceList::UnsafeMergeFrom(const OpPerformanceList& from) {
  GOOGLE_DCHECK(&from != this);
  op_performance_.MergeFrom(from.op_performance_);
}

void OpPerformanceList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpPerformanceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpPerformanceList::CopyFrom(const OpPerformanceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpPerformanceList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OpPerformanceList::IsInitialized() const {

  return true;
}

void OpPerformanceList::Swap(OpPerformanceList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OpPerformanceList temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void OpPerformanceList::UnsafeArenaSwap(OpPerformanceList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OpPerformanceList::InternalSwap(OpPerformanceList* other) {
  op_performance_.UnsafeArenaSwap(&other->op_performance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpPerformanceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpPerformanceList_descriptor_;
  metadata.reflection = OpPerformanceList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpPerformanceList

// repeated .tensorflow.OpPerformance op_performance = 1;
int OpPerformanceList::op_performance_size() const {
  return op_performance_.size();
}
void OpPerformanceList::clear_op_performance() {
  op_performance_.Clear();
}
const ::tensorflow::OpPerformance& OpPerformanceList::op_performance(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformanceList.op_performance)
  return op_performance_.Get(index);
}
::tensorflow::OpPerformance* OpPerformanceList::mutable_op_performance(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.OpPerformanceList.op_performance)
  return op_performance_.Mutable(index);
}
::tensorflow::OpPerformance* OpPerformanceList::add_op_performance() {
  // @@protoc_insertion_point(field_add:tensorflow.OpPerformanceList.op_performance)
  return op_performance_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::OpPerformance >*
OpPerformanceList::mutable_op_performance() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.OpPerformanceList.op_performance)
  return &op_performance_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::OpPerformance >&
OpPerformanceList::op_performance() const {
  // @@protoc_insertion_point(field_list:tensorflow.OpPerformanceList.op_performance)
  return op_performance_;
}

inline const OpPerformanceList* OpPerformanceList::internal_default_instance() {
  return &OpPerformanceList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
