// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/debug.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/debug.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* DebugTensorWatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugTensorWatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/debug.proto");
  GOOGLE_CHECK(file != NULL);
  DebugTensorWatch_descriptor_ = file->message_type(0);
  static const int DebugTensorWatch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTensorWatch, node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTensorWatch, output_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTensorWatch, debug_ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTensorWatch, debug_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTensorWatch, tolerate_debug_op_creation_failures_),
  };
  DebugTensorWatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugTensorWatch_descriptor_,
      DebugTensorWatch::internal_default_instance(),
      DebugTensorWatch_offsets_,
      -1,
      -1,
      -1,
      sizeof(DebugTensorWatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTensorWatch, _internal_metadata_));
  DebugOptions_descriptor_ = file->message_type(1);
  static const int DebugOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugOptions, debug_tensor_watch_opts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugOptions, global_step_),
  };
  DebugOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugOptions_descriptor_,
      DebugOptions::internal_default_instance(),
      DebugOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(DebugOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugOptions, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugTensorWatch_descriptor_, DebugTensorWatch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugOptions_descriptor_, DebugOptions::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto() {
  DebugTensorWatch_default_instance_.Shutdown();
  delete DebugTensorWatch_reflection_;
  DebugOptions_default_instance_.Shutdown();
  delete DebugOptions_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  DebugTensorWatch_default_instance_.DefaultConstruct();
  DebugOptions_default_instance_.DefaultConstruct();
  DebugTensorWatch_default_instance_.get_mutable()->InitAsDefaultInstance();
  DebugOptions_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$tensorflow/core/protobuf/debug.proto\022\n"
    "tensorflow\"\216\001\n\020DebugTensorWatch\022\021\n\tnode_"
    "name\030\001 \001(\t\022\023\n\013output_slot\030\002 \001(\005\022\021\n\tdebug"
    "_ops\030\003 \003(\t\022\022\n\ndebug_urls\030\004 \003(\t\022+\n#tolera"
    "te_debug_op_creation_failures\030\005 \001(\010\"b\n\014D"
    "ebugOptions\022=\n\027debug_tensor_watch_opts\030\004"
    " \003(\0132\034.tensorflow.DebugTensorWatch\022\023\n\013gl"
    "obal_step\030\n \001(\003B,\n\030org.tensorflow.framew"
    "orkB\013DebugProtosP\001\370\001\001b\006proto3", 349);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/debug.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugTensorWatch::kNodeNameFieldNumber;
const int DebugTensorWatch::kOutputSlotFieldNumber;
const int DebugTensorWatch::kDebugOpsFieldNumber;
const int DebugTensorWatch::kDebugUrlsFieldNumber;
const int DebugTensorWatch::kTolerateDebugOpCreationFailuresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugTensorWatch::DebugTensorWatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DebugTensorWatch)
}
DebugTensorWatch::DebugTensorWatch(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  debug_ops_(arena),
  debug_urls_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebugTensorWatch)
}

void DebugTensorWatch::InitAsDefaultInstance() {
}

DebugTensorWatch::DebugTensorWatch(const DebugTensorWatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebugTensorWatch)
}

void DebugTensorWatch::SharedCtor() {
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&output_slot_, 0, reinterpret_cast<char*>(&tolerate_debug_op_creation_failures_) -
    reinterpret_cast<char*>(&output_slot_) + sizeof(tolerate_debug_op_creation_failures_));
  _cached_size_ = 0;
}

DebugTensorWatch::~DebugTensorWatch() {
  // @@protoc_insertion_point(destructor:tensorflow.DebugTensorWatch)
  SharedDtor();
}

void DebugTensorWatch::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  node_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DebugTensorWatch::ArenaDtor(void* object) {
  DebugTensorWatch* _this = reinterpret_cast< DebugTensorWatch* >(object);
  (void)_this;
}
void DebugTensorWatch::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DebugTensorWatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugTensorWatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugTensorWatch_descriptor_;
}

const DebugTensorWatch& DebugTensorWatch::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DebugTensorWatch> DebugTensorWatch_default_instance_;

DebugTensorWatch* DebugTensorWatch::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DebugTensorWatch>(arena);
}

void DebugTensorWatch::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebugTensorWatch)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DebugTensorWatch, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DebugTensorWatch*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(output_slot_, tolerate_debug_op_creation_failures_);
  node_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  debug_ops_.Clear();
  debug_urls_.Clear();
}

bool DebugTensorWatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DebugTensorWatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string node_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name().data(), this->node_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DebugTensorWatch.node_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_output_slot;
        break;
      }

      // optional int32 output_slot = 2;
      case 2: {
        if (tag == 16) {
         parse_output_slot:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_slot_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_debug_ops;
        break;
      }

      // repeated string debug_ops = 3;
      case 3: {
        if (tag == 26) {
         parse_debug_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_debug_ops()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->debug_ops(this->debug_ops_size() - 1).data(),
            this->debug_ops(this->debug_ops_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DebugTensorWatch.debug_ops"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_debug_ops;
        if (input->ExpectTag(34)) goto parse_debug_urls;
        break;
      }

      // repeated string debug_urls = 4;
      case 4: {
        if (tag == 34) {
         parse_debug_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_debug_urls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->debug_urls(this->debug_urls_size() - 1).data(),
            this->debug_urls(this->debug_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DebugTensorWatch.debug_urls"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_debug_urls;
        if (input->ExpectTag(40)) goto parse_tolerate_debug_op_creation_failures;
        break;
      }

      // optional bool tolerate_debug_op_creation_failures = 5;
      case 5: {
        if (tag == 40) {
         parse_tolerate_debug_op_creation_failures:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tolerate_debug_op_creation_failures_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DebugTensorWatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DebugTensorWatch)
  return false;
#undef DO_
}

void DebugTensorWatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DebugTensorWatch)
  // optional string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugTensorWatch.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_name(), output);
  }

  // optional int32 output_slot = 2;
  if (this->output_slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->output_slot(), output);
  }

  // repeated string debug_ops = 3;
  for (int i = 0; i < this->debug_ops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->debug_ops(i).data(), this->debug_ops(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugTensorWatch.debug_ops");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->debug_ops(i), output);
  }

  // repeated string debug_urls = 4;
  for (int i = 0; i < this->debug_urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->debug_urls(i).data(), this->debug_urls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugTensorWatch.debug_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->debug_urls(i), output);
  }

  // optional bool tolerate_debug_op_creation_failures = 5;
  if (this->tolerate_debug_op_creation_failures() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->tolerate_debug_op_creation_failures(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.DebugTensorWatch)
}

::google::protobuf::uint8* DebugTensorWatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebugTensorWatch)
  // optional string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugTensorWatch.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_name(), target);
  }

  // optional int32 output_slot = 2;
  if (this->output_slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->output_slot(), target);
  }

  // repeated string debug_ops = 3;
  for (int i = 0; i < this->debug_ops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->debug_ops(i).data(), this->debug_ops(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugTensorWatch.debug_ops");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->debug_ops(i), target);
  }

  // repeated string debug_urls = 4;
  for (int i = 0; i < this->debug_urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->debug_urls(i).data(), this->debug_urls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugTensorWatch.debug_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->debug_urls(i), target);
  }

  // optional bool tolerate_debug_op_creation_failures = 5;
  if (this->tolerate_debug_op_creation_failures() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->tolerate_debug_op_creation_failures(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebugTensorWatch)
  return target;
}

size_t DebugTensorWatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebugTensorWatch)
  size_t total_size = 0;

  // optional string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name());
  }

  // optional int32 output_slot = 2;
  if (this->output_slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->output_slot());
  }

  // optional bool tolerate_debug_op_creation_failures = 5;
  if (this->tolerate_debug_op_creation_failures() != 0) {
    total_size += 1 + 1;
  }

  // repeated string debug_ops = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->debug_ops_size());
  for (int i = 0; i < this->debug_ops_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->debug_ops(i));
  }

  // repeated string debug_urls = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->debug_urls_size());
  for (int i = 0; i < this->debug_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->debug_urls(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugTensorWatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebugTensorWatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DebugTensorWatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugTensorWatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebugTensorWatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebugTensorWatch)
    UnsafeMergeFrom(*source);
  }
}

void DebugTensorWatch::MergeFrom(const DebugTensorWatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebugTensorWatch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DebugTensorWatch::UnsafeMergeFrom(const DebugTensorWatch& from) {
  GOOGLE_DCHECK(&from != this);
  debug_ops_.UnsafeMergeFrom(from.debug_ops_);
  debug_urls_.UnsafeMergeFrom(from.debug_urls_);
  if (from.node_name().size() > 0) {
    set_node_name(from.node_name());
  }
  if (from.output_slot() != 0) {
    set_output_slot(from.output_slot());
  }
  if (from.tolerate_debug_op_creation_failures() != 0) {
    set_tolerate_debug_op_creation_failures(from.tolerate_debug_op_creation_failures());
  }
}

void DebugTensorWatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebugTensorWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugTensorWatch::CopyFrom(const DebugTensorWatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebugTensorWatch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DebugTensorWatch::IsInitialized() const {

  return true;
}

void DebugTensorWatch::Swap(DebugTensorWatch* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DebugTensorWatch temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DebugTensorWatch::UnsafeArenaSwap(DebugTensorWatch* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DebugTensorWatch::InternalSwap(DebugTensorWatch* other) {
  node_name_.Swap(&other->node_name_);
  std::swap(output_slot_, other->output_slot_);
  debug_ops_.UnsafeArenaSwap(&other->debug_ops_);
  debug_urls_.UnsafeArenaSwap(&other->debug_urls_);
  std::swap(tolerate_debug_op_creation_failures_, other->tolerate_debug_op_creation_failures_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugTensorWatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugTensorWatch_descriptor_;
  metadata.reflection = DebugTensorWatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugTensorWatch

// optional string node_name = 1;
void DebugTensorWatch::clear_node_name() {
  node_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DebugTensorWatch::node_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugTensorWatch.node_name)
  return node_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DebugTensorWatch::set_node_name(const ::std::string& value) {
  
  node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DebugTensorWatch.node_name)
}
void DebugTensorWatch::set_node_name(const char* value) {
  
  node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DebugTensorWatch.node_name)
}
void DebugTensorWatch::set_node_name(const char* value,
    size_t size) {
  
  node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebugTensorWatch.node_name)
}
::std::string* DebugTensorWatch::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugTensorWatch.node_name)
  return node_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DebugTensorWatch::release_node_name() {
  // @@protoc_insertion_point(field_release:tensorflow.DebugTensorWatch.node_name)
  
  return node_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DebugTensorWatch::unsafe_arena_release_node_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DebugTensorWatch.node_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DebugTensorWatch::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugTensorWatch.node_name)
}
void DebugTensorWatch::unsafe_arena_set_allocated_node_name(
    ::std::string* node_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DebugTensorWatch.node_name)
}

// optional int32 output_slot = 2;
void DebugTensorWatch::clear_output_slot() {
  output_slot_ = 0;
}
::google::protobuf::int32 DebugTensorWatch::output_slot() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugTensorWatch.output_slot)
  return output_slot_;
}
void DebugTensorWatch::set_output_slot(::google::protobuf::int32 value) {
  
  output_slot_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DebugTensorWatch.output_slot)
}

// repeated string debug_ops = 3;
int DebugTensorWatch::debug_ops_size() const {
  return debug_ops_.size();
}
void DebugTensorWatch::clear_debug_ops() {
  debug_ops_.Clear();
}
const ::std::string& DebugTensorWatch::debug_ops(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugTensorWatch.debug_ops)
  return debug_ops_.Get(index);
}
::std::string* DebugTensorWatch::mutable_debug_ops(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugTensorWatch.debug_ops)
  return debug_ops_.Mutable(index);
}
void DebugTensorWatch::set_debug_ops(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.DebugTensorWatch.debug_ops)
  debug_ops_.Mutable(index)->assign(value);
}
void DebugTensorWatch::set_debug_ops(int index, const char* value) {
  debug_ops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.DebugTensorWatch.debug_ops)
}
void DebugTensorWatch::set_debug_ops(int index, const char* value, size_t size) {
  debug_ops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebugTensorWatch.debug_ops)
}
::std::string* DebugTensorWatch::add_debug_ops() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.DebugTensorWatch.debug_ops)
  return debug_ops_.Add();
}
void DebugTensorWatch::add_debug_ops(const ::std::string& value) {
  debug_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.DebugTensorWatch.debug_ops)
}
void DebugTensorWatch::add_debug_ops(const char* value) {
  debug_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.DebugTensorWatch.debug_ops)
}
void DebugTensorWatch::add_debug_ops(const char* value, size_t size) {
  debug_ops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.DebugTensorWatch.debug_ops)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DebugTensorWatch::debug_ops() const {
  // @@protoc_insertion_point(field_list:tensorflow.DebugTensorWatch.debug_ops)
  return debug_ops_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DebugTensorWatch::mutable_debug_ops() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.DebugTensorWatch.debug_ops)
  return &debug_ops_;
}

// repeated string debug_urls = 4;
int DebugTensorWatch::debug_urls_size() const {
  return debug_urls_.size();
}
void DebugTensorWatch::clear_debug_urls() {
  debug_urls_.Clear();
}
const ::std::string& DebugTensorWatch::debug_urls(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugTensorWatch.debug_urls)
  return debug_urls_.Get(index);
}
::std::string* DebugTensorWatch::mutable_debug_urls(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugTensorWatch.debug_urls)
  return debug_urls_.Mutable(index);
}
void DebugTensorWatch::set_debug_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.DebugTensorWatch.debug_urls)
  debug_urls_.Mutable(index)->assign(value);
}
void DebugTensorWatch::set_debug_urls(int index, const char* value) {
  debug_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.DebugTensorWatch.debug_urls)
}
void DebugTensorWatch::set_debug_urls(int index, const char* value, size_t size) {
  debug_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DebugTensorWatch.debug_urls)
}
::std::string* DebugTensorWatch::add_debug_urls() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.DebugTensorWatch.debug_urls)
  return debug_urls_.Add();
}
void DebugTensorWatch::add_debug_urls(const ::std::string& value) {
  debug_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.DebugTensorWatch.debug_urls)
}
void DebugTensorWatch::add_debug_urls(const char* value) {
  debug_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.DebugTensorWatch.debug_urls)
}
void DebugTensorWatch::add_debug_urls(const char* value, size_t size) {
  debug_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.DebugTensorWatch.debug_urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DebugTensorWatch::debug_urls() const {
  // @@protoc_insertion_point(field_list:tensorflow.DebugTensorWatch.debug_urls)
  return debug_urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DebugTensorWatch::mutable_debug_urls() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.DebugTensorWatch.debug_urls)
  return &debug_urls_;
}

// optional bool tolerate_debug_op_creation_failures = 5;
void DebugTensorWatch::clear_tolerate_debug_op_creation_failures() {
  tolerate_debug_op_creation_failures_ = false;
}
bool DebugTensorWatch::tolerate_debug_op_creation_failures() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugTensorWatch.tolerate_debug_op_creation_failures)
  return tolerate_debug_op_creation_failures_;
}
void DebugTensorWatch::set_tolerate_debug_op_creation_failures(bool value) {
  
  tolerate_debug_op_creation_failures_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DebugTensorWatch.tolerate_debug_op_creation_failures)
}

inline const DebugTensorWatch* DebugTensorWatch::internal_default_instance() {
  return &DebugTensorWatch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugOptions::kDebugTensorWatchOptsFieldNumber;
const int DebugOptions::kGlobalStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugOptions::DebugOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DebugOptions)
}
DebugOptions::DebugOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  debug_tensor_watch_opts_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebugOptions)
}

void DebugOptions::InitAsDefaultInstance() {
}

DebugOptions::DebugOptions(const DebugOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebugOptions)
}

void DebugOptions::SharedCtor() {
  global_step_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

DebugOptions::~DebugOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.DebugOptions)
  SharedDtor();
}

void DebugOptions::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void DebugOptions::ArenaDtor(void* object) {
  DebugOptions* _this = reinterpret_cast< DebugOptions* >(object);
  (void)_this;
}
void DebugOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DebugOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugOptions_descriptor_;
}

const DebugOptions& DebugOptions::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DebugOptions> DebugOptions_default_instance_;

DebugOptions* DebugOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DebugOptions>(arena);
}

void DebugOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebugOptions)
  global_step_ = GOOGLE_LONGLONG(0);
  debug_tensor_watch_opts_.Clear();
}

bool DebugOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DebugOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.DebugTensorWatch debug_tensor_watch_opts = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_debug_tensor_watch_opts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_debug_tensor_watch_opts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_debug_tensor_watch_opts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_global_step;
        break;
      }

      // optional int64 global_step = 10;
      case 10: {
        if (tag == 80) {
         parse_global_step:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &global_step_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DebugOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DebugOptions)
  return false;
#undef DO_
}

void DebugOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DebugOptions)
  // repeated .tensorflow.DebugTensorWatch debug_tensor_watch_opts = 4;
  for (unsigned int i = 0, n = this->debug_tensor_watch_opts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->debug_tensor_watch_opts(i), output);
  }

  // optional int64 global_step = 10;
  if (this->global_step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->global_step(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.DebugOptions)
}

::google::protobuf::uint8* DebugOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebugOptions)
  // repeated .tensorflow.DebugTensorWatch debug_tensor_watch_opts = 4;
  for (unsigned int i = 0, n = this->debug_tensor_watch_opts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->debug_tensor_watch_opts(i), false, target);
  }

  // optional int64 global_step = 10;
  if (this->global_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->global_step(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebugOptions)
  return target;
}

size_t DebugOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebugOptions)
  size_t total_size = 0;

  // optional int64 global_step = 10;
  if (this->global_step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->global_step());
  }

  // repeated .tensorflow.DebugTensorWatch debug_tensor_watch_opts = 4;
  {
    unsigned int count = this->debug_tensor_watch_opts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debug_tensor_watch_opts(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebugOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DebugOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebugOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebugOptions)
    UnsafeMergeFrom(*source);
  }
}

void DebugOptions::MergeFrom(const DebugOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebugOptions)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DebugOptions::UnsafeMergeFrom(const DebugOptions& from) {
  GOOGLE_DCHECK(&from != this);
  debug_tensor_watch_opts_.MergeFrom(from.debug_tensor_watch_opts_);
  if (from.global_step() != 0) {
    set_global_step(from.global_step());
  }
}

void DebugOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebugOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugOptions::CopyFrom(const DebugOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebugOptions)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DebugOptions::IsInitialized() const {

  return true;
}

void DebugOptions::Swap(DebugOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DebugOptions temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DebugOptions::UnsafeArenaSwap(DebugOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DebugOptions::InternalSwap(DebugOptions* other) {
  debug_tensor_watch_opts_.UnsafeArenaSwap(&other->debug_tensor_watch_opts_);
  std::swap(global_step_, other->global_step_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugOptions_descriptor_;
  metadata.reflection = DebugOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugOptions

// repeated .tensorflow.DebugTensorWatch debug_tensor_watch_opts = 4;
int DebugOptions::debug_tensor_watch_opts_size() const {
  return debug_tensor_watch_opts_.size();
}
void DebugOptions::clear_debug_tensor_watch_opts() {
  debug_tensor_watch_opts_.Clear();
}
const ::tensorflow::DebugTensorWatch& DebugOptions::debug_tensor_watch_opts(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugOptions.debug_tensor_watch_opts)
  return debug_tensor_watch_opts_.Get(index);
}
::tensorflow::DebugTensorWatch* DebugOptions::mutable_debug_tensor_watch_opts(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.DebugOptions.debug_tensor_watch_opts)
  return debug_tensor_watch_opts_.Mutable(index);
}
::tensorflow::DebugTensorWatch* DebugOptions::add_debug_tensor_watch_opts() {
  // @@protoc_insertion_point(field_add:tensorflow.DebugOptions.debug_tensor_watch_opts)
  return debug_tensor_watch_opts_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::DebugTensorWatch >*
DebugOptions::mutable_debug_tensor_watch_opts() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.DebugOptions.debug_tensor_watch_opts)
  return &debug_tensor_watch_opts_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::DebugTensorWatch >&
DebugOptions::debug_tensor_watch_opts() const {
  // @@protoc_insertion_point(field_list:tensorflow.DebugOptions.debug_tensor_watch_opts)
  return debug_tensor_watch_opts_;
}

// optional int64 global_step = 10;
void DebugOptions::clear_global_step() {
  global_step_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DebugOptions::global_step() const {
  // @@protoc_insertion_point(field_get:tensorflow.DebugOptions.global_step)
  return global_step_;
}
void DebugOptions::set_global_step(::google::protobuf::int64 value) {
  
  global_step_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DebugOptions.global_step)
}

inline const DebugOptions* DebugOptions::internal_default_instance() {
  return &DebugOptions_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
