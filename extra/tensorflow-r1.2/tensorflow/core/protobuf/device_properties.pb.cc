// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/device_properties.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/device_properties.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* DeviceProperties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceProperties_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceProperties_EnvironmentEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/device_properties.proto");
  GOOGLE_CHECK(file != NULL);
  DeviceProperties_descriptor_ = file->message_type(0);
  static const int DeviceProperties_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, vendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, num_cores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, environment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, num_registers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, l1_cache_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, l2_cache_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, l3_cache_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, shared_memory_size_per_multiprocessor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, memory_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, bandwidth_),
  };
  DeviceProperties_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceProperties_descriptor_,
      DeviceProperties::internal_default_instance(),
      DeviceProperties_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeviceProperties),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceProperties, _internal_metadata_));
  DeviceProperties_EnvironmentEntry_descriptor_ = DeviceProperties_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceProperties_descriptor_, DeviceProperties::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        DeviceProperties_EnvironmentEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                DeviceProperties_EnvironmentEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto() {
  DeviceProperties_default_instance_.Shutdown();
  delete DeviceProperties_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  DeviceProperties_default_instance_.DefaultConstruct();
  DeviceProperties_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n0tensorflow/core/protobuf/device_proper"
    "ties.proto\022\ntensorflow\"\220\003\n\020DevicePropert"
    "ies\022\014\n\004type\030\001 \001(\t\022\016\n\006vendor\030\002 \001(\t\022\r\n\005mod"
    "el\030\003 \001(\t\022\021\n\tfrequency\030\004 \001(\003\022\021\n\tnum_cores"
    "\030\005 \001(\003\022B\n\013environment\030\006 \003(\0132-.tensorflow"
    ".DeviceProperties.EnvironmentEntry\022\025\n\rnu"
    "m_registers\030\007 \001(\003\022\025\n\rl1_cache_size\030\010 \001(\003"
    "\022\025\n\rl2_cache_size\030\t \001(\003\022\025\n\rl3_cache_size"
    "\030\n \001(\003\022-\n%shared_memory_size_per_multipr"
    "ocessor\030\013 \001(\003\022\023\n\013memory_size\030\014 \001(\003\022\021\n\tba"
    "ndwidth\030\r \001(\003\0322\n\020EnvironmentEntry\022\013\n\003key"
    "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\033B\026DevicePrope"
    "rtiesProtos\370\001\001b\006proto3", 502);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/device_properties.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceProperties::kTypeFieldNumber;
const int DeviceProperties::kVendorFieldNumber;
const int DeviceProperties::kModelFieldNumber;
const int DeviceProperties::kFrequencyFieldNumber;
const int DeviceProperties::kNumCoresFieldNumber;
const int DeviceProperties::kEnvironmentFieldNumber;
const int DeviceProperties::kNumRegistersFieldNumber;
const int DeviceProperties::kL1CacheSizeFieldNumber;
const int DeviceProperties::kL2CacheSizeFieldNumber;
const int DeviceProperties::kL3CacheSizeFieldNumber;
const int DeviceProperties::kSharedMemorySizePerMultiprocessorFieldNumber;
const int DeviceProperties::kMemorySizeFieldNumber;
const int DeviceProperties::kBandwidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceProperties::DeviceProperties()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeviceProperties)
}
DeviceProperties::DeviceProperties(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  environment_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeviceProperties)
}

void DeviceProperties::InitAsDefaultInstance() {
}

DeviceProperties::DeviceProperties(const DeviceProperties& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeviceProperties)
}

void DeviceProperties::SharedCtor() {
  environment_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  environment_.SetEntryDescriptor(
      &::tensorflow::DeviceProperties_EnvironmentEntry_descriptor_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_, 0, reinterpret_cast<char*>(&bandwidth_) -
    reinterpret_cast<char*>(&frequency_) + sizeof(bandwidth_));
  _cached_size_ = 0;
}

DeviceProperties::~DeviceProperties() {
  // @@protoc_insertion_point(destructor:tensorflow.DeviceProperties)
  SharedDtor();
}

void DeviceProperties::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  vendor_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  model_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeviceProperties::ArenaDtor(void* object) {
  DeviceProperties* _this = reinterpret_cast< DeviceProperties* >(object);
  (void)_this;
}
void DeviceProperties::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeviceProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceProperties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceProperties_descriptor_;
}

const DeviceProperties& DeviceProperties::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeviceProperties> DeviceProperties_default_instance_;

DeviceProperties* DeviceProperties::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeviceProperties>(arena);
}

void DeviceProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeviceProperties)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeviceProperties, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeviceProperties*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(frequency_, l1_cache_size_);
  type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  vendor_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ZR_(l2_cache_size_, bandwidth_);

#undef ZR_HELPER_
#undef ZR_

  environment_.Clear();
}

bool DeviceProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeviceProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeviceProperties.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vendor;
        break;
      }

      // optional string vendor = 2;
      case 2: {
        if (tag == 18) {
         parse_vendor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeviceProperties.vendor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // optional string model = 3;
      case 3: {
        if (tag == 26) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeviceProperties.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_frequency;
        break;
      }

      // optional int64 frequency = 4;
      case 4: {
        if (tag == 32) {
         parse_frequency:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_cores;
        break;
      }

      // optional int64 num_cores = 5;
      case 5: {
        if (tag == 40) {
         parse_num_cores:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_cores_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_environment;
        break;
      }

      // map<string, string> environment = 6;
      case 6: {
        if (tag == 50) {
         parse_environment:
          DO_(input->IncrementRecursionDepth());
         parse_loop_environment:
          DeviceProperties_EnvironmentEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&environment_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeviceProperties.EnvironmentEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeviceProperties.EnvironmentEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_environment;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_num_registers;
        break;
      }

      // optional int64 num_registers = 7;
      case 7: {
        if (tag == 56) {
         parse_num_registers:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_registers_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_l1_cache_size;
        break;
      }

      // optional int64 l1_cache_size = 8;
      case 8: {
        if (tag == 64) {
         parse_l1_cache_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &l1_cache_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_l2_cache_size;
        break;
      }

      // optional int64 l2_cache_size = 9;
      case 9: {
        if (tag == 72) {
         parse_l2_cache_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &l2_cache_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_l3_cache_size;
        break;
      }

      // optional int64 l3_cache_size = 10;
      case 10: {
        if (tag == 80) {
         parse_l3_cache_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &l3_cache_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_shared_memory_size_per_multiprocessor;
        break;
      }

      // optional int64 shared_memory_size_per_multiprocessor = 11;
      case 11: {
        if (tag == 88) {
         parse_shared_memory_size_per_multiprocessor:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shared_memory_size_per_multiprocessor_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_memory_size;
        break;
      }

      // optional int64 memory_size = 12;
      case 12: {
        if (tag == 96) {
         parse_memory_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memory_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_bandwidth;
        break;
      }

      // optional int64 bandwidth = 13;
      case 13: {
        if (tag == 104) {
         parse_bandwidth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bandwidth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeviceProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeviceProperties)
  return false;
#undef DO_
}

void DeviceProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeviceProperties)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceProperties.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string vendor = 2;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceProperties.vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vendor(), output);
  }

  // optional string model = 3;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceProperties.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model(), output);
  }

  // optional int64 frequency = 4;
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->frequency(), output);
  }

  // optional int64 num_cores = 5;
  if (this->num_cores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->num_cores(), output);
  }

  // map<string, string> environment = 6;
  if (!this->environment().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.DeviceProperties.EnvironmentEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.DeviceProperties.EnvironmentEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->environment().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->environment().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->environment().begin();
          it != this->environment().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<DeviceProperties_EnvironmentEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(environment_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<DeviceProperties_EnvironmentEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->environment().begin();
          it != this->environment().end(); ++it) {
        entry.reset(environment_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional int64 num_registers = 7;
  if (this->num_registers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->num_registers(), output);
  }

  // optional int64 l1_cache_size = 8;
  if (this->l1_cache_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->l1_cache_size(), output);
  }

  // optional int64 l2_cache_size = 9;
  if (this->l2_cache_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->l2_cache_size(), output);
  }

  // optional int64 l3_cache_size = 10;
  if (this->l3_cache_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->l3_cache_size(), output);
  }

  // optional int64 shared_memory_size_per_multiprocessor = 11;
  if (this->shared_memory_size_per_multiprocessor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->shared_memory_size_per_multiprocessor(), output);
  }

  // optional int64 memory_size = 12;
  if (this->memory_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->memory_size(), output);
  }

  // optional int64 bandwidth = 13;
  if (this->bandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->bandwidth(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.DeviceProperties)
}

::google::protobuf::uint8* DeviceProperties::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeviceProperties)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceProperties.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string vendor = 2;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceProperties.vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vendor(), target);
  }

  // optional string model = 3;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceProperties.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // optional int64 frequency = 4;
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->frequency(), target);
  }

  // optional int64 num_cores = 5;
  if (this->num_cores() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->num_cores(), target);
  }

  // map<string, string> environment = 6;
  if (!this->environment().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.DeviceProperties.EnvironmentEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.DeviceProperties.EnvironmentEntry.value");
      }
    };

    if (deterministic &&
        this->environment().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->environment().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->environment().begin();
          it != this->environment().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<DeviceProperties_EnvironmentEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(environment_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<DeviceProperties_EnvironmentEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->environment().begin();
          it != this->environment().end(); ++it) {
        entry.reset(environment_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional int64 num_registers = 7;
  if (this->num_registers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->num_registers(), target);
  }

  // optional int64 l1_cache_size = 8;
  if (this->l1_cache_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->l1_cache_size(), target);
  }

  // optional int64 l2_cache_size = 9;
  if (this->l2_cache_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->l2_cache_size(), target);
  }

  // optional int64 l3_cache_size = 10;
  if (this->l3_cache_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->l3_cache_size(), target);
  }

  // optional int64 shared_memory_size_per_multiprocessor = 11;
  if (this->shared_memory_size_per_multiprocessor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->shared_memory_size_per_multiprocessor(), target);
  }

  // optional int64 memory_size = 12;
  if (this->memory_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->memory_size(), target);
  }

  // optional int64 bandwidth = 13;
  if (this->bandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->bandwidth(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeviceProperties)
  return target;
}

size_t DeviceProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeviceProperties)
  size_t total_size = 0;

  // optional string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string vendor = 2;
  if (this->vendor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vendor());
  }

  // optional string model = 3;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // optional int64 frequency = 4;
  if (this->frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frequency());
  }

  // optional int64 num_cores = 5;
  if (this->num_cores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_cores());
  }

  // optional int64 num_registers = 7;
  if (this->num_registers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_registers());
  }

  // optional int64 l1_cache_size = 8;
  if (this->l1_cache_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->l1_cache_size());
  }

  // optional int64 l2_cache_size = 9;
  if (this->l2_cache_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->l2_cache_size());
  }

  // optional int64 l3_cache_size = 10;
  if (this->l3_cache_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->l3_cache_size());
  }

  // optional int64 shared_memory_size_per_multiprocessor = 11;
  if (this->shared_memory_size_per_multiprocessor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shared_memory_size_per_multiprocessor());
  }

  // optional int64 memory_size = 12;
  if (this->memory_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->memory_size());
  }

  // optional int64 bandwidth = 13;
  if (this->bandwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bandwidth());
  }

  // map<string, string> environment = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->environment_size());
  {
    ::google::protobuf::scoped_ptr<DeviceProperties_EnvironmentEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->environment().begin();
        it != this->environment().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(environment_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceProperties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeviceProperties)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeviceProperties* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceProperties>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeviceProperties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeviceProperties)
    UnsafeMergeFrom(*source);
  }
}

void DeviceProperties::MergeFrom(const DeviceProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeviceProperties)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeviceProperties::UnsafeMergeFrom(const DeviceProperties& from) {
  GOOGLE_DCHECK(&from != this);
  environment_.MergeFrom(from.environment_);
  if (from.type().size() > 0) {
    set_type(from.type());
  }
  if (from.vendor().size() > 0) {
    set_vendor(from.vendor());
  }
  if (from.model().size() > 0) {
    set_model(from.model());
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
  if (from.num_cores() != 0) {
    set_num_cores(from.num_cores());
  }
  if (from.num_registers() != 0) {
    set_num_registers(from.num_registers());
  }
  if (from.l1_cache_size() != 0) {
    set_l1_cache_size(from.l1_cache_size());
  }
  if (from.l2_cache_size() != 0) {
    set_l2_cache_size(from.l2_cache_size());
  }
  if (from.l3_cache_size() != 0) {
    set_l3_cache_size(from.l3_cache_size());
  }
  if (from.shared_memory_size_per_multiprocessor() != 0) {
    set_shared_memory_size_per_multiprocessor(from.shared_memory_size_per_multiprocessor());
  }
  if (from.memory_size() != 0) {
    set_memory_size(from.memory_size());
  }
  if (from.bandwidth() != 0) {
    set_bandwidth(from.bandwidth());
  }
}

void DeviceProperties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeviceProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceProperties::CopyFrom(const DeviceProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeviceProperties)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeviceProperties::IsInitialized() const {

  return true;
}

void DeviceProperties::Swap(DeviceProperties* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeviceProperties temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeviceProperties::UnsafeArenaSwap(DeviceProperties* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeviceProperties::InternalSwap(DeviceProperties* other) {
  type_.Swap(&other->type_);
  vendor_.Swap(&other->vendor_);
  model_.Swap(&other->model_);
  std::swap(frequency_, other->frequency_);
  std::swap(num_cores_, other->num_cores_);
  environment_.Swap(&other->environment_);
  std::swap(num_registers_, other->num_registers_);
  std::swap(l1_cache_size_, other->l1_cache_size_);
  std::swap(l2_cache_size_, other->l2_cache_size_);
  std::swap(l3_cache_size_, other->l3_cache_size_);
  std::swap(shared_memory_size_per_multiprocessor_, other->shared_memory_size_per_multiprocessor_);
  std::swap(memory_size_, other->memory_size_);
  std::swap(bandwidth_, other->bandwidth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceProperties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceProperties_descriptor_;
  metadata.reflection = DeviceProperties_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceProperties

// optional string type = 1;
void DeviceProperties::clear_type() {
  type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeviceProperties::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.type)
  return type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceProperties::set_type(const ::std::string& value) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.type)
}
void DeviceProperties::set_type(const char* value) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeviceProperties.type)
}
void DeviceProperties::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeviceProperties.type)
}
::std::string* DeviceProperties::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceProperties.type)
  return type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceProperties::release_type() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceProperties.type)
  
  return type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceProperties::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeviceProperties.type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeviceProperties::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceProperties.type)
}
void DeviceProperties::unsafe_arena_set_allocated_type(
    ::std::string* type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (type != NULL) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeviceProperties.type)
}

// optional string vendor = 2;
void DeviceProperties::clear_vendor() {
  vendor_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeviceProperties::vendor() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.vendor)
  return vendor_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceProperties::set_vendor(const ::std::string& value) {
  
  vendor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.vendor)
}
void DeviceProperties::set_vendor(const char* value) {
  
  vendor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeviceProperties.vendor)
}
void DeviceProperties::set_vendor(const char* value,
    size_t size) {
  
  vendor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeviceProperties.vendor)
}
::std::string* DeviceProperties::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceProperties.vendor)
  return vendor_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceProperties::release_vendor() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceProperties.vendor)
  
  return vendor_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceProperties::unsafe_arena_release_vendor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeviceProperties.vendor)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return vendor_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeviceProperties::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceProperties.vendor)
}
void DeviceProperties::unsafe_arena_set_allocated_vendor(
    ::std::string* vendor) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      vendor, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeviceProperties.vendor)
}

// optional string model = 3;
void DeviceProperties::clear_model() {
  model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeviceProperties::model() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.model)
  return model_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceProperties::set_model(const ::std::string& value) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.model)
}
void DeviceProperties::set_model(const char* value) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeviceProperties.model)
}
void DeviceProperties::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeviceProperties.model)
}
::std::string* DeviceProperties::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceProperties.model)
  return model_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceProperties::release_model() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceProperties.model)
  
  return model_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceProperties::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeviceProperties.model)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return model_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeviceProperties::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceProperties.model)
}
void DeviceProperties::unsafe_arena_set_allocated_model(
    ::std::string* model) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (model != NULL) {
    
  } else {
    
  }
  model_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      model, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeviceProperties.model)
}

// optional int64 frequency = 4;
void DeviceProperties::clear_frequency() {
  frequency_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DeviceProperties::frequency() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.frequency)
  return frequency_;
}
void DeviceProperties::set_frequency(::google::protobuf::int64 value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.frequency)
}

// optional int64 num_cores = 5;
void DeviceProperties::clear_num_cores() {
  num_cores_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DeviceProperties::num_cores() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.num_cores)
  return num_cores_;
}
void DeviceProperties::set_num_cores(::google::protobuf::int64 value) {
  
  num_cores_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.num_cores)
}

// map<string, string> environment = 6;
int DeviceProperties::environment_size() const {
  return environment_.size();
}
void DeviceProperties::clear_environment() {
  environment_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
DeviceProperties::environment() const {
  // @@protoc_insertion_point(field_map:tensorflow.DeviceProperties.environment)
  return environment_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
DeviceProperties::mutable_environment() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.DeviceProperties.environment)
  return environment_.MutableMap();
}

// optional int64 num_registers = 7;
void DeviceProperties::clear_num_registers() {
  num_registers_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DeviceProperties::num_registers() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.num_registers)
  return num_registers_;
}
void DeviceProperties::set_num_registers(::google::protobuf::int64 value) {
  
  num_registers_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.num_registers)
}

// optional int64 l1_cache_size = 8;
void DeviceProperties::clear_l1_cache_size() {
  l1_cache_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DeviceProperties::l1_cache_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.l1_cache_size)
  return l1_cache_size_;
}
void DeviceProperties::set_l1_cache_size(::google::protobuf::int64 value) {
  
  l1_cache_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.l1_cache_size)
}

// optional int64 l2_cache_size = 9;
void DeviceProperties::clear_l2_cache_size() {
  l2_cache_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DeviceProperties::l2_cache_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.l2_cache_size)
  return l2_cache_size_;
}
void DeviceProperties::set_l2_cache_size(::google::protobuf::int64 value) {
  
  l2_cache_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.l2_cache_size)
}

// optional int64 l3_cache_size = 10;
void DeviceProperties::clear_l3_cache_size() {
  l3_cache_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DeviceProperties::l3_cache_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.l3_cache_size)
  return l3_cache_size_;
}
void DeviceProperties::set_l3_cache_size(::google::protobuf::int64 value) {
  
  l3_cache_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.l3_cache_size)
}

// optional int64 shared_memory_size_per_multiprocessor = 11;
void DeviceProperties::clear_shared_memory_size_per_multiprocessor() {
  shared_memory_size_per_multiprocessor_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DeviceProperties::shared_memory_size_per_multiprocessor() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.shared_memory_size_per_multiprocessor)
  return shared_memory_size_per_multiprocessor_;
}
void DeviceProperties::set_shared_memory_size_per_multiprocessor(::google::protobuf::int64 value) {
  
  shared_memory_size_per_multiprocessor_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.shared_memory_size_per_multiprocessor)
}

// optional int64 memory_size = 12;
void DeviceProperties::clear_memory_size() {
  memory_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DeviceProperties::memory_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.memory_size)
  return memory_size_;
}
void DeviceProperties::set_memory_size(::google::protobuf::int64 value) {
  
  memory_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.memory_size)
}

// optional int64 bandwidth = 13;
void DeviceProperties::clear_bandwidth() {
  bandwidth_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DeviceProperties::bandwidth() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceProperties.bandwidth)
  return bandwidth_;
}
void DeviceProperties::set_bandwidth(::google::protobuf::int64 value) {
  
  bandwidth_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.DeviceProperties.bandwidth)
}

inline const DeviceProperties* DeviceProperties::internal_default_instance() {
  return &DeviceProperties_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
