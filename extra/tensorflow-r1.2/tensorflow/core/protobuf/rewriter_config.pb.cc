// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/rewriter_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/rewriter_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* AutoParallelOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoParallelOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewriterConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewriterConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RewriterConfig_MemOptType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/protobuf/rewriter_config.proto");
  GOOGLE_CHECK(file != NULL);
  AutoParallelOptions_descriptor_ = file->message_type(0);
  static const int AutoParallelOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoParallelOptions, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoParallelOptions, num_replicas_),
  };
  AutoParallelOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AutoParallelOptions_descriptor_,
      AutoParallelOptions::internal_default_instance(),
      AutoParallelOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(AutoParallelOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoParallelOptions, _internal_metadata_));
  RewriterConfig_descriptor_ = file->message_type(1);
  static const int RewriterConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, optimize_tensor_layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, disable_model_pruning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, constant_folding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, memory_optimization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, auto_parallel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, optimizers_),
  };
  RewriterConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RewriterConfig_descriptor_,
      RewriterConfig::internal_default_instance(),
      RewriterConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(RewriterConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, _internal_metadata_));
  RewriterConfig_MemOptType_descriptor_ = RewriterConfig_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AutoParallelOptions_descriptor_, AutoParallelOptions::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RewriterConfig_descriptor_, RewriterConfig::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  AutoParallelOptions_default_instance_.Shutdown();
  delete AutoParallelOptions_reflection_;
  RewriterConfig_default_instance_.Shutdown();
  delete RewriterConfig_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  AutoParallelOptions_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RewriterConfig_default_instance_.DefaultConstruct();
  AutoParallelOptions_default_instance_.get_mutable()->InitAsDefaultInstance();
  RewriterConfig_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.tensorflow/core/protobuf/rewriter_conf"
    "ig.proto\022\ntensorflow\";\n\023AutoParallelOpti"
    "ons\022\016\n\006enable\030\001 \001(\010\022\024\n\014num_replicas\030\002 \001("
    "\005\"\243\002\n\016RewriterConfig\022\036\n\026optimize_tensor_"
    "layout\030\001 \001(\010\022\035\n\025disable_model_pruning\030\002 "
    "\001(\010\022\030\n\020constant_folding\030\003 \001(\010\022B\n\023memory_"
    "optimization\030\004 \001(\0162%.tensorflow.Rewriter"
    "Config.MemOptType\0226\n\rauto_parallel\030\005 \001(\013"
    "2\037.tensorflow.AutoParallelOptions\022\022\n\nopt"
    "imizers\030d \003(\t\"(\n\nMemOptType\022\016\n\nNO_MEM_OP"
    "T\020\000\022\n\n\006MANUAL\020\001B5\n\030org.tensorflow.framew"
    "orkB\024RewriterConfigProtosP\001\370\001\001b\006proto3", 478);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/rewriter_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoParallelOptions::kEnableFieldNumber;
const int AutoParallelOptions::kNumReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoParallelOptions::AutoParallelOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AutoParallelOptions)
}
AutoParallelOptions::AutoParallelOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AutoParallelOptions)
}

void AutoParallelOptions::InitAsDefaultInstance() {
}

AutoParallelOptions::AutoParallelOptions(const AutoParallelOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutoParallelOptions)
}

void AutoParallelOptions::SharedCtor() {
  ::memset(&enable_, 0, reinterpret_cast<char*>(&num_replicas_) -
    reinterpret_cast<char*>(&enable_) + sizeof(num_replicas_));
  _cached_size_ = 0;
}

AutoParallelOptions::~AutoParallelOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.AutoParallelOptions)
  SharedDtor();
}

void AutoParallelOptions::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void AutoParallelOptions::ArenaDtor(void* object) {
  AutoParallelOptions* _this = reinterpret_cast< AutoParallelOptions* >(object);
  (void)_this;
}
void AutoParallelOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AutoParallelOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoParallelOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoParallelOptions_descriptor_;
}

const AutoParallelOptions& AutoParallelOptions::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AutoParallelOptions> AutoParallelOptions_default_instance_;

AutoParallelOptions* AutoParallelOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AutoParallelOptions>(arena);
}

void AutoParallelOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutoParallelOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AutoParallelOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AutoParallelOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enable_, num_replicas_);

#undef ZR_HELPER_
#undef ZR_

}

bool AutoParallelOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AutoParallelOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_replicas;
        break;
      }

      // optional int32 num_replicas = 2;
      case 2: {
        if (tag == 16) {
         parse_num_replicas:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_replicas_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AutoParallelOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AutoParallelOptions)
  return false;
#undef DO_
}

void AutoParallelOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AutoParallelOptions)
  // optional bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // optional int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_replicas(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.AutoParallelOptions)
}

::google::protobuf::uint8* AutoParallelOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutoParallelOptions)
  // optional bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // optional int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_replicas(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutoParallelOptions)
  return target;
}

size_t AutoParallelOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutoParallelOptions)
  size_t total_size = 0;

  // optional bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_replicas());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoParallelOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutoParallelOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AutoParallelOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoParallelOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutoParallelOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutoParallelOptions)
    UnsafeMergeFrom(*source);
  }
}

void AutoParallelOptions::MergeFrom(const AutoParallelOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutoParallelOptions)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AutoParallelOptions::UnsafeMergeFrom(const AutoParallelOptions& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.num_replicas() != 0) {
    set_num_replicas(from.num_replicas());
  }
}

void AutoParallelOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutoParallelOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoParallelOptions::CopyFrom(const AutoParallelOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutoParallelOptions)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AutoParallelOptions::IsInitialized() const {

  return true;
}

void AutoParallelOptions::Swap(AutoParallelOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AutoParallelOptions temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void AutoParallelOptions::UnsafeArenaSwap(AutoParallelOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AutoParallelOptions::InternalSwap(AutoParallelOptions* other) {
  std::swap(enable_, other->enable_);
  std::swap(num_replicas_, other->num_replicas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoParallelOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoParallelOptions_descriptor_;
  metadata.reflection = AutoParallelOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoParallelOptions

// optional bool enable = 1;
void AutoParallelOptions::clear_enable() {
  enable_ = false;
}
bool AutoParallelOptions::enable() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutoParallelOptions.enable)
  return enable_;
}
void AutoParallelOptions::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutoParallelOptions.enable)
}

// optional int32 num_replicas = 2;
void AutoParallelOptions::clear_num_replicas() {
  num_replicas_ = 0;
}
::google::protobuf::int32 AutoParallelOptions::num_replicas() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutoParallelOptions.num_replicas)
  return num_replicas_;
}
void AutoParallelOptions::set_num_replicas(::google::protobuf::int32 value) {
  
  num_replicas_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutoParallelOptions.num_replicas)
}

inline const AutoParallelOptions* AutoParallelOptions::internal_default_instance() {
  return &AutoParallelOptions_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* RewriterConfig_MemOptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewriterConfig_MemOptType_descriptor_;
}
bool RewriterConfig_MemOptType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RewriterConfig_MemOptType RewriterConfig::NO_MEM_OPT;
const RewriterConfig_MemOptType RewriterConfig::MANUAL;
const RewriterConfig_MemOptType RewriterConfig::MemOptType_MIN;
const RewriterConfig_MemOptType RewriterConfig::MemOptType_MAX;
const int RewriterConfig::MemOptType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
void RewriterConfig::_slow_mutable_auto_parallel() {
  auto_parallel_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::AutoParallelOptions >(
      GetArenaNoVirtual());
}
::tensorflow::AutoParallelOptions* RewriterConfig::_slow_release_auto_parallel() {
  if (auto_parallel_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::AutoParallelOptions* temp = new ::tensorflow::AutoParallelOptions(*auto_parallel_);
    auto_parallel_ = NULL;
    return temp;
  }
}
::tensorflow::AutoParallelOptions* RewriterConfig::unsafe_arena_release_auto_parallel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.auto_parallel)
  
  ::tensorflow::AutoParallelOptions* temp = auto_parallel_;
  auto_parallel_ = NULL;
  return temp;
}
void RewriterConfig::_slow_set_allocated_auto_parallel(
    ::google::protobuf::Arena* message_arena, ::tensorflow::AutoParallelOptions** auto_parallel) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*auto_parallel) == NULL) {
      message_arena->Own(*auto_parallel);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*auto_parallel)) {
      ::tensorflow::AutoParallelOptions* new_auto_parallel = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::AutoParallelOptions >(
            message_arena);
      new_auto_parallel->CopyFrom(**auto_parallel);
      *auto_parallel = new_auto_parallel;
    }
}
void RewriterConfig::unsafe_arena_set_allocated_auto_parallel(
    ::tensorflow::AutoParallelOptions* auto_parallel) {
  if (GetArenaNoVirtual() == NULL) {
    delete auto_parallel_;
  }
  auto_parallel_ = auto_parallel;
  if (auto_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.auto_parallel)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewriterConfig::kOptimizeTensorLayoutFieldNumber;
const int RewriterConfig::kDisableModelPruningFieldNumber;
const int RewriterConfig::kConstantFoldingFieldNumber;
const int RewriterConfig::kMemoryOptimizationFieldNumber;
const int RewriterConfig::kAutoParallelFieldNumber;
const int RewriterConfig::kOptimizersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewriterConfig::RewriterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RewriterConfig)
}
RewriterConfig::RewriterConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  optimizers_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RewriterConfig)
}

void RewriterConfig::InitAsDefaultInstance() {
  auto_parallel_ = const_cast< ::tensorflow::AutoParallelOptions*>(
      ::tensorflow::AutoParallelOptions::internal_default_instance());
}

RewriterConfig::RewriterConfig(const RewriterConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RewriterConfig)
}

void RewriterConfig::SharedCtor() {
  auto_parallel_ = NULL;
  ::memset(&optimize_tensor_layout_, 0, reinterpret_cast<char*>(&memory_optimization_) -
    reinterpret_cast<char*>(&optimize_tensor_layout_) + sizeof(memory_optimization_));
  _cached_size_ = 0;
}

RewriterConfig::~RewriterConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.RewriterConfig)
  SharedDtor();
}

void RewriterConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &RewriterConfig_default_instance_.get()) {
    delete auto_parallel_;
  }
}

void RewriterConfig::ArenaDtor(void* object) {
  RewriterConfig* _this = reinterpret_cast< RewriterConfig* >(object);
  (void)_this;
}
void RewriterConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RewriterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewriterConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewriterConfig_descriptor_;
}

const RewriterConfig& RewriterConfig::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RewriterConfig> RewriterConfig_default_instance_;

RewriterConfig* RewriterConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RewriterConfig>(arena);
}

void RewriterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RewriterConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RewriterConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RewriterConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(optimize_tensor_layout_, memory_optimization_);
  if (GetArenaNoVirtual() == NULL && auto_parallel_ != NULL) delete auto_parallel_;
  auto_parallel_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  optimizers_.Clear();
}

bool RewriterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RewriterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool optimize_tensor_layout = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optimize_tensor_layout_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_disable_model_pruning;
        break;
      }

      // optional bool disable_model_pruning = 2;
      case 2: {
        if (tag == 16) {
         parse_disable_model_pruning:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_model_pruning_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_constant_folding;
        break;
      }

      // optional bool constant_folding = 3;
      case 3: {
        if (tag == 24) {
         parse_constant_folding:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &constant_folding_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_memory_optimization;
        break;
      }

      // optional .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
      case 4: {
        if (tag == 32) {
         parse_memory_optimization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_memory_optimization(static_cast< ::tensorflow::RewriterConfig_MemOptType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_auto_parallel;
        break;
      }

      // optional .tensorflow.AutoParallelOptions auto_parallel = 5;
      case 5: {
        if (tag == 42) {
         parse_auto_parallel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_parallel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_optimizers;
        break;
      }

      // repeated string optimizers = 100;
      case 100: {
        if (tag == 802) {
         parse_optimizers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_optimizers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optimizers(this->optimizers_size() - 1).data(),
            this->optimizers(this->optimizers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.optimizers"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_optimizers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RewriterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RewriterConfig)
  return false;
#undef DO_
}

void RewriterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RewriterConfig)
  // optional bool optimize_tensor_layout = 1;
  if (this->optimize_tensor_layout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->optimize_tensor_layout(), output);
  }

  // optional bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->disable_model_pruning(), output);
  }

  // optional bool constant_folding = 3;
  if (this->constant_folding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->constant_folding(), output);
  }

  // optional .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->memory_optimization(), output);
  }

  // optional .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->auto_parallel_, output);
  }

  // repeated string optimizers = 100;
  for (int i = 0; i < this->optimizers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizers(i).data(), this->optimizers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.optimizers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->optimizers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RewriterConfig)
}

::google::protobuf::uint8* RewriterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RewriterConfig)
  // optional bool optimize_tensor_layout = 1;
  if (this->optimize_tensor_layout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->optimize_tensor_layout(), target);
  }

  // optional bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->disable_model_pruning(), target);
  }

  // optional bool constant_folding = 3;
  if (this->constant_folding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->constant_folding(), target);
  }

  // optional .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->memory_optimization(), target);
  }

  // optional .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->auto_parallel_, false, target);
  }

  // repeated string optimizers = 100;
  for (int i = 0; i < this->optimizers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizers(i).data(), this->optimizers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.optimizers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(100, this->optimizers(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RewriterConfig)
  return target;
}

size_t RewriterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RewriterConfig)
  size_t total_size = 0;

  // optional bool optimize_tensor_layout = 1;
  if (this->optimize_tensor_layout() != 0) {
    total_size += 1 + 1;
  }

  // optional bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    total_size += 1 + 1;
  }

  // optional bool constant_folding = 3;
  if (this->constant_folding() != 0) {
    total_size += 1 + 1;
  }

  // optional .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->memory_optimization());
  }

  // optional .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->auto_parallel_);
  }

  // repeated string optimizers = 100;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->optimizers_size());
  for (int i = 0; i < this->optimizers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->optimizers(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewriterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RewriterConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RewriterConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RewriterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RewriterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RewriterConfig)
    UnsafeMergeFrom(*source);
  }
}

void RewriterConfig::MergeFrom(const RewriterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RewriterConfig)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RewriterConfig::UnsafeMergeFrom(const RewriterConfig& from) {
  GOOGLE_DCHECK(&from != this);
  optimizers_.UnsafeMergeFrom(from.optimizers_);
  if (from.optimize_tensor_layout() != 0) {
    set_optimize_tensor_layout(from.optimize_tensor_layout());
  }
  if (from.disable_model_pruning() != 0) {
    set_disable_model_pruning(from.disable_model_pruning());
  }
  if (from.constant_folding() != 0) {
    set_constant_folding(from.constant_folding());
  }
  if (from.memory_optimization() != 0) {
    set_memory_optimization(from.memory_optimization());
  }
  if (from.has_auto_parallel()) {
    mutable_auto_parallel()->::tensorflow::AutoParallelOptions::MergeFrom(from.auto_parallel());
  }
}

void RewriterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RewriterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriterConfig::CopyFrom(const RewriterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RewriterConfig)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RewriterConfig::IsInitialized() const {

  return true;
}

void RewriterConfig::Swap(RewriterConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RewriterConfig temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RewriterConfig::UnsafeArenaSwap(RewriterConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RewriterConfig::InternalSwap(RewriterConfig* other) {
  std::swap(optimize_tensor_layout_, other->optimize_tensor_layout_);
  std::swap(disable_model_pruning_, other->disable_model_pruning_);
  std::swap(constant_folding_, other->constant_folding_);
  std::swap(memory_optimization_, other->memory_optimization_);
  std::swap(auto_parallel_, other->auto_parallel_);
  optimizers_.UnsafeArenaSwap(&other->optimizers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RewriterConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewriterConfig_descriptor_;
  metadata.reflection = RewriterConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RewriterConfig

// optional bool optimize_tensor_layout = 1;
void RewriterConfig::clear_optimize_tensor_layout() {
  optimize_tensor_layout_ = false;
}
bool RewriterConfig::optimize_tensor_layout() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.optimize_tensor_layout)
  return optimize_tensor_layout_;
}
void RewriterConfig::set_optimize_tensor_layout(bool value) {
  
  optimize_tensor_layout_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.optimize_tensor_layout)
}

// optional bool disable_model_pruning = 2;
void RewriterConfig::clear_disable_model_pruning() {
  disable_model_pruning_ = false;
}
bool RewriterConfig::disable_model_pruning() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.disable_model_pruning)
  return disable_model_pruning_;
}
void RewriterConfig::set_disable_model_pruning(bool value) {
  
  disable_model_pruning_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.disable_model_pruning)
}

// optional bool constant_folding = 3;
void RewriterConfig::clear_constant_folding() {
  constant_folding_ = false;
}
bool RewriterConfig::constant_folding() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.constant_folding)
  return constant_folding_;
}
void RewriterConfig::set_constant_folding(bool value) {
  
  constant_folding_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.constant_folding)
}

// optional .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
void RewriterConfig::clear_memory_optimization() {
  memory_optimization_ = 0;
}
::tensorflow::RewriterConfig_MemOptType RewriterConfig::memory_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.memory_optimization)
  return static_cast< ::tensorflow::RewriterConfig_MemOptType >(memory_optimization_);
}
void RewriterConfig::set_memory_optimization(::tensorflow::RewriterConfig_MemOptType value) {
  
  memory_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.memory_optimization)
}

// optional .tensorflow.AutoParallelOptions auto_parallel = 5;
bool RewriterConfig::has_auto_parallel() const {
  return this != internal_default_instance() && auto_parallel_ != NULL;
}
void RewriterConfig::clear_auto_parallel() {
  if (GetArenaNoVirtual() == NULL && auto_parallel_ != NULL) delete auto_parallel_;
  auto_parallel_ = NULL;
}
const ::tensorflow::AutoParallelOptions& RewriterConfig::auto_parallel() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_parallel)
  return auto_parallel_ != NULL ? *auto_parallel_
                         : *::tensorflow::AutoParallelOptions::internal_default_instance();
}
::tensorflow::AutoParallelOptions* RewriterConfig::mutable_auto_parallel() {
  
  if (auto_parallel_ == NULL) {
    _slow_mutable_auto_parallel();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.auto_parallel)
  return auto_parallel_;
}
::tensorflow::AutoParallelOptions* RewriterConfig::release_auto_parallel() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.auto_parallel)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_auto_parallel();
  } else {
    ::tensorflow::AutoParallelOptions* temp = auto_parallel_;
    auto_parallel_ = NULL;
    return temp;
  }
}
 void RewriterConfig::set_allocated_auto_parallel(::tensorflow::AutoParallelOptions* auto_parallel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete auto_parallel_;
  }
  if (auto_parallel != NULL) {
    _slow_set_allocated_auto_parallel(message_arena, &auto_parallel);
  }
  auto_parallel_ = auto_parallel;
  if (auto_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.auto_parallel)
}

// repeated string optimizers = 100;
int RewriterConfig::optimizers_size() const {
  return optimizers_.size();
}
void RewriterConfig::clear_optimizers() {
  optimizers_.Clear();
}
const ::std::string& RewriterConfig::optimizers(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Get(index);
}
::std::string* RewriterConfig::mutable_optimizers(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Mutable(index);
}
void RewriterConfig::set_optimizers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.optimizers)
  optimizers_.Mutable(index)->assign(value);
}
void RewriterConfig::set_optimizers(int index, const char* value) {
  optimizers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.RewriterConfig.optimizers)
}
void RewriterConfig::set_optimizers(int index, const char* value, size_t size) {
  optimizers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RewriterConfig.optimizers)
}
::std::string* RewriterConfig::add_optimizers() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Add();
}
void RewriterConfig::add_optimizers(const ::std::string& value) {
  optimizers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.RewriterConfig.optimizers)
}
void RewriterConfig::add_optimizers(const char* value) {
  optimizers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.RewriterConfig.optimizers)
}
void RewriterConfig::add_optimizers(const char* value, size_t size) {
  optimizers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.RewriterConfig.optimizers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RewriterConfig::optimizers() const {
  // @@protoc_insertion_point(field_list:tensorflow.RewriterConfig.optimizers)
  return optimizers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RewriterConfig::mutable_optimizers() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RewriterConfig.optimizers)
  return &optimizers_;
}

inline const RewriterConfig* RewriterConfig::internal_default_instance() {
  return &RewriterConfig_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
