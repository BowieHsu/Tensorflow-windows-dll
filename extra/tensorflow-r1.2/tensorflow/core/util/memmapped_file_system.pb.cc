// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/util/memmapped_file_system.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/util/memmapped_file_system.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* MemmappedFileSystemDirectoryElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemmappedFileSystemDirectoryElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemmappedFileSystemDirectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemmappedFileSystemDirectory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/util/memmapped_file_system.proto");
  GOOGLE_CHECK(file != NULL);
  MemmappedFileSystemDirectoryElement_descriptor_ = file->message_type(0);
  static const int MemmappedFileSystemDirectoryElement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemmappedFileSystemDirectoryElement, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemmappedFileSystemDirectoryElement, name_),
  };
  MemmappedFileSystemDirectoryElement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemmappedFileSystemDirectoryElement_descriptor_,
      MemmappedFileSystemDirectoryElement::internal_default_instance(),
      MemmappedFileSystemDirectoryElement_offsets_,
      -1,
      -1,
      -1,
      sizeof(MemmappedFileSystemDirectoryElement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemmappedFileSystemDirectoryElement, _internal_metadata_));
  MemmappedFileSystemDirectory_descriptor_ = file->message_type(1);
  static const int MemmappedFileSystemDirectory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemmappedFileSystemDirectory, element_),
  };
  MemmappedFileSystemDirectory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemmappedFileSystemDirectory_descriptor_,
      MemmappedFileSystemDirectory::internal_default_instance(),
      MemmappedFileSystemDirectory_offsets_,
      -1,
      -1,
      -1,
      sizeof(MemmappedFileSystemDirectory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemmappedFileSystemDirectory, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemmappedFileSystemDirectoryElement_descriptor_, MemmappedFileSystemDirectoryElement::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemmappedFileSystemDirectory_descriptor_, MemmappedFileSystemDirectory::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto() {
  MemmappedFileSystemDirectoryElement_default_instance_.Shutdown();
  delete MemmappedFileSystemDirectoryElement_reflection_;
  MemmappedFileSystemDirectory_default_instance_.Shutdown();
  delete MemmappedFileSystemDirectory_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  MemmappedFileSystemDirectoryElement_default_instance_.DefaultConstruct();
  MemmappedFileSystemDirectory_default_instance_.DefaultConstruct();
  MemmappedFileSystemDirectoryElement_default_instance_.get_mutable()->InitAsDefaultInstance();
  MemmappedFileSystemDirectory_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n0tensorflow/core/util/memmapped_file_sy"
    "stem.proto\022\ntensorflow\"C\n#MemmappedFileS"
    "ystemDirectoryElement\022\016\n\006offset\030\001 \001(\004\022\014\n"
    "\004name\030\002 \001(\t\"`\n\034MemmappedFileSystemDirect"
    "ory\022@\n\007element\030\001 \003(\0132/.tensorflow.Memmap"
    "pedFileSystemDirectoryElementB\003\370\001\001b\006prot"
    "o3", 242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/util/memmapped_file_system.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemmappedFileSystemDirectoryElement::kOffsetFieldNumber;
const int MemmappedFileSystemDirectoryElement::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemmappedFileSystemDirectoryElement::MemmappedFileSystemDirectoryElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemmappedFileSystemDirectoryElement)
}
MemmappedFileSystemDirectoryElement::MemmappedFileSystemDirectoryElement(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemmappedFileSystemDirectoryElement)
}

void MemmappedFileSystemDirectoryElement::InitAsDefaultInstance() {
}

MemmappedFileSystemDirectoryElement::MemmappedFileSystemDirectoryElement(const MemmappedFileSystemDirectoryElement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemmappedFileSystemDirectoryElement)
}

void MemmappedFileSystemDirectoryElement::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

MemmappedFileSystemDirectoryElement::~MemmappedFileSystemDirectoryElement() {
  // @@protoc_insertion_point(destructor:tensorflow.MemmappedFileSystemDirectoryElement)
  SharedDtor();
}

void MemmappedFileSystemDirectoryElement::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void MemmappedFileSystemDirectoryElement::ArenaDtor(void* object) {
  MemmappedFileSystemDirectoryElement* _this = reinterpret_cast< MemmappedFileSystemDirectoryElement* >(object);
  (void)_this;
}
void MemmappedFileSystemDirectoryElement::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MemmappedFileSystemDirectoryElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemmappedFileSystemDirectoryElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemmappedFileSystemDirectoryElement_descriptor_;
}

const MemmappedFileSystemDirectoryElement& MemmappedFileSystemDirectoryElement::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MemmappedFileSystemDirectoryElement> MemmappedFileSystemDirectoryElement_default_instance_;

MemmappedFileSystemDirectoryElement* MemmappedFileSystemDirectoryElement::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MemmappedFileSystemDirectoryElement>(arena);
}

void MemmappedFileSystemDirectoryElement::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemmappedFileSystemDirectoryElement)
  offset_ = GOOGLE_ULONGLONG(0);
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool MemmappedFileSystemDirectoryElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemmappedFileSystemDirectoryElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 offset = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MemmappedFileSystemDirectoryElement.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemmappedFileSystemDirectoryElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemmappedFileSystemDirectoryElement)
  return false;
#undef DO_
}

void MemmappedFileSystemDirectoryElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemmappedFileSystemDirectoryElement)
  // optional uint64 offset = 1;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->offset(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemmappedFileSystemDirectoryElement.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MemmappedFileSystemDirectoryElement)
}

::google::protobuf::uint8* MemmappedFileSystemDirectoryElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemmappedFileSystemDirectoryElement)
  // optional uint64 offset = 1;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->offset(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemmappedFileSystemDirectoryElement.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemmappedFileSystemDirectoryElement)
  return target;
}

size_t MemmappedFileSystemDirectoryElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemmappedFileSystemDirectoryElement)
  size_t total_size = 0;

  // optional uint64 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemmappedFileSystemDirectoryElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemmappedFileSystemDirectoryElement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MemmappedFileSystemDirectoryElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemmappedFileSystemDirectoryElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemmappedFileSystemDirectoryElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemmappedFileSystemDirectoryElement)
    UnsafeMergeFrom(*source);
  }
}

void MemmappedFileSystemDirectoryElement::MergeFrom(const MemmappedFileSystemDirectoryElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemmappedFileSystemDirectoryElement)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MemmappedFileSystemDirectoryElement::UnsafeMergeFrom(const MemmappedFileSystemDirectoryElement& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void MemmappedFileSystemDirectoryElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemmappedFileSystemDirectoryElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemmappedFileSystemDirectoryElement::CopyFrom(const MemmappedFileSystemDirectoryElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemmappedFileSystemDirectoryElement)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MemmappedFileSystemDirectoryElement::IsInitialized() const {

  return true;
}

void MemmappedFileSystemDirectoryElement::Swap(MemmappedFileSystemDirectoryElement* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemmappedFileSystemDirectoryElement temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void MemmappedFileSystemDirectoryElement::UnsafeArenaSwap(MemmappedFileSystemDirectoryElement* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemmappedFileSystemDirectoryElement::InternalSwap(MemmappedFileSystemDirectoryElement* other) {
  std::swap(offset_, other->offset_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemmappedFileSystemDirectoryElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemmappedFileSystemDirectoryElement_descriptor_;
  metadata.reflection = MemmappedFileSystemDirectoryElement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemmappedFileSystemDirectoryElement

// optional uint64 offset = 1;
void MemmappedFileSystemDirectoryElement::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MemmappedFileSystemDirectoryElement::offset() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemmappedFileSystemDirectoryElement.offset)
  return offset_;
}
void MemmappedFileSystemDirectoryElement::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemmappedFileSystemDirectoryElement.offset)
}

// optional string name = 2;
void MemmappedFileSystemDirectoryElement::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MemmappedFileSystemDirectoryElement::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemmappedFileSystemDirectoryElement.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MemmappedFileSystemDirectoryElement::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemmappedFileSystemDirectoryElement.name)
}
void MemmappedFileSystemDirectoryElement::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemmappedFileSystemDirectoryElement.name)
}
void MemmappedFileSystemDirectoryElement::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemmappedFileSystemDirectoryElement.name)
}
::std::string* MemmappedFileSystemDirectoryElement::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemmappedFileSystemDirectoryElement.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemmappedFileSystemDirectoryElement::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemmappedFileSystemDirectoryElement.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MemmappedFileSystemDirectoryElement::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemmappedFileSystemDirectoryElement.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MemmappedFileSystemDirectoryElement::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemmappedFileSystemDirectoryElement.name)
}
void MemmappedFileSystemDirectoryElement::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemmappedFileSystemDirectoryElement.name)
}

inline const MemmappedFileSystemDirectoryElement* MemmappedFileSystemDirectoryElement::internal_default_instance() {
  return &MemmappedFileSystemDirectoryElement_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemmappedFileSystemDirectory::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemmappedFileSystemDirectory::MemmappedFileSystemDirectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemmappedFileSystemDirectory)
}
MemmappedFileSystemDirectory::MemmappedFileSystemDirectory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  element_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemmappedFileSystemDirectory)
}

void MemmappedFileSystemDirectory::InitAsDefaultInstance() {
}

MemmappedFileSystemDirectory::MemmappedFileSystemDirectory(const MemmappedFileSystemDirectory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemmappedFileSystemDirectory)
}

void MemmappedFileSystemDirectory::SharedCtor() {
  _cached_size_ = 0;
}

MemmappedFileSystemDirectory::~MemmappedFileSystemDirectory() {
  // @@protoc_insertion_point(destructor:tensorflow.MemmappedFileSystemDirectory)
  SharedDtor();
}

void MemmappedFileSystemDirectory::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void MemmappedFileSystemDirectory::ArenaDtor(void* object) {
  MemmappedFileSystemDirectory* _this = reinterpret_cast< MemmappedFileSystemDirectory* >(object);
  (void)_this;
}
void MemmappedFileSystemDirectory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MemmappedFileSystemDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemmappedFileSystemDirectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemmappedFileSystemDirectory_descriptor_;
}

const MemmappedFileSystemDirectory& MemmappedFileSystemDirectory::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fmemmapped_5ffile_5fsystem_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MemmappedFileSystemDirectory> MemmappedFileSystemDirectory_default_instance_;

MemmappedFileSystemDirectory* MemmappedFileSystemDirectory::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MemmappedFileSystemDirectory>(arena);
}

void MemmappedFileSystemDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemmappedFileSystemDirectory)
  element_.Clear();
}

bool MemmappedFileSystemDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemmappedFileSystemDirectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.MemmappedFileSystemDirectoryElement element = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_element;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemmappedFileSystemDirectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemmappedFileSystemDirectory)
  return false;
#undef DO_
}

void MemmappedFileSystemDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemmappedFileSystemDirectory)
  // repeated .tensorflow.MemmappedFileSystemDirectoryElement element = 1;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MemmappedFileSystemDirectory)
}

::google::protobuf::uint8* MemmappedFileSystemDirectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemmappedFileSystemDirectory)
  // repeated .tensorflow.MemmappedFileSystemDirectoryElement element = 1;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->element(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemmappedFileSystemDirectory)
  return target;
}

size_t MemmappedFileSystemDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemmappedFileSystemDirectory)
  size_t total_size = 0;

  // repeated .tensorflow.MemmappedFileSystemDirectoryElement element = 1;
  {
    unsigned int count = this->element_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->element(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemmappedFileSystemDirectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemmappedFileSystemDirectory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MemmappedFileSystemDirectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemmappedFileSystemDirectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemmappedFileSystemDirectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemmappedFileSystemDirectory)
    UnsafeMergeFrom(*source);
  }
}

void MemmappedFileSystemDirectory::MergeFrom(const MemmappedFileSystemDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemmappedFileSystemDirectory)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MemmappedFileSystemDirectory::UnsafeMergeFrom(const MemmappedFileSystemDirectory& from) {
  GOOGLE_DCHECK(&from != this);
  element_.MergeFrom(from.element_);
}

void MemmappedFileSystemDirectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemmappedFileSystemDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemmappedFileSystemDirectory::CopyFrom(const MemmappedFileSystemDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemmappedFileSystemDirectory)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MemmappedFileSystemDirectory::IsInitialized() const {

  return true;
}

void MemmappedFileSystemDirectory::Swap(MemmappedFileSystemDirectory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemmappedFileSystemDirectory temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void MemmappedFileSystemDirectory::UnsafeArenaSwap(MemmappedFileSystemDirectory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemmappedFileSystemDirectory::InternalSwap(MemmappedFileSystemDirectory* other) {
  element_.UnsafeArenaSwap(&other->element_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemmappedFileSystemDirectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemmappedFileSystemDirectory_descriptor_;
  metadata.reflection = MemmappedFileSystemDirectory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemmappedFileSystemDirectory

// repeated .tensorflow.MemmappedFileSystemDirectoryElement element = 1;
int MemmappedFileSystemDirectory::element_size() const {
  return element_.size();
}
void MemmappedFileSystemDirectory::clear_element() {
  element_.Clear();
}
const ::tensorflow::MemmappedFileSystemDirectoryElement& MemmappedFileSystemDirectory::element(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.MemmappedFileSystemDirectory.element)
  return element_.Get(index);
}
::tensorflow::MemmappedFileSystemDirectoryElement* MemmappedFileSystemDirectory::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.MemmappedFileSystemDirectory.element)
  return element_.Mutable(index);
}
::tensorflow::MemmappedFileSystemDirectoryElement* MemmappedFileSystemDirectory::add_element() {
  // @@protoc_insertion_point(field_add:tensorflow.MemmappedFileSystemDirectory.element)
  return element_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::MemmappedFileSystemDirectoryElement >*
MemmappedFileSystemDirectory::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MemmappedFileSystemDirectory.element)
  return &element_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::MemmappedFileSystemDirectoryElement >&
MemmappedFileSystemDirectory::element() const {
  // @@protoc_insertion_point(field_list:tensorflow.MemmappedFileSystemDirectory.element)
  return element_;
}

inline const MemmappedFileSystemDirectory* MemmappedFileSystemDirectory::internal_default_instance() {
  return &MemmappedFileSystemDirectory_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
