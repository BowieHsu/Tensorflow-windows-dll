// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/util/saved_tensor_slice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/util/saved_tensor_slice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* SavedSliceMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavedSliceMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavedTensorSliceMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavedTensorSliceMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavedSlice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavedSlice_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavedTensorSlices_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavedTensorSlices_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/util/saved_tensor_slice.proto");
  GOOGLE_CHECK(file != NULL);
  SavedSliceMeta_descriptor_ = file->message_type(0);
  static const int SavedSliceMeta_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedSliceMeta, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedSliceMeta, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedSliceMeta, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedSliceMeta, slice_),
  };
  SavedSliceMeta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SavedSliceMeta_descriptor_,
      SavedSliceMeta::internal_default_instance(),
      SavedSliceMeta_offsets_,
      -1,
      -1,
      -1,
      sizeof(SavedSliceMeta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedSliceMeta, _internal_metadata_));
  SavedTensorSliceMeta_descriptor_ = file->message_type(1);
  static const int SavedTensorSliceMeta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedTensorSliceMeta, tensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedTensorSliceMeta, versions_),
  };
  SavedTensorSliceMeta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SavedTensorSliceMeta_descriptor_,
      SavedTensorSliceMeta::internal_default_instance(),
      SavedTensorSliceMeta_offsets_,
      -1,
      -1,
      -1,
      sizeof(SavedTensorSliceMeta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedTensorSliceMeta, _internal_metadata_));
  SavedSlice_descriptor_ = file->message_type(2);
  static const int SavedSlice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedSlice, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedSlice, slice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedSlice, data_),
  };
  SavedSlice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SavedSlice_descriptor_,
      SavedSlice::internal_default_instance(),
      SavedSlice_offsets_,
      -1,
      -1,
      -1,
      sizeof(SavedSlice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedSlice, _internal_metadata_));
  SavedTensorSlices_descriptor_ = file->message_type(3);
  static const int SavedTensorSlices_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedTensorSlices, meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedTensorSlices, data_),
  };
  SavedTensorSlices_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SavedTensorSlices_descriptor_,
      SavedTensorSlices::internal_default_instance(),
      SavedTensorSlices_offsets_,
      -1,
      -1,
      -1,
      sizeof(SavedTensorSlices),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedTensorSlices, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SavedSliceMeta_descriptor_, SavedSliceMeta::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SavedTensorSliceMeta_descriptor_, SavedTensorSliceMeta::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SavedSlice_descriptor_, SavedSlice::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SavedTensorSlices_descriptor_, SavedTensorSlices::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto() {
  SavedSliceMeta_default_instance_.Shutdown();
  delete SavedSliceMeta_reflection_;
  SavedTensorSliceMeta_default_instance_.Shutdown();
  delete SavedTensorSliceMeta_reflection_;
  SavedSlice_default_instance_.Shutdown();
  delete SavedSlice_reflection_;
  SavedTensorSlices_default_instance_.Shutdown();
  delete SavedTensorSlices_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto();
  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftensor_5fslice_2eproto();
  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fversions_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  SavedSliceMeta_default_instance_.DefaultConstruct();
  SavedTensorSliceMeta_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SavedSlice_default_instance_.DefaultConstruct();
  SavedTensorSlices_default_instance_.DefaultConstruct();
  SavedSliceMeta_default_instance_.get_mutable()->InitAsDefaultInstance();
  SavedTensorSliceMeta_default_instance_.get_mutable()->InitAsDefaultInstance();
  SavedSlice_default_instance_.get_mutable()->InitAsDefaultInstance();
  SavedTensorSlices_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-tensorflow/core/util/saved_tensor_slic"
    "e.proto\022\ntensorflow\032,tensorflow/core/fra"
    "mework/tensor_shape.proto\032,tensorflow/co"
    "re/framework/tensor_slice.proto\032&tensorf"
    "low/core/framework/tensor.proto\032%tensorf"
    "low/core/framework/types.proto\032(tensorfl"
    "ow/core/framework/versions.proto\"\234\001\n\016Sav"
    "edSliceMeta\022\014\n\004name\030\001 \001(\t\022+\n\005shape\030\002 \001(\013"
    "2\034.tensorflow.TensorShapeProto\022\"\n\004type\030\003"
    " \001(\0162\024.tensorflow.DataType\022+\n\005slice\030\004 \003("
    "\0132\034.tensorflow.TensorSliceProto\"l\n\024Saved"
    "TensorSliceMeta\022*\n\006tensor\030\001 \003(\0132\032.tensor"
    "flow.SavedSliceMeta\022(\n\010versions\030\002 \001(\0132\026."
    "tensorflow.VersionDef\"n\n\nSavedSlice\022\014\n\004n"
    "ame\030\001 \001(\t\022+\n\005slice\030\002 \001(\0132\034.tensorflow.Te"
    "nsorSliceProto\022%\n\004data\030\003 \001(\0132\027.tensorflo"
    "w.TensorProto\"i\n\021SavedTensorSlices\022.\n\004me"
    "ta\030\001 \001(\0132 .tensorflow.SavedTensorSliceMe"
    "ta\022$\n\004data\030\002 \001(\0132\026.tensorflow.SavedSlice"
    "B2\n\023org.tensorflow.utilB\026SavedTensorSlic"
    "eProtosP\001\370\001\001b\006proto3", 820);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/util/saved_tensor_slice.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_5fslice_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftypes_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fversions_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

void SavedSliceMeta::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorShapeProto* SavedSliceMeta::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorShapeProto* temp = new ::tensorflow::TensorShapeProto(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::tensorflow::TensorShapeProto* SavedSliceMeta::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SavedSliceMeta.shape)
  
  ::tensorflow::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
void SavedSliceMeta::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorShapeProto** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::tensorflow::TensorShapeProto* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void SavedSliceMeta::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedSliceMeta.shape)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SavedSliceMeta::kNameFieldNumber;
const int SavedSliceMeta::kShapeFieldNumber;
const int SavedSliceMeta::kTypeFieldNumber;
const int SavedSliceMeta::kSliceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SavedSliceMeta::SavedSliceMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SavedSliceMeta)
}
SavedSliceMeta::SavedSliceMeta(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  slice_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedSliceMeta)
}

void SavedSliceMeta::InitAsDefaultInstance() {
  shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
}

SavedSliceMeta::SavedSliceMeta(const SavedSliceMeta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedSliceMeta)
}

void SavedSliceMeta::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_ = NULL;
  type_ = 0;
  _cached_size_ = 0;
}

SavedSliceMeta::~SavedSliceMeta() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedSliceMeta)
  SharedDtor();
}

void SavedSliceMeta::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &SavedSliceMeta_default_instance_.get()) {
    delete shape_;
  }
}

void SavedSliceMeta::ArenaDtor(void* object) {
  SavedSliceMeta* _this = reinterpret_cast< SavedSliceMeta* >(object);
  (void)_this;
}
void SavedSliceMeta::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SavedSliceMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavedSliceMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavedSliceMeta_descriptor_;
}

const SavedSliceMeta& SavedSliceMeta::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SavedSliceMeta> SavedSliceMeta_default_instance_;

SavedSliceMeta* SavedSliceMeta::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SavedSliceMeta>(arena);
}

void SavedSliceMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedSliceMeta)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
  type_ = 0;
  slice_.Clear();
}

bool SavedSliceMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SavedSliceMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.SavedSliceMeta.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shape;
        break;
      }

      // optional .tensorflow.TensorShapeProto shape = 2;
      case 2: {
        if (tag == 18) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .tensorflow.DataType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_slice;
        break;
      }

      // repeated .tensorflow.TensorSliceProto slice = 4;
      case 4: {
        if (tag == 34) {
         parse_slice:
          DO_(input->IncrementRecursionDepth());
         parse_loop_slice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_slice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_slice;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SavedSliceMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SavedSliceMeta)
  return false;
#undef DO_
}

void SavedSliceMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SavedSliceMeta)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SavedSliceMeta.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shape_, output);
  }

  // optional .tensorflow.DataType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .tensorflow.TensorSliceProto slice = 4;
  for (unsigned int i = 0, n = this->slice_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->slice(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.SavedSliceMeta)
}

::google::protobuf::uint8* SavedSliceMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedSliceMeta)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SavedSliceMeta.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shape_, false, target);
  }

  // optional .tensorflow.DataType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .tensorflow.TensorSliceProto slice = 4;
  for (unsigned int i = 0, n = this->slice_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->slice(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedSliceMeta)
  return target;
}

size_t SavedSliceMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedSliceMeta)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  // optional .tensorflow.DataType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated .tensorflow.TensorSliceProto slice = 4;
  {
    unsigned int count = this->slice_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slice(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavedSliceMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SavedSliceMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SavedSliceMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SavedSliceMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SavedSliceMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SavedSliceMeta)
    UnsafeMergeFrom(*source);
  }
}

void SavedSliceMeta::MergeFrom(const SavedSliceMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedSliceMeta)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SavedSliceMeta::UnsafeMergeFrom(const SavedSliceMeta& from) {
  GOOGLE_DCHECK(&from != this);
  slice_.MergeFrom(from.slice_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_shape()) {
    mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from.shape());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SavedSliceMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SavedSliceMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedSliceMeta::CopyFrom(const SavedSliceMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedSliceMeta)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SavedSliceMeta::IsInitialized() const {

  return true;
}

void SavedSliceMeta::Swap(SavedSliceMeta* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SavedSliceMeta temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SavedSliceMeta::UnsafeArenaSwap(SavedSliceMeta* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SavedSliceMeta::InternalSwap(SavedSliceMeta* other) {
  name_.Swap(&other->name_);
  std::swap(shape_, other->shape_);
  std::swap(type_, other->type_);
  slice_.UnsafeArenaSwap(&other->slice_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SavedSliceMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavedSliceMeta_descriptor_;
  metadata.reflection = SavedSliceMeta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SavedSliceMeta

// optional string name = 1;
void SavedSliceMeta::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SavedSliceMeta::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedSliceMeta.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SavedSliceMeta::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.SavedSliceMeta.name)
}
void SavedSliceMeta::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.SavedSliceMeta.name)
}
void SavedSliceMeta::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SavedSliceMeta.name)
}
::std::string* SavedSliceMeta::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedSliceMeta.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SavedSliceMeta::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedSliceMeta.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SavedSliceMeta::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SavedSliceMeta.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SavedSliceMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedSliceMeta.name)
}
void SavedSliceMeta::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedSliceMeta.name)
}

// optional .tensorflow.TensorShapeProto shape = 2;
bool SavedSliceMeta::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void SavedSliceMeta::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::tensorflow::TensorShapeProto& SavedSliceMeta::shape() const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedSliceMeta.shape)
  return shape_ != NULL ? *shape_
                         : *::tensorflow::TensorShapeProto::internal_default_instance();
}
::tensorflow::TensorShapeProto* SavedSliceMeta::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedSliceMeta.shape)
  return shape_;
}
::tensorflow::TensorShapeProto* SavedSliceMeta::release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedSliceMeta.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::tensorflow::TensorShapeProto* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void SavedSliceMeta::set_allocated_shape(::tensorflow::TensorShapeProto* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedSliceMeta.shape)
}

// optional .tensorflow.DataType type = 3;
void SavedSliceMeta::clear_type() {
  type_ = 0;
}
::tensorflow::DataType SavedSliceMeta::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedSliceMeta.type)
  return static_cast< ::tensorflow::DataType >(type_);
}
void SavedSliceMeta::set_type(::tensorflow::DataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.SavedSliceMeta.type)
}

// repeated .tensorflow.TensorSliceProto slice = 4;
int SavedSliceMeta::slice_size() const {
  return slice_.size();
}
void SavedSliceMeta::clear_slice() {
  slice_.Clear();
}
const ::tensorflow::TensorSliceProto& SavedSliceMeta::slice(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedSliceMeta.slice)
  return slice_.Get(index);
}
::tensorflow::TensorSliceProto* SavedSliceMeta::mutable_slice(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedSliceMeta.slice)
  return slice_.Mutable(index);
}
::tensorflow::TensorSliceProto* SavedSliceMeta::add_slice() {
  // @@protoc_insertion_point(field_add:tensorflow.SavedSliceMeta.slice)
  return slice_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::TensorSliceProto >*
SavedSliceMeta::mutable_slice() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.SavedSliceMeta.slice)
  return &slice_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorSliceProto >&
SavedSliceMeta::slice() const {
  // @@protoc_insertion_point(field_list:tensorflow.SavedSliceMeta.slice)
  return slice_;
}

inline const SavedSliceMeta* SavedSliceMeta::internal_default_instance() {
  return &SavedSliceMeta_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SavedTensorSliceMeta::_slow_mutable_versions() {
  versions_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::VersionDef >(
      GetArenaNoVirtual());
}
::tensorflow::VersionDef* SavedTensorSliceMeta::_slow_release_versions() {
  if (versions_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::VersionDef* temp = new ::tensorflow::VersionDef(*versions_);
    versions_ = NULL;
    return temp;
  }
}
::tensorflow::VersionDef* SavedTensorSliceMeta::unsafe_arena_release_versions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SavedTensorSliceMeta.versions)
  
  ::tensorflow::VersionDef* temp = versions_;
  versions_ = NULL;
  return temp;
}
void SavedTensorSliceMeta::_slow_set_allocated_versions(
    ::google::protobuf::Arena* message_arena, ::tensorflow::VersionDef** versions) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*versions) == NULL) {
      message_arena->Own(*versions);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*versions)) {
      ::tensorflow::VersionDef* new_versions = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::VersionDef >(
            message_arena);
      new_versions->CopyFrom(**versions);
      *versions = new_versions;
    }
}
void SavedTensorSliceMeta::unsafe_arena_set_allocated_versions(
    ::tensorflow::VersionDef* versions) {
  if (GetArenaNoVirtual() == NULL) {
    delete versions_;
  }
  versions_ = versions;
  if (versions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedTensorSliceMeta.versions)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SavedTensorSliceMeta::kTensorFieldNumber;
const int SavedTensorSliceMeta::kVersionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SavedTensorSliceMeta::SavedTensorSliceMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SavedTensorSliceMeta)
}
SavedTensorSliceMeta::SavedTensorSliceMeta(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  tensor_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedTensorSliceMeta)
}

void SavedTensorSliceMeta::InitAsDefaultInstance() {
  versions_ = const_cast< ::tensorflow::VersionDef*>(
      ::tensorflow::VersionDef::internal_default_instance());
}

SavedTensorSliceMeta::SavedTensorSliceMeta(const SavedTensorSliceMeta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedTensorSliceMeta)
}

void SavedTensorSliceMeta::SharedCtor() {
  versions_ = NULL;
  _cached_size_ = 0;
}

SavedTensorSliceMeta::~SavedTensorSliceMeta() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedTensorSliceMeta)
  SharedDtor();
}

void SavedTensorSliceMeta::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &SavedTensorSliceMeta_default_instance_.get()) {
    delete versions_;
  }
}

void SavedTensorSliceMeta::ArenaDtor(void* object) {
  SavedTensorSliceMeta* _this = reinterpret_cast< SavedTensorSliceMeta* >(object);
  (void)_this;
}
void SavedTensorSliceMeta::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SavedTensorSliceMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavedTensorSliceMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavedTensorSliceMeta_descriptor_;
}

const SavedTensorSliceMeta& SavedTensorSliceMeta::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SavedTensorSliceMeta> SavedTensorSliceMeta_default_instance_;

SavedTensorSliceMeta* SavedTensorSliceMeta::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SavedTensorSliceMeta>(arena);
}

void SavedTensorSliceMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedTensorSliceMeta)
  if (GetArenaNoVirtual() == NULL && versions_ != NULL) delete versions_;
  versions_ = NULL;
  tensor_.Clear();
}

bool SavedTensorSliceMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SavedTensorSliceMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.SavedSliceMeta tensor = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tensor;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_versions;
        break;
      }

      // optional .tensorflow.VersionDef versions = 2;
      case 2: {
        if (tag == 18) {
         parse_versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_versions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SavedTensorSliceMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SavedTensorSliceMeta)
  return false;
#undef DO_
}

void SavedTensorSliceMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SavedTensorSliceMeta)
  // repeated .tensorflow.SavedSliceMeta tensor = 1;
  for (unsigned int i = 0, n = this->tensor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tensor(i), output);
  }

  // optional .tensorflow.VersionDef versions = 2;
  if (this->has_versions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->versions_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.SavedTensorSliceMeta)
}

::google::protobuf::uint8* SavedTensorSliceMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedTensorSliceMeta)
  // repeated .tensorflow.SavedSliceMeta tensor = 1;
  for (unsigned int i = 0, n = this->tensor_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tensor(i), false, target);
  }

  // optional .tensorflow.VersionDef versions = 2;
  if (this->has_versions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->versions_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedTensorSliceMeta)
  return target;
}

size_t SavedTensorSliceMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedTensorSliceMeta)
  size_t total_size = 0;

  // optional .tensorflow.VersionDef versions = 2;
  if (this->has_versions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->versions_);
  }

  // repeated .tensorflow.SavedSliceMeta tensor = 1;
  {
    unsigned int count = this->tensor_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tensor(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavedTensorSliceMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SavedTensorSliceMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SavedTensorSliceMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SavedTensorSliceMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SavedTensorSliceMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SavedTensorSliceMeta)
    UnsafeMergeFrom(*source);
  }
}

void SavedTensorSliceMeta::MergeFrom(const SavedTensorSliceMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedTensorSliceMeta)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SavedTensorSliceMeta::UnsafeMergeFrom(const SavedTensorSliceMeta& from) {
  GOOGLE_DCHECK(&from != this);
  tensor_.MergeFrom(from.tensor_);
  if (from.has_versions()) {
    mutable_versions()->::tensorflow::VersionDef::MergeFrom(from.versions());
  }
}

void SavedTensorSliceMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SavedTensorSliceMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedTensorSliceMeta::CopyFrom(const SavedTensorSliceMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedTensorSliceMeta)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SavedTensorSliceMeta::IsInitialized() const {

  return true;
}

void SavedTensorSliceMeta::Swap(SavedTensorSliceMeta* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SavedTensorSliceMeta temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SavedTensorSliceMeta::UnsafeArenaSwap(SavedTensorSliceMeta* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SavedTensorSliceMeta::InternalSwap(SavedTensorSliceMeta* other) {
  tensor_.UnsafeArenaSwap(&other->tensor_);
  std::swap(versions_, other->versions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SavedTensorSliceMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavedTensorSliceMeta_descriptor_;
  metadata.reflection = SavedTensorSliceMeta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SavedTensorSliceMeta

// repeated .tensorflow.SavedSliceMeta tensor = 1;
int SavedTensorSliceMeta::tensor_size() const {
  return tensor_.size();
}
void SavedTensorSliceMeta::clear_tensor() {
  tensor_.Clear();
}
const ::tensorflow::SavedSliceMeta& SavedTensorSliceMeta::tensor(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedTensorSliceMeta.tensor)
  return tensor_.Get(index);
}
::tensorflow::SavedSliceMeta* SavedTensorSliceMeta::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedTensorSliceMeta.tensor)
  return tensor_.Mutable(index);
}
::tensorflow::SavedSliceMeta* SavedTensorSliceMeta::add_tensor() {
  // @@protoc_insertion_point(field_add:tensorflow.SavedTensorSliceMeta.tensor)
  return tensor_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::SavedSliceMeta >*
SavedTensorSliceMeta::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.SavedTensorSliceMeta.tensor)
  return &tensor_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::SavedSliceMeta >&
SavedTensorSliceMeta::tensor() const {
  // @@protoc_insertion_point(field_list:tensorflow.SavedTensorSliceMeta.tensor)
  return tensor_;
}

// optional .tensorflow.VersionDef versions = 2;
bool SavedTensorSliceMeta::has_versions() const {
  return this != internal_default_instance() && versions_ != NULL;
}
void SavedTensorSliceMeta::clear_versions() {
  if (GetArenaNoVirtual() == NULL && versions_ != NULL) delete versions_;
  versions_ = NULL;
}
const ::tensorflow::VersionDef& SavedTensorSliceMeta::versions() const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedTensorSliceMeta.versions)
  return versions_ != NULL ? *versions_
                         : *::tensorflow::VersionDef::internal_default_instance();
}
::tensorflow::VersionDef* SavedTensorSliceMeta::mutable_versions() {
  
  if (versions_ == NULL) {
    _slow_mutable_versions();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedTensorSliceMeta.versions)
  return versions_;
}
::tensorflow::VersionDef* SavedTensorSliceMeta::release_versions() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedTensorSliceMeta.versions)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_versions();
  } else {
    ::tensorflow::VersionDef* temp = versions_;
    versions_ = NULL;
    return temp;
  }
}
 void SavedTensorSliceMeta::set_allocated_versions(::tensorflow::VersionDef* versions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete versions_;
  }
  if (versions != NULL) {
    _slow_set_allocated_versions(message_arena, &versions);
  }
  versions_ = versions;
  if (versions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedTensorSliceMeta.versions)
}

inline const SavedTensorSliceMeta* SavedTensorSliceMeta::internal_default_instance() {
  return &SavedTensorSliceMeta_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SavedSlice::_slow_mutable_slice() {
  slice_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorSliceProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorSliceProto* SavedSlice::_slow_release_slice() {
  if (slice_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorSliceProto* temp = new ::tensorflow::TensorSliceProto(*slice_);
    slice_ = NULL;
    return temp;
  }
}
::tensorflow::TensorSliceProto* SavedSlice::unsafe_arena_release_slice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SavedSlice.slice)
  
  ::tensorflow::TensorSliceProto* temp = slice_;
  slice_ = NULL;
  return temp;
}
void SavedSlice::_slow_set_allocated_slice(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorSliceProto** slice) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*slice) == NULL) {
      message_arena->Own(*slice);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*slice)) {
      ::tensorflow::TensorSliceProto* new_slice = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorSliceProto >(
            message_arena);
      new_slice->CopyFrom(**slice);
      *slice = new_slice;
    }
}
void SavedSlice::unsafe_arena_set_allocated_slice(
    ::tensorflow::TensorSliceProto* slice) {
  if (GetArenaNoVirtual() == NULL) {
    delete slice_;
  }
  slice_ = slice;
  if (slice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedSlice.slice)
}
void SavedSlice::_slow_mutable_data() {
  data_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorProto* SavedSlice::_slow_release_data() {
  if (data_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorProto* temp = new ::tensorflow::TensorProto(*data_);
    data_ = NULL;
    return temp;
  }
}
::tensorflow::TensorProto* SavedSlice::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SavedSlice.data)
  
  ::tensorflow::TensorProto* temp = data_;
  data_ = NULL;
  return temp;
}
void SavedSlice::_slow_set_allocated_data(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorProto** data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*data) == NULL) {
      message_arena->Own(*data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*data)) {
      ::tensorflow::TensorProto* new_data = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
            message_arena);
      new_data->CopyFrom(**data);
      *data = new_data;
    }
}
void SavedSlice::unsafe_arena_set_allocated_data(
    ::tensorflow::TensorProto* data) {
  if (GetArenaNoVirtual() == NULL) {
    delete data_;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedSlice.data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SavedSlice::kNameFieldNumber;
const int SavedSlice::kSliceFieldNumber;
const int SavedSlice::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SavedSlice::SavedSlice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SavedSlice)
}
SavedSlice::SavedSlice(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedSlice)
}

void SavedSlice::InitAsDefaultInstance() {
  slice_ = const_cast< ::tensorflow::TensorSliceProto*>(
      ::tensorflow::TensorSliceProto::internal_default_instance());
  data_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
}

SavedSlice::SavedSlice(const SavedSlice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedSlice)
}

void SavedSlice::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slice_ = NULL;
  data_ = NULL;
  _cached_size_ = 0;
}

SavedSlice::~SavedSlice() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedSlice)
  SharedDtor();
}

void SavedSlice::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &SavedSlice_default_instance_.get()) {
    delete slice_;
    delete data_;
  }
}

void SavedSlice::ArenaDtor(void* object) {
  SavedSlice* _this = reinterpret_cast< SavedSlice* >(object);
  (void)_this;
}
void SavedSlice::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SavedSlice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavedSlice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavedSlice_descriptor_;
}

const SavedSlice& SavedSlice::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SavedSlice> SavedSlice_default_instance_;

SavedSlice* SavedSlice::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SavedSlice>(arena);
}

void SavedSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedSlice)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && slice_ != NULL) delete slice_;
  slice_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}

bool SavedSlice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SavedSlice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.SavedSlice.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_slice;
        break;
      }

      // optional .tensorflow.TensorSliceProto slice = 2;
      case 2: {
        if (tag == 18) {
         parse_slice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .tensorflow.TensorProto data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SavedSlice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SavedSlice)
  return false;
#undef DO_
}

void SavedSlice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SavedSlice)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SavedSlice.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .tensorflow.TensorSliceProto slice = 2;
  if (this->has_slice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->slice_, output);
  }

  // optional .tensorflow.TensorProto data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.SavedSlice)
}

::google::protobuf::uint8* SavedSlice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedSlice)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SavedSlice.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .tensorflow.TensorSliceProto slice = 2;
  if (this->has_slice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->slice_, false, target);
  }

  // optional .tensorflow.TensorProto data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedSlice)
  return target;
}

size_t SavedSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedSlice)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .tensorflow.TensorSliceProto slice = 2;
  if (this->has_slice()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->slice_);
  }

  // optional .tensorflow.TensorProto data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavedSlice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SavedSlice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SavedSlice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SavedSlice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SavedSlice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SavedSlice)
    UnsafeMergeFrom(*source);
  }
}

void SavedSlice::MergeFrom(const SavedSlice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedSlice)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SavedSlice::UnsafeMergeFrom(const SavedSlice& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_slice()) {
    mutable_slice()->::tensorflow::TensorSliceProto::MergeFrom(from.slice());
  }
  if (from.has_data()) {
    mutable_data()->::tensorflow::TensorProto::MergeFrom(from.data());
  }
}

void SavedSlice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SavedSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedSlice::CopyFrom(const SavedSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedSlice)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SavedSlice::IsInitialized() const {

  return true;
}

void SavedSlice::Swap(SavedSlice* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SavedSlice temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SavedSlice::UnsafeArenaSwap(SavedSlice* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SavedSlice::InternalSwap(SavedSlice* other) {
  name_.Swap(&other->name_);
  std::swap(slice_, other->slice_);
  std::swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SavedSlice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavedSlice_descriptor_;
  metadata.reflection = SavedSlice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SavedSlice

// optional string name = 1;
void SavedSlice::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SavedSlice::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedSlice.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SavedSlice::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.SavedSlice.name)
}
void SavedSlice::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.SavedSlice.name)
}
void SavedSlice::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SavedSlice.name)
}
::std::string* SavedSlice::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedSlice.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SavedSlice::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedSlice.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SavedSlice::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SavedSlice.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SavedSlice::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedSlice.name)
}
void SavedSlice::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedSlice.name)
}

// optional .tensorflow.TensorSliceProto slice = 2;
bool SavedSlice::has_slice() const {
  return this != internal_default_instance() && slice_ != NULL;
}
void SavedSlice::clear_slice() {
  if (GetArenaNoVirtual() == NULL && slice_ != NULL) delete slice_;
  slice_ = NULL;
}
const ::tensorflow::TensorSliceProto& SavedSlice::slice() const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedSlice.slice)
  return slice_ != NULL ? *slice_
                         : *::tensorflow::TensorSliceProto::internal_default_instance();
}
::tensorflow::TensorSliceProto* SavedSlice::mutable_slice() {
  
  if (slice_ == NULL) {
    _slow_mutable_slice();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedSlice.slice)
  return slice_;
}
::tensorflow::TensorSliceProto* SavedSlice::release_slice() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedSlice.slice)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_slice();
  } else {
    ::tensorflow::TensorSliceProto* temp = slice_;
    slice_ = NULL;
    return temp;
  }
}
 void SavedSlice::set_allocated_slice(::tensorflow::TensorSliceProto* slice) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete slice_;
  }
  if (slice != NULL) {
    _slow_set_allocated_slice(message_arena, &slice);
  }
  slice_ = slice;
  if (slice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedSlice.slice)
}

// optional .tensorflow.TensorProto data = 3;
bool SavedSlice::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void SavedSlice::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::tensorflow::TensorProto& SavedSlice::data() const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedSlice.data)
  return data_ != NULL ? *data_
                         : *::tensorflow::TensorProto::internal_default_instance();
}
::tensorflow::TensorProto* SavedSlice::mutable_data() {
  
  if (data_ == NULL) {
    _slow_mutable_data();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedSlice.data)
  return data_;
}
::tensorflow::TensorProto* SavedSlice::release_data() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedSlice.data)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_data();
  } else {
    ::tensorflow::TensorProto* temp = data_;
    data_ = NULL;
    return temp;
  }
}
 void SavedSlice::set_allocated_data(::tensorflow::TensorProto* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data != NULL) {
    _slow_set_allocated_data(message_arena, &data);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedSlice.data)
}

inline const SavedSlice* SavedSlice::internal_default_instance() {
  return &SavedSlice_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SavedTensorSlices::_slow_mutable_meta() {
  meta_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::SavedTensorSliceMeta >(
      GetArenaNoVirtual());
}
::tensorflow::SavedTensorSliceMeta* SavedTensorSlices::_slow_release_meta() {
  if (meta_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::SavedTensorSliceMeta* temp = new ::tensorflow::SavedTensorSliceMeta(*meta_);
    meta_ = NULL;
    return temp;
  }
}
::tensorflow::SavedTensorSliceMeta* SavedTensorSlices::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SavedTensorSlices.meta)
  
  ::tensorflow::SavedTensorSliceMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
void SavedTensorSlices::_slow_set_allocated_meta(
    ::google::protobuf::Arena* message_arena, ::tensorflow::SavedTensorSliceMeta** meta) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*meta) == NULL) {
      message_arena->Own(*meta);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*meta)) {
      ::tensorflow::SavedTensorSliceMeta* new_meta = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::SavedTensorSliceMeta >(
            message_arena);
      new_meta->CopyFrom(**meta);
      *meta = new_meta;
    }
}
void SavedTensorSlices::unsafe_arena_set_allocated_meta(
    ::tensorflow::SavedTensorSliceMeta* meta) {
  if (GetArenaNoVirtual() == NULL) {
    delete meta_;
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedTensorSlices.meta)
}
void SavedTensorSlices::_slow_mutable_data() {
  data_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::SavedSlice >(
      GetArenaNoVirtual());
}
::tensorflow::SavedSlice* SavedTensorSlices::_slow_release_data() {
  if (data_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::SavedSlice* temp = new ::tensorflow::SavedSlice(*data_);
    data_ = NULL;
    return temp;
  }
}
::tensorflow::SavedSlice* SavedTensorSlices::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SavedTensorSlices.data)
  
  ::tensorflow::SavedSlice* temp = data_;
  data_ = NULL;
  return temp;
}
void SavedTensorSlices::_slow_set_allocated_data(
    ::google::protobuf::Arena* message_arena, ::tensorflow::SavedSlice** data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*data) == NULL) {
      message_arena->Own(*data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*data)) {
      ::tensorflow::SavedSlice* new_data = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::SavedSlice >(
            message_arena);
      new_data->CopyFrom(**data);
      *data = new_data;
    }
}
void SavedTensorSlices::unsafe_arena_set_allocated_data(
    ::tensorflow::SavedSlice* data) {
  if (GetArenaNoVirtual() == NULL) {
    delete data_;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedTensorSlices.data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SavedTensorSlices::kMetaFieldNumber;
const int SavedTensorSlices::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SavedTensorSlices::SavedTensorSlices()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SavedTensorSlices)
}
SavedTensorSlices::SavedTensorSlices(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedTensorSlices)
}

void SavedTensorSlices::InitAsDefaultInstance() {
  meta_ = const_cast< ::tensorflow::SavedTensorSliceMeta*>(
      ::tensorflow::SavedTensorSliceMeta::internal_default_instance());
  data_ = const_cast< ::tensorflow::SavedSlice*>(
      ::tensorflow::SavedSlice::internal_default_instance());
}

SavedTensorSlices::SavedTensorSlices(const SavedTensorSlices& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedTensorSlices)
}

void SavedTensorSlices::SharedCtor() {
  meta_ = NULL;
  data_ = NULL;
  _cached_size_ = 0;
}

SavedTensorSlices::~SavedTensorSlices() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedTensorSlices)
  SharedDtor();
}

void SavedTensorSlices::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &SavedTensorSlices_default_instance_.get()) {
    delete meta_;
    delete data_;
  }
}

void SavedTensorSlices::ArenaDtor(void* object) {
  SavedTensorSlices* _this = reinterpret_cast< SavedTensorSlices* >(object);
  (void)_this;
}
void SavedTensorSlices::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SavedTensorSlices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavedTensorSlices::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavedTensorSlices_descriptor_;
}

const SavedTensorSlices& SavedTensorSlices::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SavedTensorSlices> SavedTensorSlices_default_instance_;

SavedTensorSlices* SavedTensorSlices::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SavedTensorSlices>(arena);
}

void SavedTensorSlices::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedTensorSlices)
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}

bool SavedTensorSlices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SavedTensorSlices)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.SavedTensorSliceMeta meta = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .tensorflow.SavedSlice data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SavedTensorSlices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SavedTensorSlices)
  return false;
#undef DO_
}

void SavedTensorSlices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SavedTensorSlices)
  // optional .tensorflow.SavedTensorSliceMeta meta = 1;
  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->meta_, output);
  }

  // optional .tensorflow.SavedSlice data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.SavedTensorSlices)
}

::google::protobuf::uint8* SavedTensorSlices::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedTensorSlices)
  // optional .tensorflow.SavedTensorSliceMeta meta = 1;
  if (this->has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->meta_, false, target);
  }

  // optional .tensorflow.SavedSlice data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedTensorSlices)
  return target;
}

size_t SavedTensorSlices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedTensorSlices)
  size_t total_size = 0;

  // optional .tensorflow.SavedTensorSliceMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meta_);
  }

  // optional .tensorflow.SavedSlice data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavedTensorSlices::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SavedTensorSlices)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SavedTensorSlices* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SavedTensorSlices>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SavedTensorSlices)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SavedTensorSlices)
    UnsafeMergeFrom(*source);
  }
}

void SavedTensorSlices::MergeFrom(const SavedTensorSlices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedTensorSlices)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SavedTensorSlices::UnsafeMergeFrom(const SavedTensorSlices& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_meta()) {
    mutable_meta()->::tensorflow::SavedTensorSliceMeta::MergeFrom(from.meta());
  }
  if (from.has_data()) {
    mutable_data()->::tensorflow::SavedSlice::MergeFrom(from.data());
  }
}

void SavedTensorSlices::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SavedTensorSlices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedTensorSlices::CopyFrom(const SavedTensorSlices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedTensorSlices)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SavedTensorSlices::IsInitialized() const {

  return true;
}

void SavedTensorSlices::Swap(SavedTensorSlices* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SavedTensorSlices temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void SavedTensorSlices::UnsafeArenaSwap(SavedTensorSlices* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SavedTensorSlices::InternalSwap(SavedTensorSlices* other) {
  std::swap(meta_, other->meta_);
  std::swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SavedTensorSlices::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavedTensorSlices_descriptor_;
  metadata.reflection = SavedTensorSlices_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SavedTensorSlices

// optional .tensorflow.SavedTensorSliceMeta meta = 1;
bool SavedTensorSlices::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
void SavedTensorSlices::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
const ::tensorflow::SavedTensorSliceMeta& SavedTensorSlices::meta() const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedTensorSlices.meta)
  return meta_ != NULL ? *meta_
                         : *::tensorflow::SavedTensorSliceMeta::internal_default_instance();
}
::tensorflow::SavedTensorSliceMeta* SavedTensorSlices::mutable_meta() {
  
  if (meta_ == NULL) {
    _slow_mutable_meta();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedTensorSlices.meta)
  return meta_;
}
::tensorflow::SavedTensorSliceMeta* SavedTensorSlices::release_meta() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedTensorSlices.meta)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_meta();
  } else {
    ::tensorflow::SavedTensorSliceMeta* temp = meta_;
    meta_ = NULL;
    return temp;
  }
}
 void SavedTensorSlices::set_allocated_meta(::tensorflow::SavedTensorSliceMeta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete meta_;
  }
  if (meta != NULL) {
    _slow_set_allocated_meta(message_arena, &meta);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedTensorSlices.meta)
}

// optional .tensorflow.SavedSlice data = 2;
bool SavedTensorSlices::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void SavedTensorSlices::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::tensorflow::SavedSlice& SavedTensorSlices::data() const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedTensorSlices.data)
  return data_ != NULL ? *data_
                         : *::tensorflow::SavedSlice::internal_default_instance();
}
::tensorflow::SavedSlice* SavedTensorSlices::mutable_data() {
  
  if (data_ == NULL) {
    _slow_mutable_data();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedTensorSlices.data)
  return data_;
}
::tensorflow::SavedSlice* SavedTensorSlices::release_data() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedTensorSlices.data)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_data();
  } else {
    ::tensorflow::SavedSlice* temp = data_;
    data_ = NULL;
    return temp;
  }
}
 void SavedTensorSlices::set_allocated_data(::tensorflow::SavedSlice* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data != NULL) {
    _slow_set_allocated_data(message_arena, &data);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedTensorSlices.data)
}

inline const SavedTensorSlices* SavedTensorSlices::internal_default_instance() {
  return &SavedTensorSlices_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
