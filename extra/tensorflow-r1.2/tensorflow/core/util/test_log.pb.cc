// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/util/test_log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/util/test_log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* EntryValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntryValue_reflection_ = NULL;
struct EntryValueOneofInstance {
  double double_value_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
}* EntryValue_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* BenchmarkEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BenchmarkEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* BenchmarkEntry_ExtrasEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BenchmarkEntries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BenchmarkEntries_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitId_reflection_ = NULL;
struct CommitIdOneofInstance {
  ::google::protobuf::int64 changelist_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
}* CommitId_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CPUInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPUInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPUInfo_CacheSizeEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MemoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPUInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPUInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlatformInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlatformInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AvailableDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvailableDeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MachineConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestResults_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TestResults_BenchmarkType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/util/test_log.proto");
  GOOGLE_CHECK(file != NULL);
  EntryValue_descriptor_ = file->message_type(0);
  static const int EntryValue_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(EntryValue_default_oneof_instance_, double_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(EntryValue_default_oneof_instance_, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryValue, kind_),
  };
  EntryValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EntryValue_descriptor_,
      EntryValue::internal_default_instance(),
      EntryValue_offsets_,
      -1,
      -1,
      -1,
      EntryValue_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryValue, _oneof_case_[0]),
      sizeof(EntryValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryValue, _internal_metadata_));
  BenchmarkEntry_descriptor_ = file->message_type(1);
  static const int BenchmarkEntry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BenchmarkEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BenchmarkEntry, iters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BenchmarkEntry, cpu_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BenchmarkEntry, wall_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BenchmarkEntry, throughput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BenchmarkEntry, extras_),
  };
  BenchmarkEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BenchmarkEntry_descriptor_,
      BenchmarkEntry::internal_default_instance(),
      BenchmarkEntry_offsets_,
      -1,
      -1,
      -1,
      sizeof(BenchmarkEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BenchmarkEntry, _internal_metadata_));
  BenchmarkEntry_ExtrasEntry_descriptor_ = BenchmarkEntry_descriptor_->nested_type(0);
  BenchmarkEntries_descriptor_ = file->message_type(2);
  static const int BenchmarkEntries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BenchmarkEntries, entry_),
  };
  BenchmarkEntries_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BenchmarkEntries_descriptor_,
      BenchmarkEntries::internal_default_instance(),
      BenchmarkEntries_offsets_,
      -1,
      -1,
      -1,
      sizeof(BenchmarkEntries),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BenchmarkEntries, _internal_metadata_));
  BuildConfiguration_descriptor_ = file->message_type(3);
  static const int BuildConfiguration_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildConfiguration, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildConfiguration, cc_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildConfiguration, opts_),
  };
  BuildConfiguration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BuildConfiguration_descriptor_,
      BuildConfiguration::internal_default_instance(),
      BuildConfiguration_offsets_,
      -1,
      -1,
      -1,
      sizeof(BuildConfiguration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildConfiguration, _internal_metadata_));
  CommitId_descriptor_ = file->message_type(4);
  static const int CommitId_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CommitId_default_oneof_instance_, changelist_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CommitId_default_oneof_instance_, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitId, snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitId, kind_),
  };
  CommitId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitId_descriptor_,
      CommitId::internal_default_instance(),
      CommitId_offsets_,
      -1,
      -1,
      -1,
      CommitId_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitId, _oneof_case_[0]),
      sizeof(CommitId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitId, _internal_metadata_));
  CPUInfo_descriptor_ = file->message_type(5);
  static const int CPUInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, num_cores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, num_cores_allowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, mhz_per_cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, cpu_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, cpu_governor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, cache_size_),
  };
  CPUInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CPUInfo_descriptor_,
      CPUInfo::internal_default_instance(),
      CPUInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(CPUInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, _internal_metadata_));
  CPUInfo_CacheSizeEntry_descriptor_ = CPUInfo_descriptor_->nested_type(0);
  MemoryInfo_descriptor_ = file->message_type(6);
  static const int MemoryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryInfo, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryInfo, available_),
  };
  MemoryInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemoryInfo_descriptor_,
      MemoryInfo::internal_default_instance(),
      MemoryInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MemoryInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryInfo, _internal_metadata_));
  GPUInfo_descriptor_ = file->message_type(7);
  static const int GPUInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, bus_id_),
  };
  GPUInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GPUInfo_descriptor_,
      GPUInfo::internal_default_instance(),
      GPUInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GPUInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, _internal_metadata_));
  PlatformInfo_descriptor_ = file->message_type(8);
  static const int PlatformInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, linkage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, version_),
  };
  PlatformInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlatformInfo_descriptor_,
      PlatformInfo::internal_default_instance(),
      PlatformInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlatformInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatformInfo, _internal_metadata_));
  AvailableDeviceInfo_descriptor_ = file->message_type(9);
  static const int AvailableDeviceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableDeviceInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableDeviceInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableDeviceInfo, memory_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableDeviceInfo, physical_description_),
  };
  AvailableDeviceInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AvailableDeviceInfo_descriptor_,
      AvailableDeviceInfo::internal_default_instance(),
      AvailableDeviceInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(AvailableDeviceInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableDeviceInfo, _internal_metadata_));
  MachineConfiguration_descriptor_ = file->message_type(10);
  static const int MachineConfiguration_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineConfiguration, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineConfiguration, serial_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineConfiguration, platform_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineConfiguration, cpu_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineConfiguration, device_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineConfiguration, available_device_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineConfiguration, memory_info_),
  };
  MachineConfiguration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MachineConfiguration_descriptor_,
      MachineConfiguration::internal_default_instance(),
      MachineConfiguration_offsets_,
      -1,
      -1,
      -1,
      sizeof(MachineConfiguration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineConfiguration, _internal_metadata_));
  RunConfiguration_descriptor_ = file->message_type(11);
  static const int RunConfiguration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunConfiguration, argument_),
  };
  RunConfiguration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunConfiguration_descriptor_,
      RunConfiguration::internal_default_instance(),
      RunConfiguration_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunConfiguration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunConfiguration, _internal_metadata_));
  TestResults_descriptor_ = file->message_type(12);
  static const int TestResults_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResults, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResults, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResults, build_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResults, commit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResults, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResults, run_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResults, machine_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResults, run_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResults, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResults, benchmark_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResults, run_mode_),
  };
  TestResults_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestResults_descriptor_,
      TestResults::internal_default_instance(),
      TestResults_offsets_,
      -1,
      -1,
      -1,
      sizeof(TestResults),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResults, _internal_metadata_));
  TestResults_BenchmarkType_descriptor_ = TestResults_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2futil_2ftest_5flog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EntryValue_descriptor_, EntryValue::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BenchmarkEntry_descriptor_, BenchmarkEntry::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        BenchmarkEntry_ExtrasEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::EntryValue,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                BenchmarkEntry_ExtrasEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BenchmarkEntries_descriptor_, BenchmarkEntries::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BuildConfiguration_descriptor_, BuildConfiguration::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitId_descriptor_, CommitId::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CPUInfo_descriptor_, CPUInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CPUInfo_CacheSizeEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int64,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            0>::CreateDefaultInstance(
                CPUInfo_CacheSizeEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemoryInfo_descriptor_, MemoryInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GPUInfo_descriptor_, GPUInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlatformInfo_descriptor_, PlatformInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AvailableDeviceInfo_descriptor_, AvailableDeviceInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MachineConfiguration_descriptor_, MachineConfiguration::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunConfiguration_descriptor_, RunConfiguration::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestResults_descriptor_, TestResults::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  EntryValue_default_instance_.Shutdown();
  delete EntryValue_default_oneof_instance_;
  delete EntryValue_reflection_;
  BenchmarkEntry_default_instance_.Shutdown();
  delete BenchmarkEntry_reflection_;
  BenchmarkEntries_default_instance_.Shutdown();
  delete BenchmarkEntries_reflection_;
  BuildConfiguration_default_instance_.Shutdown();
  delete BuildConfiguration_reflection_;
  CommitId_default_instance_.Shutdown();
  delete CommitId_default_oneof_instance_;
  delete CommitId_reflection_;
  CPUInfo_default_instance_.Shutdown();
  delete CPUInfo_reflection_;
  MemoryInfo_default_instance_.Shutdown();
  delete MemoryInfo_reflection_;
  GPUInfo_default_instance_.Shutdown();
  delete GPUInfo_reflection_;
  PlatformInfo_default_instance_.Shutdown();
  delete PlatformInfo_reflection_;
  AvailableDeviceInfo_default_instance_.Shutdown();
  delete AvailableDeviceInfo_reflection_;
  MachineConfiguration_default_instance_.Shutdown();
  delete MachineConfiguration_reflection_;
  RunConfiguration_default_instance_.Shutdown();
  delete RunConfiguration_reflection_;
  TestResults_default_instance_.Shutdown();
  delete TestResults_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  EntryValue_default_instance_.DefaultConstruct();
  EntryValue_default_oneof_instance_ = new EntryValueOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  BenchmarkEntry_default_instance_.DefaultConstruct();
  BenchmarkEntries_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BuildConfiguration_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CommitId_default_instance_.DefaultConstruct();
  CommitId_default_oneof_instance_ = new CommitIdOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  CPUInfo_default_instance_.DefaultConstruct();
  MemoryInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GPUInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PlatformInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AvailableDeviceInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MachineConfiguration_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RunConfiguration_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TestResults_default_instance_.DefaultConstruct();
  EntryValue_default_instance_.get_mutable()->InitAsDefaultInstance();
  BenchmarkEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  BenchmarkEntries_default_instance_.get_mutable()->InitAsDefaultInstance();
  BuildConfiguration_default_instance_.get_mutable()->InitAsDefaultInstance();
  CommitId_default_instance_.get_mutable()->InitAsDefaultInstance();
  CPUInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  MemoryInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  GPUInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  PlatformInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  AvailableDeviceInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  MachineConfiguration_default_instance_.get_mutable()->InitAsDefaultInstance();
  RunConfiguration_default_instance_.get_mutable()->InitAsDefaultInstance();
  TestResults_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#tensorflow/core/util/test_log.proto\022\nt"
    "ensorflow\032\031google/protobuf/any.proto\"D\n\n"
    "EntryValue\022\026\n\014double_value\030\001 \001(\001H\000\022\026\n\014st"
    "ring_value\030\002 \001(\tH\000B\006\n\004kind\"\345\001\n\016Benchmark"
    "Entry\022\014\n\004name\030\001 \001(\t\022\r\n\005iters\030\002 \001(\003\022\020\n\010cp"
    "u_time\030\003 \001(\001\022\021\n\twall_time\030\004 \001(\001\022\022\n\nthrou"
    "ghput\030\005 \001(\001\0226\n\006extras\030\006 \003(\0132&.tensorflow"
    ".BenchmarkEntry.ExtrasEntry\032E\n\013ExtrasEnt"
    "ry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001(\0132\026.tensorf"
    "low.EntryValue:\0028\001\"=\n\020BenchmarkEntries\022)"
    "\n\005entry\030\001 \003(\0132\032.tensorflow.BenchmarkEntr"
    "y\"B\n\022BuildConfiguration\022\014\n\004mode\030\001 \001(\t\022\020\n"
    "\010cc_flags\030\002 \003(\t\022\014\n\004opts\030\003 \003(\t\"J\n\010CommitI"
    "d\022\024\n\nchangelist\030\001 \001(\003H\000\022\016\n\004hash\030\002 \001(\tH\000\022"
    "\020\n\010snapshot\030\003 \001(\tB\006\n\004kind\"\336\001\n\007CPUInfo\022\021\n"
    "\tnum_cores\030\001 \001(\003\022\031\n\021num_cores_allowed\030\002 "
    "\001(\003\022\023\n\013mhz_per_cpu\030\003 \001(\001\022\020\n\010cpu_info\030\004 \001"
    "(\t\022\024\n\014cpu_governor\030\005 \001(\t\0226\n\ncache_size\030\006"
    " \003(\0132\".tensorflow.CPUInfo.CacheSizeEntry"
    "\0320\n\016CacheSizeEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
    "\030\002 \001(\003:\0028\001\".\n\nMemoryInfo\022\r\n\005total\030\001 \001(\003\022"
    "\021\n\tavailable\030\002 \001(\003\"6\n\007GPUInfo\022\r\n\005model\030\001"
    " \001(\t\022\014\n\004uuid\030\002 \001(\t\022\016\n\006bus_id\030\003 \001(\t\"p\n\014Pl"
    "atformInfo\022\014\n\004bits\030\001 \001(\t\022\017\n\007linkage\030\002 \001("
    "\t\022\017\n\007machine\030\003 \001(\t\022\017\n\007release\030\004 \001(\t\022\016\n\006s"
    "ystem\030\005 \001(\t\022\017\n\007version\030\006 \001(\t\"e\n\023Availabl"
    "eDeviceInfo\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022"
    "\024\n\014memory_limit\030\003 \001(\003\022\034\n\024physical_descri"
    "ption\030\004 \001(\t\"\263\002\n\024MachineConfiguration\022\020\n\010"
    "hostname\030\001 \001(\t\022\031\n\021serial_identifier\030\007 \001("
    "\t\022/\n\rplatform_info\030\002 \001(\0132\030.tensorflow.Pl"
    "atformInfo\022%\n\010cpu_info\030\003 \001(\0132\023.tensorflo"
    "w.CPUInfo\022)\n\013device_info\030\004 \003(\0132\024.google."
    "protobuf.Any\022>\n\025available_device_info\030\005 "
    "\003(\0132\037.tensorflow.AvailableDeviceInfo\022+\n\013"
    "memory_info\030\006 \001(\0132\026.tensorflow.MemoryInf"
    "o\"$\n\020RunConfiguration\022\020\n\010argument\030\001 \003(\t\""
    "\224\004\n\013TestResults\022\016\n\006target\030\001 \001(\t\022-\n\007entri"
    "es\030\002 \001(\0132\034.tensorflow.BenchmarkEntries\022;"
    "\n\023build_configuration\030\003 \001(\0132\036.tensorflow"
    ".BuildConfiguration\022\'\n\tcommit_id\030\004 \001(\0132\024"
    ".tensorflow.CommitId\022\022\n\nstart_time\030\005 \001(\003"
    "\022\020\n\010run_time\030\006 \001(\001\022\?\n\025machine_configurat"
    "ion\030\007 \001(\0132 .tensorflow.MachineConfigurat"
    "ion\0227\n\021run_configuration\030\010 \001(\0132\034.tensorf"
    "low.RunConfiguration\022\014\n\004name\030\t \001(\t\022=\n\016be"
    "nchmark_type\030\n \001(\0162%.tensorflow.TestResu"
    "lts.BenchmarkType\022\020\n\010run_mode\030\013 \001(\t\"a\n\rB"
    "enchmarkType\022\013\n\007UNKNOWN\020\000\022\026\n\022CPP_MICROBE"
    "NCHMARK\020\001\022\024\n\020PYTHON_BENCHMARK\020\002\022\025\n\021ANDRO"
    "ID_BENCHMARK\020\003B1\n\033org.tensorflow.util.te"
    "stlogB\rTestLogProtosP\001\370\001\001b\006proto3", 2073);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/util/test_log.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2futil_2ftest_5flog_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2futil_2ftest_5flog_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2futil_2ftest_5flog_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2futil_2ftest_5flog_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntryValue::kDoubleValueFieldNumber;
const int EntryValue::kStringValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntryValue::EntryValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.EntryValue)
}
EntryValue::EntryValue(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.EntryValue)
}

void EntryValue::InitAsDefaultInstance() {
  EntryValue_default_oneof_instance_->double_value_ = 0;
  EntryValue_default_oneof_instance_->string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EntryValue::EntryValue(const EntryValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.EntryValue)
}

void EntryValue::SharedCtor() {
  clear_has_kind();
  _cached_size_ = 0;
}

EntryValue::~EntryValue() {
  // @@protoc_insertion_point(destructor:tensorflow.EntryValue)
  SharedDtor();
}

void EntryValue::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (has_kind()) {
    clear_kind();
  }
}

void EntryValue::ArenaDtor(void* object) {
  EntryValue* _this = reinterpret_cast< EntryValue* >(object);
  (void)_this;
}
void EntryValue::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EntryValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntryValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryValue_descriptor_;
}

const EntryValue& EntryValue::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EntryValue> EntryValue_default_instance_;

EntryValue* EntryValue::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<EntryValue>(arena);
}

void EntryValue::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.EntryValue)
  switch (kind_case()) {
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      kind_.string_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void EntryValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.EntryValue)
  clear_kind();
}

bool EntryValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.EntryValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double double_value = 1;
      case 1: {
        if (tag == 9) {
          clear_kind();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kind_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        goto after_string_value;
        break;
      }

      // optional string string_value = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.EntryValue.string_value"));
        } else {
          goto handle_unusual;
        }
       after_string_value:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.EntryValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.EntryValue)
  return false;
#undef DO_
}

void EntryValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.EntryValue)
  // optional double double_value = 1;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->double_value(), output);
  }

  // optional string string_value = 2;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EntryValue.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->string_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.EntryValue)
}

::google::protobuf::uint8* EntryValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.EntryValue)
  // optional double double_value = 1;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->double_value(), target);
  }

  // optional string string_value = 2;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EntryValue.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->string_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.EntryValue)
  return target;
}

size_t EntryValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.EntryValue)
  size_t total_size = 0;

  switch (kind_case()) {
    // optional double double_value = 1;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // optional string string_value = 2;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.EntryValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EntryValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntryValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.EntryValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.EntryValue)
    UnsafeMergeFrom(*source);
  }
}

void EntryValue::MergeFrom(const EntryValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.EntryValue)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EntryValue::UnsafeMergeFrom(const EntryValue& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.kind_case()) {
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void EntryValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.EntryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryValue::CopyFrom(const EntryValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.EntryValue)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EntryValue::IsInitialized() const {

  return true;
}

void EntryValue::Swap(EntryValue* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EntryValue temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void EntryValue::UnsafeArenaSwap(EntryValue* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EntryValue::InternalSwap(EntryValue* other) {
  std::swap(kind_, other->kind_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntryValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntryValue_descriptor_;
  metadata.reflection = EntryValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntryValue

// optional double double_value = 1;
bool EntryValue::has_double_value() const {
  return kind_case() == kDoubleValue;
}
void EntryValue::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
void EntryValue::clear_double_value() {
  if (has_double_value()) {
    kind_.double_value_ = 0;
    clear_has_kind();
  }
}
double EntryValue::double_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.EntryValue.double_value)
  if (has_double_value()) {
    return kind_.double_value_;
  }
  return 0;
}
void EntryValue::set_double_value(double value) {
  if (!has_double_value()) {
    clear_kind();
    set_has_double_value();
  }
  kind_.double_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.EntryValue.double_value)
}

// optional string string_value = 2;
bool EntryValue::has_string_value() const {
  return kind_case() == kStringValue;
}
void EntryValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
void EntryValue::clear_string_value() {
  if (has_string_value()) {
    kind_.string_value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_kind();
  }
}
const ::std::string& EntryValue::string_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.EntryValue.string_value)
  if (has_string_value()) {
    return kind_.string_value_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void EntryValue::set_string_value(const ::std::string& value) {
  if (!has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.EntryValue.string_value)
}
void EntryValue::set_string_value(const char* value) {
  if (!has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.EntryValue.string_value)
}
void EntryValue::set_string_value(const char* value,
                             size_t size) {
  if (!has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.EntryValue.string_value)
}
::std::string* EntryValue::mutable_string_value() {
  if (!has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return kind_.string_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:tensorflow.EntryValue.string_value)
}
::std::string* EntryValue::release_string_value() {
  // @@protoc_insertion_point(field_release:tensorflow.EntryValue.string_value)
  if (has_string_value()) {
    clear_has_kind();
    return kind_.string_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* EntryValue::unsafe_arena_release_string_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.EntryValue.string_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_string_value()) {
    clear_has_kind();
    return kind_.string_value_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void EntryValue::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    kind_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_kind();
  if (string_value != NULL) {
    set_has_string_value();
    kind_.string_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.EntryValue.string_value)
}
void EntryValue::unsafe_arena_set_allocated_string_value(::std::string* string_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_string_value()) {
    kind_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_kind();
  if (string_value) {
    set_has_string_value();
    kind_.string_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.EntryValue.string_value)
}

bool EntryValue::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
void EntryValue::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
EntryValue::KindCase EntryValue::kind_case() const {
  return EntryValue::KindCase(_oneof_case_[0]);
}
inline const EntryValue* EntryValue::internal_default_instance() {
  return &EntryValue_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BenchmarkEntry::kNameFieldNumber;
const int BenchmarkEntry::kItersFieldNumber;
const int BenchmarkEntry::kCpuTimeFieldNumber;
const int BenchmarkEntry::kWallTimeFieldNumber;
const int BenchmarkEntry::kThroughputFieldNumber;
const int BenchmarkEntry::kExtrasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BenchmarkEntry::BenchmarkEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.BenchmarkEntry)
}
BenchmarkEntry::BenchmarkEntry(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  extras_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BenchmarkEntry)
}

void BenchmarkEntry::InitAsDefaultInstance() {
}

BenchmarkEntry::BenchmarkEntry(const BenchmarkEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.BenchmarkEntry)
}

void BenchmarkEntry::SharedCtor() {
  extras_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  extras_.SetEntryDescriptor(
      &::tensorflow::BenchmarkEntry_ExtrasEntry_descriptor_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&iters_, 0, reinterpret_cast<char*>(&throughput_) -
    reinterpret_cast<char*>(&iters_) + sizeof(throughput_));
  _cached_size_ = 0;
}

BenchmarkEntry::~BenchmarkEntry() {
  // @@protoc_insertion_point(destructor:tensorflow.BenchmarkEntry)
  SharedDtor();
}

void BenchmarkEntry::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void BenchmarkEntry::ArenaDtor(void* object) {
  BenchmarkEntry* _this = reinterpret_cast< BenchmarkEntry* >(object);
  (void)_this;
}
void BenchmarkEntry::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BenchmarkEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BenchmarkEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BenchmarkEntry_descriptor_;
}

const BenchmarkEntry& BenchmarkEntry::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BenchmarkEntry> BenchmarkEntry_default_instance_;

BenchmarkEntry* BenchmarkEntry::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BenchmarkEntry>(arena);
}

void BenchmarkEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BenchmarkEntry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BenchmarkEntry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BenchmarkEntry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(iters_, throughput_);
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  extras_.Clear();
}

bool BenchmarkEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.BenchmarkEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.BenchmarkEntry.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iters;
        break;
      }

      // optional int64 iters = 2;
      case 2: {
        if (tag == 16) {
         parse_iters:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iters_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_cpu_time;
        break;
      }

      // optional double cpu_time = 3;
      case 3: {
        if (tag == 25) {
         parse_cpu_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_wall_time;
        break;
      }

      // optional double wall_time = 4;
      case 4: {
        if (tag == 33) {
         parse_wall_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wall_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_throughput;
        break;
      }

      // optional double throughput = 5;
      case 5: {
        if (tag == 41) {
         parse_throughput:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throughput_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_extras;
        break;
      }

      // map<string, .tensorflow.EntryValue> extras = 6;
      case 6: {
        if (tag == 50) {
         parse_extras:
          DO_(input->IncrementRecursionDepth());
         parse_loop_extras:
          BenchmarkEntry_ExtrasEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::EntryValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::EntryValue > > parser(&extras_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.BenchmarkEntry.ExtrasEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_extras;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.BenchmarkEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.BenchmarkEntry)
  return false;
#undef DO_
}

void BenchmarkEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.BenchmarkEntry)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BenchmarkEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 iters = 2;
  if (this->iters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iters(), output);
  }

  // optional double cpu_time = 3;
  if (this->cpu_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cpu_time(), output);
  }

  // optional double wall_time = 4;
  if (this->wall_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->wall_time(), output);
  }

  // optional double throughput = 5;
  if (this->throughput() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->throughput(), output);
  }

  // map<string, .tensorflow.EntryValue> extras = 6;
  if (!this->extras().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::EntryValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.BenchmarkEntry.ExtrasEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->extras().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->extras().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::EntryValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::EntryValue >::const_iterator
          it = this->extras().begin();
          it != this->extras().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<BenchmarkEntry_ExtrasEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(extras_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<BenchmarkEntry_ExtrasEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::EntryValue >::const_iterator
          it = this->extras().begin();
          it != this->extras().end(); ++it) {
        entry.reset(extras_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.BenchmarkEntry)
}

::google::protobuf::uint8* BenchmarkEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BenchmarkEntry)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BenchmarkEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 iters = 2;
  if (this->iters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iters(), target);
  }

  // optional double cpu_time = 3;
  if (this->cpu_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cpu_time(), target);
  }

  // optional double wall_time = 4;
  if (this->wall_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->wall_time(), target);
  }

  // optional double throughput = 5;
  if (this->throughput() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->throughput(), target);
  }

  // map<string, .tensorflow.EntryValue> extras = 6;
  if (!this->extras().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::EntryValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.BenchmarkEntry.ExtrasEntry.key");
      }
    };

    if (deterministic &&
        this->extras().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->extras().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::EntryValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::EntryValue >::const_iterator
          it = this->extras().begin();
          it != this->extras().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<BenchmarkEntry_ExtrasEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(extras_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<BenchmarkEntry_ExtrasEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::EntryValue >::const_iterator
          it = this->extras().begin();
          it != this->extras().end(); ++it) {
        entry.reset(extras_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BenchmarkEntry)
  return target;
}

size_t BenchmarkEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BenchmarkEntry)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int64 iters = 2;
  if (this->iters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->iters());
  }

  // optional double cpu_time = 3;
  if (this->cpu_time() != 0) {
    total_size += 1 + 8;
  }

  // optional double wall_time = 4;
  if (this->wall_time() != 0) {
    total_size += 1 + 8;
  }

  // optional double throughput = 5;
  if (this->throughput() != 0) {
    total_size += 1 + 8;
  }

  // map<string, .tensorflow.EntryValue> extras = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->extras_size());
  {
    ::google::protobuf::scoped_ptr<BenchmarkEntry_ExtrasEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::EntryValue >::const_iterator
        it = this->extras().begin();
        it != this->extras().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(extras_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BenchmarkEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.BenchmarkEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BenchmarkEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BenchmarkEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.BenchmarkEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.BenchmarkEntry)
    UnsafeMergeFrom(*source);
  }
}

void BenchmarkEntry::MergeFrom(const BenchmarkEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BenchmarkEntry)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BenchmarkEntry::UnsafeMergeFrom(const BenchmarkEntry& from) {
  GOOGLE_DCHECK(&from != this);
  extras_.MergeFrom(from.extras_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.iters() != 0) {
    set_iters(from.iters());
  }
  if (from.cpu_time() != 0) {
    set_cpu_time(from.cpu_time());
  }
  if (from.wall_time() != 0) {
    set_wall_time(from.wall_time());
  }
  if (from.throughput() != 0) {
    set_throughput(from.throughput());
  }
}

void BenchmarkEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.BenchmarkEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BenchmarkEntry::CopyFrom(const BenchmarkEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BenchmarkEntry)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BenchmarkEntry::IsInitialized() const {

  return true;
}

void BenchmarkEntry::Swap(BenchmarkEntry* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BenchmarkEntry temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BenchmarkEntry::UnsafeArenaSwap(BenchmarkEntry* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BenchmarkEntry::InternalSwap(BenchmarkEntry* other) {
  name_.Swap(&other->name_);
  std::swap(iters_, other->iters_);
  std::swap(cpu_time_, other->cpu_time_);
  std::swap(wall_time_, other->wall_time_);
  std::swap(throughput_, other->throughput_);
  extras_.Swap(&other->extras_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BenchmarkEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BenchmarkEntry_descriptor_;
  metadata.reflection = BenchmarkEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BenchmarkEntry

// optional string name = 1;
void BenchmarkEntry::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BenchmarkEntry::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.BenchmarkEntry.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BenchmarkEntry::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.BenchmarkEntry.name)
}
void BenchmarkEntry::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.BenchmarkEntry.name)
}
void BenchmarkEntry::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.BenchmarkEntry.name)
}
::std::string* BenchmarkEntry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.BenchmarkEntry.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BenchmarkEntry::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.BenchmarkEntry.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BenchmarkEntry::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.BenchmarkEntry.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BenchmarkEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.BenchmarkEntry.name)
}
void BenchmarkEntry::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.BenchmarkEntry.name)
}

// optional int64 iters = 2;
void BenchmarkEntry::clear_iters() {
  iters_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BenchmarkEntry::iters() const {
  // @@protoc_insertion_point(field_get:tensorflow.BenchmarkEntry.iters)
  return iters_;
}
void BenchmarkEntry::set_iters(::google::protobuf::int64 value) {
  
  iters_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BenchmarkEntry.iters)
}

// optional double cpu_time = 3;
void BenchmarkEntry::clear_cpu_time() {
  cpu_time_ = 0;
}
double BenchmarkEntry::cpu_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.BenchmarkEntry.cpu_time)
  return cpu_time_;
}
void BenchmarkEntry::set_cpu_time(double value) {
  
  cpu_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BenchmarkEntry.cpu_time)
}

// optional double wall_time = 4;
void BenchmarkEntry::clear_wall_time() {
  wall_time_ = 0;
}
double BenchmarkEntry::wall_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.BenchmarkEntry.wall_time)
  return wall_time_;
}
void BenchmarkEntry::set_wall_time(double value) {
  
  wall_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BenchmarkEntry.wall_time)
}

// optional double throughput = 5;
void BenchmarkEntry::clear_throughput() {
  throughput_ = 0;
}
double BenchmarkEntry::throughput() const {
  // @@protoc_insertion_point(field_get:tensorflow.BenchmarkEntry.throughput)
  return throughput_;
}
void BenchmarkEntry::set_throughput(double value) {
  
  throughput_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.BenchmarkEntry.throughput)
}

// map<string, .tensorflow.EntryValue> extras = 6;
int BenchmarkEntry::extras_size() const {
  return extras_.size();
}
void BenchmarkEntry::clear_extras() {
  extras_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::EntryValue >&
BenchmarkEntry::extras() const {
  // @@protoc_insertion_point(field_map:tensorflow.BenchmarkEntry.extras)
  return extras_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::EntryValue >*
BenchmarkEntry::mutable_extras() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.BenchmarkEntry.extras)
  return extras_.MutableMap();
}

inline const BenchmarkEntry* BenchmarkEntry::internal_default_instance() {
  return &BenchmarkEntry_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BenchmarkEntries::kEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BenchmarkEntries::BenchmarkEntries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.BenchmarkEntries)
}
BenchmarkEntries::BenchmarkEntries(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  entry_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BenchmarkEntries)
}

void BenchmarkEntries::InitAsDefaultInstance() {
}

BenchmarkEntries::BenchmarkEntries(const BenchmarkEntries& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.BenchmarkEntries)
}

void BenchmarkEntries::SharedCtor() {
  _cached_size_ = 0;
}

BenchmarkEntries::~BenchmarkEntries() {
  // @@protoc_insertion_point(destructor:tensorflow.BenchmarkEntries)
  SharedDtor();
}

void BenchmarkEntries::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void BenchmarkEntries::ArenaDtor(void* object) {
  BenchmarkEntries* _this = reinterpret_cast< BenchmarkEntries* >(object);
  (void)_this;
}
void BenchmarkEntries::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BenchmarkEntries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BenchmarkEntries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BenchmarkEntries_descriptor_;
}

const BenchmarkEntries& BenchmarkEntries::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BenchmarkEntries> BenchmarkEntries_default_instance_;

BenchmarkEntries* BenchmarkEntries::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BenchmarkEntries>(arena);
}

void BenchmarkEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BenchmarkEntries)
  entry_.Clear();
}

bool BenchmarkEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.BenchmarkEntries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.BenchmarkEntry entry = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_entry;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.BenchmarkEntries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.BenchmarkEntries)
  return false;
#undef DO_
}

void BenchmarkEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.BenchmarkEntries)
  // repeated .tensorflow.BenchmarkEntry entry = 1;
  for (unsigned int i = 0, n = this->entry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.BenchmarkEntries)
}

::google::protobuf::uint8* BenchmarkEntries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BenchmarkEntries)
  // repeated .tensorflow.BenchmarkEntry entry = 1;
  for (unsigned int i = 0, n = this->entry_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entry(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BenchmarkEntries)
  return target;
}

size_t BenchmarkEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BenchmarkEntries)
  size_t total_size = 0;

  // repeated .tensorflow.BenchmarkEntry entry = 1;
  {
    unsigned int count = this->entry_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BenchmarkEntries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.BenchmarkEntries)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BenchmarkEntries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BenchmarkEntries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.BenchmarkEntries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.BenchmarkEntries)
    UnsafeMergeFrom(*source);
  }
}

void BenchmarkEntries::MergeFrom(const BenchmarkEntries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BenchmarkEntries)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BenchmarkEntries::UnsafeMergeFrom(const BenchmarkEntries& from) {
  GOOGLE_DCHECK(&from != this);
  entry_.MergeFrom(from.entry_);
}

void BenchmarkEntries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.BenchmarkEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BenchmarkEntries::CopyFrom(const BenchmarkEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BenchmarkEntries)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BenchmarkEntries::IsInitialized() const {

  return true;
}

void BenchmarkEntries::Swap(BenchmarkEntries* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BenchmarkEntries temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BenchmarkEntries::UnsafeArenaSwap(BenchmarkEntries* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BenchmarkEntries::InternalSwap(BenchmarkEntries* other) {
  entry_.UnsafeArenaSwap(&other->entry_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BenchmarkEntries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BenchmarkEntries_descriptor_;
  metadata.reflection = BenchmarkEntries_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BenchmarkEntries

// repeated .tensorflow.BenchmarkEntry entry = 1;
int BenchmarkEntries::entry_size() const {
  return entry_.size();
}
void BenchmarkEntries::clear_entry() {
  entry_.Clear();
}
const ::tensorflow::BenchmarkEntry& BenchmarkEntries::entry(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.BenchmarkEntries.entry)
  return entry_.Get(index);
}
::tensorflow::BenchmarkEntry* BenchmarkEntries::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.BenchmarkEntries.entry)
  return entry_.Mutable(index);
}
::tensorflow::BenchmarkEntry* BenchmarkEntries::add_entry() {
  // @@protoc_insertion_point(field_add:tensorflow.BenchmarkEntries.entry)
  return entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::BenchmarkEntry >*
BenchmarkEntries::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.BenchmarkEntries.entry)
  return &entry_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::BenchmarkEntry >&
BenchmarkEntries::entry() const {
  // @@protoc_insertion_point(field_list:tensorflow.BenchmarkEntries.entry)
  return entry_;
}

inline const BenchmarkEntries* BenchmarkEntries::internal_default_instance() {
  return &BenchmarkEntries_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuildConfiguration::kModeFieldNumber;
const int BuildConfiguration::kCcFlagsFieldNumber;
const int BuildConfiguration::kOptsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuildConfiguration::BuildConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.BuildConfiguration)
}
BuildConfiguration::BuildConfiguration(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  cc_flags_(arena),
  opts_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BuildConfiguration)
}

void BuildConfiguration::InitAsDefaultInstance() {
}

BuildConfiguration::BuildConfiguration(const BuildConfiguration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.BuildConfiguration)
}

void BuildConfiguration::SharedCtor() {
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BuildConfiguration::~BuildConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.BuildConfiguration)
  SharedDtor();
}

void BuildConfiguration::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  mode_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void BuildConfiguration::ArenaDtor(void* object) {
  BuildConfiguration* _this = reinterpret_cast< BuildConfiguration* >(object);
  (void)_this;
}
void BuildConfiguration::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BuildConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildConfiguration_descriptor_;
}

const BuildConfiguration& BuildConfiguration::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BuildConfiguration> BuildConfiguration_default_instance_;

BuildConfiguration* BuildConfiguration::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BuildConfiguration>(arena);
}

void BuildConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BuildConfiguration)
  mode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  cc_flags_.Clear();
  opts_.Clear();
}

bool BuildConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.BuildConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mode().data(), this->mode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.BuildConfiguration.mode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cc_flags;
        break;
      }

      // repeated string cc_flags = 2;
      case 2: {
        if (tag == 18) {
         parse_cc_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cc_flags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cc_flags(this->cc_flags_size() - 1).data(),
            this->cc_flags(this->cc_flags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.BuildConfiguration.cc_flags"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cc_flags;
        if (input->ExpectTag(26)) goto parse_opts;
        break;
      }

      // repeated string opts = 3;
      case 3: {
        if (tag == 26) {
         parse_opts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_opts()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opts(this->opts_size() - 1).data(),
            this->opts(this->opts_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.BuildConfiguration.opts"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_opts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.BuildConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.BuildConfiguration)
  return false;
#undef DO_
}

void BuildConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.BuildConfiguration)
  // optional string mode = 1;
  if (this->mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BuildConfiguration.mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mode(), output);
  }

  // repeated string cc_flags = 2;
  for (int i = 0; i < this->cc_flags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cc_flags(i).data(), this->cc_flags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BuildConfiguration.cc_flags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cc_flags(i), output);
  }

  // repeated string opts = 3;
  for (int i = 0; i < this->opts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opts(i).data(), this->opts(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BuildConfiguration.opts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->opts(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.BuildConfiguration)
}

::google::protobuf::uint8* BuildConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BuildConfiguration)
  // optional string mode = 1;
  if (this->mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BuildConfiguration.mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mode(), target);
  }

  // repeated string cc_flags = 2;
  for (int i = 0; i < this->cc_flags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cc_flags(i).data(), this->cc_flags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BuildConfiguration.cc_flags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->cc_flags(i), target);
  }

  // repeated string opts = 3;
  for (int i = 0; i < this->opts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opts(i).data(), this->opts(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BuildConfiguration.opts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->opts(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BuildConfiguration)
  return target;
}

size_t BuildConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BuildConfiguration)
  size_t total_size = 0;

  // optional string mode = 1;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mode());
  }

  // repeated string cc_flags = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cc_flags_size());
  for (int i = 0; i < this->cc_flags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cc_flags(i));
  }

  // repeated string opts = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->opts_size());
  for (int i = 0; i < this->opts_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->opts(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.BuildConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BuildConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuildConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.BuildConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.BuildConfiguration)
    UnsafeMergeFrom(*source);
  }
}

void BuildConfiguration::MergeFrom(const BuildConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BuildConfiguration)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BuildConfiguration::UnsafeMergeFrom(const BuildConfiguration& from) {
  GOOGLE_DCHECK(&from != this);
  cc_flags_.UnsafeMergeFrom(from.cc_flags_);
  opts_.UnsafeMergeFrom(from.opts_);
  if (from.mode().size() > 0) {
    set_mode(from.mode());
  }
}

void BuildConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.BuildConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildConfiguration::CopyFrom(const BuildConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BuildConfiguration)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BuildConfiguration::IsInitialized() const {

  return true;
}

void BuildConfiguration::Swap(BuildConfiguration* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BuildConfiguration temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BuildConfiguration::UnsafeArenaSwap(BuildConfiguration* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BuildConfiguration::InternalSwap(BuildConfiguration* other) {
  mode_.Swap(&other->mode_);
  cc_flags_.UnsafeArenaSwap(&other->cc_flags_);
  opts_.UnsafeArenaSwap(&other->opts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuildConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildConfiguration_descriptor_;
  metadata.reflection = BuildConfiguration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BuildConfiguration

// optional string mode = 1;
void BuildConfiguration::clear_mode() {
  mode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BuildConfiguration::mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.BuildConfiguration.mode)
  return mode_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BuildConfiguration::set_mode(const ::std::string& value) {
  
  mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.BuildConfiguration.mode)
}
void BuildConfiguration::set_mode(const char* value) {
  
  mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.BuildConfiguration.mode)
}
void BuildConfiguration::set_mode(const char* value,
    size_t size) {
  
  mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.BuildConfiguration.mode)
}
::std::string* BuildConfiguration::mutable_mode() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.BuildConfiguration.mode)
  return mode_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BuildConfiguration::release_mode() {
  // @@protoc_insertion_point(field_release:tensorflow.BuildConfiguration.mode)
  
  return mode_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BuildConfiguration::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.BuildConfiguration.mode)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return mode_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BuildConfiguration::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    
  } else {
    
  }
  mode_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.BuildConfiguration.mode)
}
void BuildConfiguration::unsafe_arena_set_allocated_mode(
    ::std::string* mode) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (mode != NULL) {
    
  } else {
    
  }
  mode_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      mode, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.BuildConfiguration.mode)
}

// repeated string cc_flags = 2;
int BuildConfiguration::cc_flags_size() const {
  return cc_flags_.size();
}
void BuildConfiguration::clear_cc_flags() {
  cc_flags_.Clear();
}
const ::std::string& BuildConfiguration::cc_flags(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.BuildConfiguration.cc_flags)
  return cc_flags_.Get(index);
}
::std::string* BuildConfiguration::mutable_cc_flags(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.BuildConfiguration.cc_flags)
  return cc_flags_.Mutable(index);
}
void BuildConfiguration::set_cc_flags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.BuildConfiguration.cc_flags)
  cc_flags_.Mutable(index)->assign(value);
}
void BuildConfiguration::set_cc_flags(int index, const char* value) {
  cc_flags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.BuildConfiguration.cc_flags)
}
void BuildConfiguration::set_cc_flags(int index, const char* value, size_t size) {
  cc_flags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.BuildConfiguration.cc_flags)
}
::std::string* BuildConfiguration::add_cc_flags() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.BuildConfiguration.cc_flags)
  return cc_flags_.Add();
}
void BuildConfiguration::add_cc_flags(const ::std::string& value) {
  cc_flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.BuildConfiguration.cc_flags)
}
void BuildConfiguration::add_cc_flags(const char* value) {
  cc_flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.BuildConfiguration.cc_flags)
}
void BuildConfiguration::add_cc_flags(const char* value, size_t size) {
  cc_flags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.BuildConfiguration.cc_flags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BuildConfiguration::cc_flags() const {
  // @@protoc_insertion_point(field_list:tensorflow.BuildConfiguration.cc_flags)
  return cc_flags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BuildConfiguration::mutable_cc_flags() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.BuildConfiguration.cc_flags)
  return &cc_flags_;
}

// repeated string opts = 3;
int BuildConfiguration::opts_size() const {
  return opts_.size();
}
void BuildConfiguration::clear_opts() {
  opts_.Clear();
}
const ::std::string& BuildConfiguration::opts(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.BuildConfiguration.opts)
  return opts_.Get(index);
}
::std::string* BuildConfiguration::mutable_opts(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.BuildConfiguration.opts)
  return opts_.Mutable(index);
}
void BuildConfiguration::set_opts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.BuildConfiguration.opts)
  opts_.Mutable(index)->assign(value);
}
void BuildConfiguration::set_opts(int index, const char* value) {
  opts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.BuildConfiguration.opts)
}
void BuildConfiguration::set_opts(int index, const char* value, size_t size) {
  opts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.BuildConfiguration.opts)
}
::std::string* BuildConfiguration::add_opts() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.BuildConfiguration.opts)
  return opts_.Add();
}
void BuildConfiguration::add_opts(const ::std::string& value) {
  opts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.BuildConfiguration.opts)
}
void BuildConfiguration::add_opts(const char* value) {
  opts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.BuildConfiguration.opts)
}
void BuildConfiguration::add_opts(const char* value, size_t size) {
  opts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.BuildConfiguration.opts)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BuildConfiguration::opts() const {
  // @@protoc_insertion_point(field_list:tensorflow.BuildConfiguration.opts)
  return opts_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BuildConfiguration::mutable_opts() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.BuildConfiguration.opts)
  return &opts_;
}

inline const BuildConfiguration* BuildConfiguration::internal_default_instance() {
  return &BuildConfiguration_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitId::kChangelistFieldNumber;
const int CommitId::kHashFieldNumber;
const int CommitId::kSnapshotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitId::CommitId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CommitId)
}
CommitId::CommitId(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CommitId)
}

void CommitId::InitAsDefaultInstance() {
  CommitId_default_oneof_instance_->changelist_ = GOOGLE_LONGLONG(0);
  CommitId_default_oneof_instance_->hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CommitId::CommitId(const CommitId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CommitId)
}

void CommitId::SharedCtor() {
  snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kind();
  _cached_size_ = 0;
}

CommitId::~CommitId() {
  // @@protoc_insertion_point(destructor:tensorflow.CommitId)
  SharedDtor();
}

void CommitId::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  snapshot_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (has_kind()) {
    clear_kind();
  }
}

void CommitId::ArenaDtor(void* object) {
  CommitId* _this = reinterpret_cast< CommitId* >(object);
  (void)_this;
}
void CommitId::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CommitId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitId_descriptor_;
}

const CommitId& CommitId::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CommitId> CommitId_default_instance_;

CommitId* CommitId::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CommitId>(arena);
}

void CommitId::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.CommitId)
  switch (kind_case()) {
    case kChangelist: {
      // No need to clear
      break;
    }
    case kHash: {
      kind_.hash_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void CommitId::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CommitId)
  snapshot_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_kind();
}

bool CommitId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CommitId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 changelist = 1;
      case 1: {
        if (tag == 8) {
          clear_kind();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kind_.changelist_)));
          set_has_changelist();
        } else {
          goto handle_unusual;
        }
        goto after_hash;
        break;
      }

      // optional string hash = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CommitId.hash"));
        } else {
          goto handle_unusual;
        }
       after_hash:
        if (input->ExpectTag(26)) goto parse_snapshot;
        break;
      }

      // optional string snapshot = 3;
      case 3: {
        if (tag == 26) {
         parse_snapshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot().data(), this->snapshot().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CommitId.snapshot"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CommitId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CommitId)
  return false;
#undef DO_
}

void CommitId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CommitId)
  // optional int64 changelist = 1;
  if (has_changelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->changelist(), output);
  }

  // optional string hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CommitId.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash(), output);
  }

  // optional string snapshot = 3;
  if (this->snapshot().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CommitId.snapshot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->snapshot(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CommitId)
}

::google::protobuf::uint8* CommitId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CommitId)
  // optional int64 changelist = 1;
  if (has_changelist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->changelist(), target);
  }

  // optional string hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CommitId.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  // optional string snapshot = 3;
  if (this->snapshot().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CommitId.snapshot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->snapshot(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CommitId)
  return target;
}

size_t CommitId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CommitId)
  size_t total_size = 0;

  // optional string snapshot = 3;
  if (this->snapshot().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snapshot());
  }

  switch (kind_case()) {
    // optional int64 changelist = 1;
    case kChangelist: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->changelist());
      break;
    }
    // optional string hash = 2;
    case kHash: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CommitId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CommitId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CommitId)
    UnsafeMergeFrom(*source);
  }
}

void CommitId::MergeFrom(const CommitId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CommitId)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CommitId::UnsafeMergeFrom(const CommitId& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.kind_case()) {
    case kChangelist: {
      set_changelist(from.changelist());
      break;
    }
    case kHash: {
      set_hash(from.hash());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (from.snapshot().size() > 0) {
    set_snapshot(from.snapshot());
  }
}

void CommitId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CommitId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitId::CopyFrom(const CommitId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CommitId)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CommitId::IsInitialized() const {

  return true;
}

void CommitId::Swap(CommitId* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CommitId temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CommitId::UnsafeArenaSwap(CommitId* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CommitId::InternalSwap(CommitId* other) {
  snapshot_.Swap(&other->snapshot_);
  std::swap(kind_, other->kind_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitId_descriptor_;
  metadata.reflection = CommitId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitId

// optional int64 changelist = 1;
bool CommitId::has_changelist() const {
  return kind_case() == kChangelist;
}
void CommitId::set_has_changelist() {
  _oneof_case_[0] = kChangelist;
}
void CommitId::clear_changelist() {
  if (has_changelist()) {
    kind_.changelist_ = GOOGLE_LONGLONG(0);
    clear_has_kind();
  }
}
::google::protobuf::int64 CommitId::changelist() const {
  // @@protoc_insertion_point(field_get:tensorflow.CommitId.changelist)
  if (has_changelist()) {
    return kind_.changelist_;
  }
  return GOOGLE_LONGLONG(0);
}
void CommitId::set_changelist(::google::protobuf::int64 value) {
  if (!has_changelist()) {
    clear_kind();
    set_has_changelist();
  }
  kind_.changelist_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CommitId.changelist)
}

// optional string hash = 2;
bool CommitId::has_hash() const {
  return kind_case() == kHash;
}
void CommitId::set_has_hash() {
  _oneof_case_[0] = kHash;
}
void CommitId::clear_hash() {
  if (has_hash()) {
    kind_.hash_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_kind();
  }
}
const ::std::string& CommitId::hash() const {
  // @@protoc_insertion_point(field_get:tensorflow.CommitId.hash)
  if (has_hash()) {
    return kind_.hash_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void CommitId::set_hash(const ::std::string& value) {
  if (!has_hash()) {
    clear_kind();
    set_has_hash();
    kind_.hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  kind_.hash_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CommitId.hash)
}
void CommitId::set_hash(const char* value) {
  if (!has_hash()) {
    clear_kind();
    set_has_hash();
    kind_.hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  kind_.hash_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CommitId.hash)
}
void CommitId::set_hash(const char* value,
                             size_t size) {
  if (!has_hash()) {
    clear_kind();
    set_has_hash();
    kind_.hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  kind_.hash_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CommitId.hash)
}
::std::string* CommitId::mutable_hash() {
  if (!has_hash()) {
    clear_kind();
    set_has_hash();
    kind_.hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return kind_.hash_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:tensorflow.CommitId.hash)
}
::std::string* CommitId::release_hash() {
  // @@protoc_insertion_point(field_release:tensorflow.CommitId.hash)
  if (has_hash()) {
    clear_has_kind();
    return kind_.hash_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* CommitId::unsafe_arena_release_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CommitId.hash)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_hash()) {
    clear_has_kind();
    return kind_.hash_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void CommitId::set_allocated_hash(::std::string* hash) {
  if (!has_hash()) {
    kind_.hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_kind();
  if (hash != NULL) {
    set_has_hash();
    kind_.hash_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CommitId.hash)
}
void CommitId::unsafe_arena_set_allocated_hash(::std::string* hash) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_hash()) {
    kind_.hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_kind();
  if (hash) {
    set_has_hash();
    kind_.hash_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CommitId.hash)
}

// optional string snapshot = 3;
void CommitId::clear_snapshot() {
  snapshot_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CommitId::snapshot() const {
  // @@protoc_insertion_point(field_get:tensorflow.CommitId.snapshot)
  return snapshot_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommitId::set_snapshot(const ::std::string& value) {
  
  snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CommitId.snapshot)
}
void CommitId::set_snapshot(const char* value) {
  
  snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CommitId.snapshot)
}
void CommitId::set_snapshot(const char* value,
    size_t size) {
  
  snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CommitId.snapshot)
}
::std::string* CommitId::mutable_snapshot() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CommitId.snapshot)
  return snapshot_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CommitId::release_snapshot() {
  // @@protoc_insertion_point(field_release:tensorflow.CommitId.snapshot)
  
  return snapshot_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CommitId::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CommitId.snapshot)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return snapshot_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CommitId::set_allocated_snapshot(::std::string* snapshot) {
  if (snapshot != NULL) {
    
  } else {
    
  }
  snapshot_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CommitId.snapshot)
}
void CommitId::unsafe_arena_set_allocated_snapshot(
    ::std::string* snapshot) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (snapshot != NULL) {
    
  } else {
    
  }
  snapshot_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      snapshot, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CommitId.snapshot)
}

bool CommitId::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
void CommitId::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
CommitId::KindCase CommitId::kind_case() const {
  return CommitId::KindCase(_oneof_case_[0]);
}
inline const CommitId* CommitId::internal_default_instance() {
  return &CommitId_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPUInfo::kNumCoresFieldNumber;
const int CPUInfo::kNumCoresAllowedFieldNumber;
const int CPUInfo::kMhzPerCpuFieldNumber;
const int CPUInfo::kCpuInfoFieldNumber;
const int CPUInfo::kCpuGovernorFieldNumber;
const int CPUInfo::kCacheSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPUInfo::CPUInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CPUInfo)
}
CPUInfo::CPUInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  cache_size_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CPUInfo)
}

void CPUInfo::InitAsDefaultInstance() {
}

CPUInfo::CPUInfo(const CPUInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CPUInfo)
}

void CPUInfo::SharedCtor() {
  cache_size_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  cache_size_.SetEntryDescriptor(
      &::tensorflow::CPUInfo_CacheSizeEntry_descriptor_);
  cpu_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpu_governor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_cores_, 0, reinterpret_cast<char*>(&mhz_per_cpu_) -
    reinterpret_cast<char*>(&num_cores_) + sizeof(mhz_per_cpu_));
  _cached_size_ = 0;
}

CPUInfo::~CPUInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.CPUInfo)
  SharedDtor();
}

void CPUInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  cpu_info_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  cpu_governor_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CPUInfo::ArenaDtor(void* object) {
  CPUInfo* _this = reinterpret_cast< CPUInfo* >(object);
  (void)_this;
}
void CPUInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CPUInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPUInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPUInfo_descriptor_;
}

const CPUInfo& CPUInfo::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CPUInfo> CPUInfo_default_instance_;

CPUInfo* CPUInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CPUInfo>(arena);
}

void CPUInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CPUInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CPUInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CPUInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_cores_, mhz_per_cpu_);
  cpu_info_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  cpu_governor_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  cache_size_.Clear();
}

bool CPUInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CPUInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 num_cores = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_cores_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_cores_allowed;
        break;
      }

      // optional int64 num_cores_allowed = 2;
      case 2: {
        if (tag == 16) {
         parse_num_cores_allowed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_cores_allowed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_mhz_per_cpu;
        break;
      }

      // optional double mhz_per_cpu = 3;
      case 3: {
        if (tag == 25) {
         parse_mhz_per_cpu:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mhz_per_cpu_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cpu_info;
        break;
      }

      // optional string cpu_info = 4;
      case 4: {
        if (tag == 34) {
         parse_cpu_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cpu_info().data(), this->cpu_info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CPUInfo.cpu_info"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cpu_governor;
        break;
      }

      // optional string cpu_governor = 5;
      case 5: {
        if (tag == 42) {
         parse_cpu_governor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpu_governor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cpu_governor().data(), this->cpu_governor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CPUInfo.cpu_governor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cache_size;
        break;
      }

      // map<string, int64> cache_size = 6;
      case 6: {
        if (tag == 50) {
         parse_cache_size:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cache_size:
          CPUInfo_CacheSizeEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&cache_size_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CPUInfo.CacheSizeEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_cache_size;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CPUInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CPUInfo)
  return false;
#undef DO_
}

void CPUInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CPUInfo)
  // optional int64 num_cores = 1;
  if (this->num_cores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num_cores(), output);
  }

  // optional int64 num_cores_allowed = 2;
  if (this->num_cores_allowed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num_cores_allowed(), output);
  }

  // optional double mhz_per_cpu = 3;
  if (this->mhz_per_cpu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mhz_per_cpu(), output);
  }

  // optional string cpu_info = 4;
  if (this->cpu_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cpu_info().data(), this->cpu_info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CPUInfo.cpu_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cpu_info(), output);
  }

  // optional string cpu_governor = 5;
  if (this->cpu_governor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cpu_governor().data(), this->cpu_governor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CPUInfo.cpu_governor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cpu_governor(), output);
  }

  // map<string, int64> cache_size = 6;
  if (!this->cache_size().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.CPUInfo.CacheSizeEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->cache_size().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cache_size().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->cache_size().begin();
          it != this->cache_size().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CPUInfo_CacheSizeEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cache_size_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CPUInfo_CacheSizeEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->cache_size().begin();
          it != this->cache_size().end(); ++it) {
        entry.reset(cache_size_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CPUInfo)
}

::google::protobuf::uint8* CPUInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CPUInfo)
  // optional int64 num_cores = 1;
  if (this->num_cores() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->num_cores(), target);
  }

  // optional int64 num_cores_allowed = 2;
  if (this->num_cores_allowed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num_cores_allowed(), target);
  }

  // optional double mhz_per_cpu = 3;
  if (this->mhz_per_cpu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mhz_per_cpu(), target);
  }

  // optional string cpu_info = 4;
  if (this->cpu_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cpu_info().data(), this->cpu_info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CPUInfo.cpu_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cpu_info(), target);
  }

  // optional string cpu_governor = 5;
  if (this->cpu_governor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cpu_governor().data(), this->cpu_governor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CPUInfo.cpu_governor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cpu_governor(), target);
  }

  // map<string, int64> cache_size = 6;
  if (!this->cache_size().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.CPUInfo.CacheSizeEntry.key");
      }
    };

    if (deterministic &&
        this->cache_size().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cache_size().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->cache_size().begin();
          it != this->cache_size().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CPUInfo_CacheSizeEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cache_size_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CPUInfo_CacheSizeEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->cache_size().begin();
          it != this->cache_size().end(); ++it) {
        entry.reset(cache_size_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CPUInfo)
  return target;
}

size_t CPUInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CPUInfo)
  size_t total_size = 0;

  // optional int64 num_cores = 1;
  if (this->num_cores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_cores());
  }

  // optional int64 num_cores_allowed = 2;
  if (this->num_cores_allowed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_cores_allowed());
  }

  // optional double mhz_per_cpu = 3;
  if (this->mhz_per_cpu() != 0) {
    total_size += 1 + 8;
  }

  // optional string cpu_info = 4;
  if (this->cpu_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cpu_info());
  }

  // optional string cpu_governor = 5;
  if (this->cpu_governor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cpu_governor());
  }

  // map<string, int64> cache_size = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cache_size_size());
  {
    ::google::protobuf::scoped_ptr<CPUInfo_CacheSizeEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->cache_size().begin();
        it != this->cache_size().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(cache_size_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPUInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CPUInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CPUInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPUInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CPUInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CPUInfo)
    UnsafeMergeFrom(*source);
  }
}

void CPUInfo::MergeFrom(const CPUInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CPUInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CPUInfo::UnsafeMergeFrom(const CPUInfo& from) {
  GOOGLE_DCHECK(&from != this);
  cache_size_.MergeFrom(from.cache_size_);
  if (from.num_cores() != 0) {
    set_num_cores(from.num_cores());
  }
  if (from.num_cores_allowed() != 0) {
    set_num_cores_allowed(from.num_cores_allowed());
  }
  if (from.mhz_per_cpu() != 0) {
    set_mhz_per_cpu(from.mhz_per_cpu());
  }
  if (from.cpu_info().size() > 0) {
    set_cpu_info(from.cpu_info());
  }
  if (from.cpu_governor().size() > 0) {
    set_cpu_governor(from.cpu_governor());
  }
}

void CPUInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CPUInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPUInfo::CopyFrom(const CPUInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CPUInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CPUInfo::IsInitialized() const {

  return true;
}

void CPUInfo::Swap(CPUInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CPUInfo temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CPUInfo::UnsafeArenaSwap(CPUInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CPUInfo::InternalSwap(CPUInfo* other) {
  std::swap(num_cores_, other->num_cores_);
  std::swap(num_cores_allowed_, other->num_cores_allowed_);
  std::swap(mhz_per_cpu_, other->mhz_per_cpu_);
  cpu_info_.Swap(&other->cpu_info_);
  cpu_governor_.Swap(&other->cpu_governor_);
  cache_size_.Swap(&other->cache_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPUInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPUInfo_descriptor_;
  metadata.reflection = CPUInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPUInfo

// optional int64 num_cores = 1;
void CPUInfo::clear_num_cores() {
  num_cores_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CPUInfo::num_cores() const {
  // @@protoc_insertion_point(field_get:tensorflow.CPUInfo.num_cores)
  return num_cores_;
}
void CPUInfo::set_num_cores(::google::protobuf::int64 value) {
  
  num_cores_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CPUInfo.num_cores)
}

// optional int64 num_cores_allowed = 2;
void CPUInfo::clear_num_cores_allowed() {
  num_cores_allowed_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CPUInfo::num_cores_allowed() const {
  // @@protoc_insertion_point(field_get:tensorflow.CPUInfo.num_cores_allowed)
  return num_cores_allowed_;
}
void CPUInfo::set_num_cores_allowed(::google::protobuf::int64 value) {
  
  num_cores_allowed_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CPUInfo.num_cores_allowed)
}

// optional double mhz_per_cpu = 3;
void CPUInfo::clear_mhz_per_cpu() {
  mhz_per_cpu_ = 0;
}
double CPUInfo::mhz_per_cpu() const {
  // @@protoc_insertion_point(field_get:tensorflow.CPUInfo.mhz_per_cpu)
  return mhz_per_cpu_;
}
void CPUInfo::set_mhz_per_cpu(double value) {
  
  mhz_per_cpu_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CPUInfo.mhz_per_cpu)
}

// optional string cpu_info = 4;
void CPUInfo::clear_cpu_info() {
  cpu_info_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CPUInfo::cpu_info() const {
  // @@protoc_insertion_point(field_get:tensorflow.CPUInfo.cpu_info)
  return cpu_info_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPUInfo::set_cpu_info(const ::std::string& value) {
  
  cpu_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CPUInfo.cpu_info)
}
void CPUInfo::set_cpu_info(const char* value) {
  
  cpu_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CPUInfo.cpu_info)
}
void CPUInfo::set_cpu_info(const char* value,
    size_t size) {
  
  cpu_info_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CPUInfo.cpu_info)
}
::std::string* CPUInfo::mutable_cpu_info() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CPUInfo.cpu_info)
  return cpu_info_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CPUInfo::release_cpu_info() {
  // @@protoc_insertion_point(field_release:tensorflow.CPUInfo.cpu_info)
  
  return cpu_info_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CPUInfo::unsafe_arena_release_cpu_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CPUInfo.cpu_info)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return cpu_info_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CPUInfo::set_allocated_cpu_info(::std::string* cpu_info) {
  if (cpu_info != NULL) {
    
  } else {
    
  }
  cpu_info_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_info,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CPUInfo.cpu_info)
}
void CPUInfo::unsafe_arena_set_allocated_cpu_info(
    ::std::string* cpu_info) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cpu_info != NULL) {
    
  } else {
    
  }
  cpu_info_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cpu_info, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CPUInfo.cpu_info)
}

// optional string cpu_governor = 5;
void CPUInfo::clear_cpu_governor() {
  cpu_governor_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CPUInfo::cpu_governor() const {
  // @@protoc_insertion_point(field_get:tensorflow.CPUInfo.cpu_governor)
  return cpu_governor_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPUInfo::set_cpu_governor(const ::std::string& value) {
  
  cpu_governor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CPUInfo.cpu_governor)
}
void CPUInfo::set_cpu_governor(const char* value) {
  
  cpu_governor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CPUInfo.cpu_governor)
}
void CPUInfo::set_cpu_governor(const char* value,
    size_t size) {
  
  cpu_governor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CPUInfo.cpu_governor)
}
::std::string* CPUInfo::mutable_cpu_governor() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CPUInfo.cpu_governor)
  return cpu_governor_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CPUInfo::release_cpu_governor() {
  // @@protoc_insertion_point(field_release:tensorflow.CPUInfo.cpu_governor)
  
  return cpu_governor_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CPUInfo::unsafe_arena_release_cpu_governor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CPUInfo.cpu_governor)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return cpu_governor_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CPUInfo::set_allocated_cpu_governor(::std::string* cpu_governor) {
  if (cpu_governor != NULL) {
    
  } else {
    
  }
  cpu_governor_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_governor,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CPUInfo.cpu_governor)
}
void CPUInfo::unsafe_arena_set_allocated_cpu_governor(
    ::std::string* cpu_governor) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cpu_governor != NULL) {
    
  } else {
    
  }
  cpu_governor_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cpu_governor, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CPUInfo.cpu_governor)
}

// map<string, int64> cache_size = 6;
int CPUInfo::cache_size_size() const {
  return cache_size_.size();
}
void CPUInfo::clear_cache_size() {
  cache_size_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
CPUInfo::cache_size() const {
  // @@protoc_insertion_point(field_map:tensorflow.CPUInfo.cache_size)
  return cache_size_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
CPUInfo::mutable_cache_size() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.CPUInfo.cache_size)
  return cache_size_.MutableMap();
}

inline const CPUInfo* CPUInfo::internal_default_instance() {
  return &CPUInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryInfo::kTotalFieldNumber;
const int MemoryInfo::kAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryInfo::MemoryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryInfo)
}
MemoryInfo::MemoryInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryInfo)
}

void MemoryInfo::InitAsDefaultInstance() {
}

MemoryInfo::MemoryInfo(const MemoryInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryInfo)
}

void MemoryInfo::SharedCtor() {
  ::memset(&total_, 0, reinterpret_cast<char*>(&available_) -
    reinterpret_cast<char*>(&total_) + sizeof(available_));
  _cached_size_ = 0;
}

MemoryInfo::~MemoryInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryInfo)
  SharedDtor();
}

void MemoryInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void MemoryInfo::ArenaDtor(void* object) {
  MemoryInfo* _this = reinterpret_cast< MemoryInfo* >(object);
  (void)_this;
}
void MemoryInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MemoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryInfo_descriptor_;
}

const MemoryInfo& MemoryInfo::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MemoryInfo> MemoryInfo_default_instance_;

MemoryInfo* MemoryInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MemoryInfo>(arena);
}

void MemoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MemoryInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MemoryInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_, available_);

#undef ZR_HELPER_
#undef ZR_

}

bool MemoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 total = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_available;
        break;
      }

      // optional int64 available = 2;
      case 2: {
        if (tag == 16) {
         parse_available:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryInfo)
  return false;
#undef DO_
}

void MemoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryInfo)
  // optional int64 total = 1;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->total(), output);
  }

  // optional int64 available = 2;
  if (this->available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->available(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryInfo)
}

::google::protobuf::uint8* MemoryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryInfo)
  // optional int64 total = 1;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->total(), target);
  }

  // optional int64 available = 2;
  if (this->available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->available(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryInfo)
  return target;
}

size_t MemoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryInfo)
  size_t total_size = 0;

  // optional int64 total = 1;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total());
  }

  // optional int64 available = 2;
  if (this->available() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->available());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MemoryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryInfo)
    UnsafeMergeFrom(*source);
  }
}

void MemoryInfo::MergeFrom(const MemoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MemoryInfo::UnsafeMergeFrom(const MemoryInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.total() != 0) {
    set_total(from.total());
  }
  if (from.available() != 0) {
    set_available(from.available());
  }
}

void MemoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryInfo::CopyFrom(const MemoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MemoryInfo::IsInitialized() const {

  return true;
}

void MemoryInfo::Swap(MemoryInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryInfo temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void MemoryInfo::UnsafeArenaSwap(MemoryInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryInfo::InternalSwap(MemoryInfo* other) {
  std::swap(total_, other->total_);
  std::swap(available_, other->available_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryInfo_descriptor_;
  metadata.reflection = MemoryInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryInfo

// optional int64 total = 1;
void MemoryInfo::clear_total() {
  total_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryInfo::total() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryInfo.total)
  return total_;
}
void MemoryInfo::set_total(::google::protobuf::int64 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryInfo.total)
}

// optional int64 available = 2;
void MemoryInfo::clear_available() {
  available_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryInfo::available() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryInfo.available)
  return available_;
}
void MemoryInfo::set_available(::google::protobuf::int64 value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryInfo.available)
}

inline const MemoryInfo* MemoryInfo::internal_default_instance() {
  return &MemoryInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPUInfo::kModelFieldNumber;
const int GPUInfo::kUuidFieldNumber;
const int GPUInfo::kBusIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPUInfo::GPUInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GPUInfo)
}
GPUInfo::GPUInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GPUInfo)
}

void GPUInfo::InitAsDefaultInstance() {
}

GPUInfo::GPUInfo(const GPUInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GPUInfo)
}

void GPUInfo::SharedCtor() {
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bus_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GPUInfo::~GPUInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GPUInfo)
  SharedDtor();
}

void GPUInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  model_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  uuid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  bus_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GPUInfo::ArenaDtor(void* object) {
  GPUInfo* _this = reinterpret_cast< GPUInfo* >(object);
  (void)_this;
}
void GPUInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GPUInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPUInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPUInfo_descriptor_;
}

const GPUInfo& GPUInfo::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GPUInfo> GPUInfo_default_instance_;

GPUInfo* GPUInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GPUInfo>(arena);
}

void GPUInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GPUInfo)
  model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  uuid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  bus_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GPUInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GPUInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GPUInfo.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional string uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GPUInfo.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bus_id;
        break;
      }

      // optional string bus_id = 3;
      case 3: {
        if (tag == 26) {
         parse_bus_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bus_id().data(), this->bus_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.GPUInfo.bus_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GPUInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GPUInfo)
  return false;
#undef DO_
}

void GPUInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GPUInfo)
  // optional string model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUInfo.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model(), output);
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUInfo.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // optional string bus_id = 3;
  if (this->bus_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bus_id().data(), this->bus_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUInfo.bus_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bus_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.GPUInfo)
}

::google::protobuf::uint8* GPUInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GPUInfo)
  // optional string model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUInfo.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model(), target);
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUInfo.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // optional string bus_id = 3;
  if (this->bus_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bus_id().data(), this->bus_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUInfo.bus_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bus_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GPUInfo)
  return target;
}

size_t GPUInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GPUInfo)
  size_t total_size = 0;

  // optional string model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // optional string uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional string bus_id = 3;
  if (this->bus_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bus_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPUInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GPUInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GPUInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GPUInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GPUInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GPUInfo)
    UnsafeMergeFrom(*source);
  }
}

void GPUInfo::MergeFrom(const GPUInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GPUInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GPUInfo::UnsafeMergeFrom(const GPUInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.model().size() > 0) {
    set_model(from.model());
  }
  if (from.uuid().size() > 0) {
    set_uuid(from.uuid());
  }
  if (from.bus_id().size() > 0) {
    set_bus_id(from.bus_id());
  }
}

void GPUInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GPUInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUInfo::CopyFrom(const GPUInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GPUInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GPUInfo::IsInitialized() const {

  return true;
}

void GPUInfo::Swap(GPUInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GPUInfo temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void GPUInfo::UnsafeArenaSwap(GPUInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GPUInfo::InternalSwap(GPUInfo* other) {
  model_.Swap(&other->model_);
  uuid_.Swap(&other->uuid_);
  bus_id_.Swap(&other->bus_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GPUInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPUInfo_descriptor_;
  metadata.reflection = GPUInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GPUInfo

// optional string model = 1;
void GPUInfo::clear_model() {
  model_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GPUInfo::model() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUInfo.model)
  return model_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GPUInfo::set_model(const ::std::string& value) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GPUInfo.model)
}
void GPUInfo::set_model(const char* value) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GPUInfo.model)
}
void GPUInfo::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GPUInfo.model)
}
::std::string* GPUInfo::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUInfo.model)
  return model_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GPUInfo::release_model() {
  // @@protoc_insertion_point(field_release:tensorflow.GPUInfo.model)
  
  return model_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GPUInfo::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GPUInfo.model)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return model_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GPUInfo::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUInfo.model)
}
void GPUInfo::unsafe_arena_set_allocated_model(
    ::std::string* model) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (model != NULL) {
    
  } else {
    
  }
  model_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      model, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GPUInfo.model)
}

// optional string uuid = 2;
void GPUInfo::clear_uuid() {
  uuid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GPUInfo::uuid() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUInfo.uuid)
  return uuid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GPUInfo::set_uuid(const ::std::string& value) {
  
  uuid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GPUInfo.uuid)
}
void GPUInfo::set_uuid(const char* value) {
  
  uuid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GPUInfo.uuid)
}
void GPUInfo::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GPUInfo.uuid)
}
::std::string* GPUInfo::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUInfo.uuid)
  return uuid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GPUInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:tensorflow.GPUInfo.uuid)
  
  return uuid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GPUInfo::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GPUInfo.uuid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return uuid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GPUInfo::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUInfo.uuid)
}
void GPUInfo::unsafe_arena_set_allocated_uuid(
    ::std::string* uuid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GPUInfo.uuid)
}

// optional string bus_id = 3;
void GPUInfo::clear_bus_id() {
  bus_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GPUInfo::bus_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GPUInfo.bus_id)
  return bus_id_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GPUInfo::set_bus_id(const ::std::string& value) {
  
  bus_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GPUInfo.bus_id)
}
void GPUInfo::set_bus_id(const char* value) {
  
  bus_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GPUInfo.bus_id)
}
void GPUInfo::set_bus_id(const char* value,
    size_t size) {
  
  bus_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GPUInfo.bus_id)
}
::std::string* GPUInfo::mutable_bus_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GPUInfo.bus_id)
  return bus_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GPUInfo::release_bus_id() {
  // @@protoc_insertion_point(field_release:tensorflow.GPUInfo.bus_id)
  
  return bus_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GPUInfo::unsafe_arena_release_bus_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GPUInfo.bus_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return bus_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GPUInfo::set_allocated_bus_id(::std::string* bus_id) {
  if (bus_id != NULL) {
    
  } else {
    
  }
  bus_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bus_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GPUInfo.bus_id)
}
void GPUInfo::unsafe_arena_set_allocated_bus_id(
    ::std::string* bus_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (bus_id != NULL) {
    
  } else {
    
  }
  bus_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      bus_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GPUInfo.bus_id)
}

inline const GPUInfo* GPUInfo::internal_default_instance() {
  return &GPUInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlatformInfo::kBitsFieldNumber;
const int PlatformInfo::kLinkageFieldNumber;
const int PlatformInfo::kMachineFieldNumber;
const int PlatformInfo::kReleaseFieldNumber;
const int PlatformInfo::kSystemFieldNumber;
const int PlatformInfo::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlatformInfo::PlatformInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.PlatformInfo)
}
PlatformInfo::PlatformInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.PlatformInfo)
}

void PlatformInfo::InitAsDefaultInstance() {
}

PlatformInfo::PlatformInfo(const PlatformInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.PlatformInfo)
}

void PlatformInfo::SharedCtor() {
  bits_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  release_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PlatformInfo::~PlatformInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.PlatformInfo)
  SharedDtor();
}

void PlatformInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  bits_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  linkage_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  machine_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  release_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  system_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  version_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void PlatformInfo::ArenaDtor(void* object) {
  PlatformInfo* _this = reinterpret_cast< PlatformInfo* >(object);
  (void)_this;
}
void PlatformInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PlatformInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlatformInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlatformInfo_descriptor_;
}

const PlatformInfo& PlatformInfo::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PlatformInfo> PlatformInfo_default_instance_;

PlatformInfo* PlatformInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PlatformInfo>(arena);
}

void PlatformInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.PlatformInfo)
  bits_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  linkage_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  machine_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  release_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  system_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool PlatformInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.PlatformInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bits = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bits()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bits().data(), this->bits().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PlatformInfo.bits"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_linkage;
        break;
      }

      // optional string linkage = 2;
      case 2: {
        if (tag == 18) {
         parse_linkage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->linkage().data(), this->linkage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PlatformInfo.linkage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_machine;
        break;
      }

      // optional string machine = 3;
      case 3: {
        if (tag == 26) {
         parse_machine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine().data(), this->machine().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PlatformInfo.machine"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_release;
        break;
      }

      // optional string release = 4;
      case 4: {
        if (tag == 34) {
         parse_release:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->release().data(), this->release().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PlatformInfo.release"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_system;
        break;
      }

      // optional string system = 5;
      case 5: {
        if (tag == 42) {
         parse_system:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system().data(), this->system().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PlatformInfo.system"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // optional string version = 6;
      case 6: {
        if (tag == 50) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.PlatformInfo.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.PlatformInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.PlatformInfo)
  return false;
#undef DO_
}

void PlatformInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.PlatformInfo)
  // optional string bits = 1;
  if (this->bits().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bits().data(), this->bits().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.bits");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bits(), output);
  }

  // optional string linkage = 2;
  if (this->linkage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->linkage().data(), this->linkage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.linkage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->linkage(), output);
  }

  // optional string machine = 3;
  if (this->machine().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine().data(), this->machine().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.machine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->machine(), output);
  }

  // optional string release = 4;
  if (this->release().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->release().data(), this->release().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.release");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->release(), output);
  }

  // optional string system = 5;
  if (this->system().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system().data(), this->system().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.system");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->system(), output);
  }

  // optional string version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.PlatformInfo)
}

::google::protobuf::uint8* PlatformInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.PlatformInfo)
  // optional string bits = 1;
  if (this->bits().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bits().data(), this->bits().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.bits");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bits(), target);
  }

  // optional string linkage = 2;
  if (this->linkage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->linkage().data(), this->linkage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.linkage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->linkage(), target);
  }

  // optional string machine = 3;
  if (this->machine().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine().data(), this->machine().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.machine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine(), target);
  }

  // optional string release = 4;
  if (this->release().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->release().data(), this->release().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.release");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->release(), target);
  }

  // optional string system = 5;
  if (this->system().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system().data(), this->system().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.system");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->system(), target);
  }

  // optional string version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.PlatformInfo)
  return target;
}

size_t PlatformInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.PlatformInfo)
  size_t total_size = 0;

  // optional string bits = 1;
  if (this->bits().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bits());
  }

  // optional string linkage = 2;
  if (this->linkage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->linkage());
  }

  // optional string machine = 3;
  if (this->machine().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine());
  }

  // optional string release = 4;
  if (this->release().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->release());
  }

  // optional string system = 5;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system());
  }

  // optional string version = 6;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlatformInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.PlatformInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlatformInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlatformInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.PlatformInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.PlatformInfo)
    UnsafeMergeFrom(*source);
  }
}

void PlatformInfo::MergeFrom(const PlatformInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.PlatformInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PlatformInfo::UnsafeMergeFrom(const PlatformInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bits().size() > 0) {
    set_bits(from.bits());
  }
  if (from.linkage().size() > 0) {
    set_linkage(from.linkage());
  }
  if (from.machine().size() > 0) {
    set_machine(from.machine());
  }
  if (from.release().size() > 0) {
    set_release(from.release());
  }
  if (from.system().size() > 0) {
    set_system(from.system());
  }
  if (from.version().size() > 0) {
    set_version(from.version());
  }
}

void PlatformInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.PlatformInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlatformInfo::CopyFrom(const PlatformInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.PlatformInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PlatformInfo::IsInitialized() const {

  return true;
}

void PlatformInfo::Swap(PlatformInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PlatformInfo temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void PlatformInfo::UnsafeArenaSwap(PlatformInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PlatformInfo::InternalSwap(PlatformInfo* other) {
  bits_.Swap(&other->bits_);
  linkage_.Swap(&other->linkage_);
  machine_.Swap(&other->machine_);
  release_.Swap(&other->release_);
  system_.Swap(&other->system_);
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlatformInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlatformInfo_descriptor_;
  metadata.reflection = PlatformInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlatformInfo

// optional string bits = 1;
void PlatformInfo::clear_bits() {
  bits_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PlatformInfo::bits() const {
  // @@protoc_insertion_point(field_get:tensorflow.PlatformInfo.bits)
  return bits_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlatformInfo::set_bits(const ::std::string& value) {
  
  bits_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.PlatformInfo.bits)
}
void PlatformInfo::set_bits(const char* value) {
  
  bits_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.PlatformInfo.bits)
}
void PlatformInfo::set_bits(const char* value,
    size_t size) {
  
  bits_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PlatformInfo.bits)
}
::std::string* PlatformInfo::mutable_bits() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.PlatformInfo.bits)
  return bits_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PlatformInfo::release_bits() {
  // @@protoc_insertion_point(field_release:tensorflow.PlatformInfo.bits)
  
  return bits_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PlatformInfo::unsafe_arena_release_bits() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.PlatformInfo.bits)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return bits_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PlatformInfo::set_allocated_bits(::std::string* bits) {
  if (bits != NULL) {
    
  } else {
    
  }
  bits_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bits,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.PlatformInfo.bits)
}
void PlatformInfo::unsafe_arena_set_allocated_bits(
    ::std::string* bits) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (bits != NULL) {
    
  } else {
    
  }
  bits_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      bits, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.PlatformInfo.bits)
}

// optional string linkage = 2;
void PlatformInfo::clear_linkage() {
  linkage_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PlatformInfo::linkage() const {
  // @@protoc_insertion_point(field_get:tensorflow.PlatformInfo.linkage)
  return linkage_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlatformInfo::set_linkage(const ::std::string& value) {
  
  linkage_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.PlatformInfo.linkage)
}
void PlatformInfo::set_linkage(const char* value) {
  
  linkage_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.PlatformInfo.linkage)
}
void PlatformInfo::set_linkage(const char* value,
    size_t size) {
  
  linkage_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PlatformInfo.linkage)
}
::std::string* PlatformInfo::mutable_linkage() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.PlatformInfo.linkage)
  return linkage_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PlatformInfo::release_linkage() {
  // @@protoc_insertion_point(field_release:tensorflow.PlatformInfo.linkage)
  
  return linkage_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PlatformInfo::unsafe_arena_release_linkage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.PlatformInfo.linkage)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return linkage_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PlatformInfo::set_allocated_linkage(::std::string* linkage) {
  if (linkage != NULL) {
    
  } else {
    
  }
  linkage_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkage,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.PlatformInfo.linkage)
}
void PlatformInfo::unsafe_arena_set_allocated_linkage(
    ::std::string* linkage) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (linkage != NULL) {
    
  } else {
    
  }
  linkage_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      linkage, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.PlatformInfo.linkage)
}

// optional string machine = 3;
void PlatformInfo::clear_machine() {
  machine_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PlatformInfo::machine() const {
  // @@protoc_insertion_point(field_get:tensorflow.PlatformInfo.machine)
  return machine_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlatformInfo::set_machine(const ::std::string& value) {
  
  machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.PlatformInfo.machine)
}
void PlatformInfo::set_machine(const char* value) {
  
  machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.PlatformInfo.machine)
}
void PlatformInfo::set_machine(const char* value,
    size_t size) {
  
  machine_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PlatformInfo.machine)
}
::std::string* PlatformInfo::mutable_machine() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.PlatformInfo.machine)
  return machine_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PlatformInfo::release_machine() {
  // @@protoc_insertion_point(field_release:tensorflow.PlatformInfo.machine)
  
  return machine_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PlatformInfo::unsafe_arena_release_machine() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.PlatformInfo.machine)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return machine_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PlatformInfo::set_allocated_machine(::std::string* machine) {
  if (machine != NULL) {
    
  } else {
    
  }
  machine_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.PlatformInfo.machine)
}
void PlatformInfo::unsafe_arena_set_allocated_machine(
    ::std::string* machine) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (machine != NULL) {
    
  } else {
    
  }
  machine_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      machine, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.PlatformInfo.machine)
}

// optional string release = 4;
void PlatformInfo::clear_release() {
  release_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PlatformInfo::release() const {
  // @@protoc_insertion_point(field_get:tensorflow.PlatformInfo.release)
  return release_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlatformInfo::set_release(const ::std::string& value) {
  
  release_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.PlatformInfo.release)
}
void PlatformInfo::set_release(const char* value) {
  
  release_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.PlatformInfo.release)
}
void PlatformInfo::set_release(const char* value,
    size_t size) {
  
  release_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PlatformInfo.release)
}
::std::string* PlatformInfo::mutable_release() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.PlatformInfo.release)
  return release_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PlatformInfo::release_release() {
  // @@protoc_insertion_point(field_release:tensorflow.PlatformInfo.release)
  
  return release_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PlatformInfo::unsafe_arena_release_release() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.PlatformInfo.release)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return release_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PlatformInfo::set_allocated_release(::std::string* release) {
  if (release != NULL) {
    
  } else {
    
  }
  release_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), release,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.PlatformInfo.release)
}
void PlatformInfo::unsafe_arena_set_allocated_release(
    ::std::string* release) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (release != NULL) {
    
  } else {
    
  }
  release_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      release, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.PlatformInfo.release)
}

// optional string system = 5;
void PlatformInfo::clear_system() {
  system_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PlatformInfo::system() const {
  // @@protoc_insertion_point(field_get:tensorflow.PlatformInfo.system)
  return system_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlatformInfo::set_system(const ::std::string& value) {
  
  system_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.PlatformInfo.system)
}
void PlatformInfo::set_system(const char* value) {
  
  system_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.PlatformInfo.system)
}
void PlatformInfo::set_system(const char* value,
    size_t size) {
  
  system_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PlatformInfo.system)
}
::std::string* PlatformInfo::mutable_system() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.PlatformInfo.system)
  return system_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PlatformInfo::release_system() {
  // @@protoc_insertion_point(field_release:tensorflow.PlatformInfo.system)
  
  return system_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PlatformInfo::unsafe_arena_release_system() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.PlatformInfo.system)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return system_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PlatformInfo::set_allocated_system(::std::string* system) {
  if (system != NULL) {
    
  } else {
    
  }
  system_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.PlatformInfo.system)
}
void PlatformInfo::unsafe_arena_set_allocated_system(
    ::std::string* system) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (system != NULL) {
    
  } else {
    
  }
  system_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      system, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.PlatformInfo.system)
}

// optional string version = 6;
void PlatformInfo::clear_version() {
  version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PlatformInfo::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.PlatformInfo.version)
  return version_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlatformInfo::set_version(const ::std::string& value) {
  
  version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.PlatformInfo.version)
}
void PlatformInfo::set_version(const char* value) {
  
  version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.PlatformInfo.version)
}
void PlatformInfo::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.PlatformInfo.version)
}
::std::string* PlatformInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.PlatformInfo.version)
  return version_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PlatformInfo::release_version() {
  // @@protoc_insertion_point(field_release:tensorflow.PlatformInfo.version)
  
  return version_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PlatformInfo::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.PlatformInfo.version)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return version_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PlatformInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.PlatformInfo.version)
}
void PlatformInfo::unsafe_arena_set_allocated_version(
    ::std::string* version) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (version != NULL) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      version, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.PlatformInfo.version)
}

inline const PlatformInfo* PlatformInfo::internal_default_instance() {
  return &PlatformInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvailableDeviceInfo::kNameFieldNumber;
const int AvailableDeviceInfo::kTypeFieldNumber;
const int AvailableDeviceInfo::kMemoryLimitFieldNumber;
const int AvailableDeviceInfo::kPhysicalDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvailableDeviceInfo::AvailableDeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AvailableDeviceInfo)
}
AvailableDeviceInfo::AvailableDeviceInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AvailableDeviceInfo)
}

void AvailableDeviceInfo::InitAsDefaultInstance() {
}

AvailableDeviceInfo::AvailableDeviceInfo(const AvailableDeviceInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.AvailableDeviceInfo)
}

void AvailableDeviceInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memory_limit_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

AvailableDeviceInfo::~AvailableDeviceInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.AvailableDeviceInfo)
  SharedDtor();
}

void AvailableDeviceInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  physical_description_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void AvailableDeviceInfo::ArenaDtor(void* object) {
  AvailableDeviceInfo* _this = reinterpret_cast< AvailableDeviceInfo* >(object);
  (void)_this;
}
void AvailableDeviceInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AvailableDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvailableDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvailableDeviceInfo_descriptor_;
}

const AvailableDeviceInfo& AvailableDeviceInfo::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AvailableDeviceInfo> AvailableDeviceInfo_default_instance_;

AvailableDeviceInfo* AvailableDeviceInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AvailableDeviceInfo>(arena);
}

void AvailableDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AvailableDeviceInfo)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  memory_limit_ = GOOGLE_LONGLONG(0);
  physical_description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool AvailableDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AvailableDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.AvailableDeviceInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.AvailableDeviceInfo.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_memory_limit;
        break;
      }

      // optional int64 memory_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_memory_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memory_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_physical_description;
        break;
      }

      // optional string physical_description = 4;
      case 4: {
        if (tag == 34) {
         parse_physical_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_physical_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->physical_description().data(), this->physical_description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.AvailableDeviceInfo.physical_description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AvailableDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AvailableDeviceInfo)
  return false;
#undef DO_
}

void AvailableDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AvailableDeviceInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AvailableDeviceInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AvailableDeviceInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional int64 memory_limit = 3;
  if (this->memory_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->memory_limit(), output);
  }

  // optional string physical_description = 4;
  if (this->physical_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->physical_description().data(), this->physical_description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AvailableDeviceInfo.physical_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->physical_description(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.AvailableDeviceInfo)
}

::google::protobuf::uint8* AvailableDeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AvailableDeviceInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AvailableDeviceInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AvailableDeviceInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional int64 memory_limit = 3;
  if (this->memory_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->memory_limit(), target);
  }

  // optional string physical_description = 4;
  if (this->physical_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->physical_description().data(), this->physical_description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AvailableDeviceInfo.physical_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->physical_description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AvailableDeviceInfo)
  return target;
}

size_t AvailableDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AvailableDeviceInfo)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional int64 memory_limit = 3;
  if (this->memory_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->memory_limit());
  }

  // optional string physical_description = 4;
  if (this->physical_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->physical_description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvailableDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AvailableDeviceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AvailableDeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvailableDeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AvailableDeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AvailableDeviceInfo)
    UnsafeMergeFrom(*source);
  }
}

void AvailableDeviceInfo::MergeFrom(const AvailableDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AvailableDeviceInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AvailableDeviceInfo::UnsafeMergeFrom(const AvailableDeviceInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.type().size() > 0) {
    set_type(from.type());
  }
  if (from.memory_limit() != 0) {
    set_memory_limit(from.memory_limit());
  }
  if (from.physical_description().size() > 0) {
    set_physical_description(from.physical_description());
  }
}

void AvailableDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AvailableDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvailableDeviceInfo::CopyFrom(const AvailableDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AvailableDeviceInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AvailableDeviceInfo::IsInitialized() const {

  return true;
}

void AvailableDeviceInfo::Swap(AvailableDeviceInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AvailableDeviceInfo temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void AvailableDeviceInfo::UnsafeArenaSwap(AvailableDeviceInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AvailableDeviceInfo::InternalSwap(AvailableDeviceInfo* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  std::swap(memory_limit_, other->memory_limit_);
  physical_description_.Swap(&other->physical_description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvailableDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvailableDeviceInfo_descriptor_;
  metadata.reflection = AvailableDeviceInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvailableDeviceInfo

// optional string name = 1;
void AvailableDeviceInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AvailableDeviceInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.AvailableDeviceInfo.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvailableDeviceInfo::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.AvailableDeviceInfo.name)
}
void AvailableDeviceInfo::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.AvailableDeviceInfo.name)
}
void AvailableDeviceInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.AvailableDeviceInfo.name)
}
::std::string* AvailableDeviceInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.AvailableDeviceInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AvailableDeviceInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.AvailableDeviceInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AvailableDeviceInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.AvailableDeviceInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AvailableDeviceInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AvailableDeviceInfo.name)
}
void AvailableDeviceInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.AvailableDeviceInfo.name)
}

// optional string type = 2;
void AvailableDeviceInfo::clear_type() {
  type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AvailableDeviceInfo::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.AvailableDeviceInfo.type)
  return type_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvailableDeviceInfo::set_type(const ::std::string& value) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.AvailableDeviceInfo.type)
}
void AvailableDeviceInfo::set_type(const char* value) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.AvailableDeviceInfo.type)
}
void AvailableDeviceInfo::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.AvailableDeviceInfo.type)
}
::std::string* AvailableDeviceInfo::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.AvailableDeviceInfo.type)
  return type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AvailableDeviceInfo::release_type() {
  // @@protoc_insertion_point(field_release:tensorflow.AvailableDeviceInfo.type)
  
  return type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AvailableDeviceInfo::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.AvailableDeviceInfo.type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AvailableDeviceInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AvailableDeviceInfo.type)
}
void AvailableDeviceInfo::unsafe_arena_set_allocated_type(
    ::std::string* type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (type != NULL) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.AvailableDeviceInfo.type)
}

// optional int64 memory_limit = 3;
void AvailableDeviceInfo::clear_memory_limit() {
  memory_limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AvailableDeviceInfo::memory_limit() const {
  // @@protoc_insertion_point(field_get:tensorflow.AvailableDeviceInfo.memory_limit)
  return memory_limit_;
}
void AvailableDeviceInfo::set_memory_limit(::google::protobuf::int64 value) {
  
  memory_limit_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AvailableDeviceInfo.memory_limit)
}

// optional string physical_description = 4;
void AvailableDeviceInfo::clear_physical_description() {
  physical_description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AvailableDeviceInfo::physical_description() const {
  // @@protoc_insertion_point(field_get:tensorflow.AvailableDeviceInfo.physical_description)
  return physical_description_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AvailableDeviceInfo::set_physical_description(const ::std::string& value) {
  
  physical_description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.AvailableDeviceInfo.physical_description)
}
void AvailableDeviceInfo::set_physical_description(const char* value) {
  
  physical_description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.AvailableDeviceInfo.physical_description)
}
void AvailableDeviceInfo::set_physical_description(const char* value,
    size_t size) {
  
  physical_description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.AvailableDeviceInfo.physical_description)
}
::std::string* AvailableDeviceInfo::mutable_physical_description() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.AvailableDeviceInfo.physical_description)
  return physical_description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AvailableDeviceInfo::release_physical_description() {
  // @@protoc_insertion_point(field_release:tensorflow.AvailableDeviceInfo.physical_description)
  
  return physical_description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AvailableDeviceInfo::unsafe_arena_release_physical_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.AvailableDeviceInfo.physical_description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return physical_description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AvailableDeviceInfo::set_allocated_physical_description(::std::string* physical_description) {
  if (physical_description != NULL) {
    
  } else {
    
  }
  physical_description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physical_description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AvailableDeviceInfo.physical_description)
}
void AvailableDeviceInfo::unsafe_arena_set_allocated_physical_description(
    ::std::string* physical_description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (physical_description != NULL) {
    
  } else {
    
  }
  physical_description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      physical_description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.AvailableDeviceInfo.physical_description)
}

inline const AvailableDeviceInfo* AvailableDeviceInfo::internal_default_instance() {
  return &AvailableDeviceInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MachineConfiguration::_slow_mutable_platform_info() {
  platform_info_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::PlatformInfo >(
      GetArenaNoVirtual());
}
::tensorflow::PlatformInfo* MachineConfiguration::_slow_release_platform_info() {
  if (platform_info_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::PlatformInfo* temp = new ::tensorflow::PlatformInfo(*platform_info_);
    platform_info_ = NULL;
    return temp;
  }
}
::tensorflow::PlatformInfo* MachineConfiguration::unsafe_arena_release_platform_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MachineConfiguration.platform_info)
  
  ::tensorflow::PlatformInfo* temp = platform_info_;
  platform_info_ = NULL;
  return temp;
}
void MachineConfiguration::_slow_set_allocated_platform_info(
    ::google::protobuf::Arena* message_arena, ::tensorflow::PlatformInfo** platform_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*platform_info) == NULL) {
      message_arena->Own(*platform_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*platform_info)) {
      ::tensorflow::PlatformInfo* new_platform_info = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::PlatformInfo >(
            message_arena);
      new_platform_info->CopyFrom(**platform_info);
      *platform_info = new_platform_info;
    }
}
void MachineConfiguration::unsafe_arena_set_allocated_platform_info(
    ::tensorflow::PlatformInfo* platform_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete platform_info_;
  }
  platform_info_ = platform_info;
  if (platform_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MachineConfiguration.platform_info)
}
void MachineConfiguration::_slow_mutable_cpu_info() {
  cpu_info_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::CPUInfo >(
      GetArenaNoVirtual());
}
::tensorflow::CPUInfo* MachineConfiguration::_slow_release_cpu_info() {
  if (cpu_info_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::CPUInfo* temp = new ::tensorflow::CPUInfo(*cpu_info_);
    cpu_info_ = NULL;
    return temp;
  }
}
::tensorflow::CPUInfo* MachineConfiguration::unsafe_arena_release_cpu_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MachineConfiguration.cpu_info)
  
  ::tensorflow::CPUInfo* temp = cpu_info_;
  cpu_info_ = NULL;
  return temp;
}
void MachineConfiguration::_slow_set_allocated_cpu_info(
    ::google::protobuf::Arena* message_arena, ::tensorflow::CPUInfo** cpu_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*cpu_info) == NULL) {
      message_arena->Own(*cpu_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*cpu_info)) {
      ::tensorflow::CPUInfo* new_cpu_info = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::CPUInfo >(
            message_arena);
      new_cpu_info->CopyFrom(**cpu_info);
      *cpu_info = new_cpu_info;
    }
}
void MachineConfiguration::unsafe_arena_set_allocated_cpu_info(
    ::tensorflow::CPUInfo* cpu_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete cpu_info_;
  }
  cpu_info_ = cpu_info;
  if (cpu_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MachineConfiguration.cpu_info)
}
void MachineConfiguration::_slow_mutable_memory_info() {
  memory_info_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::MemoryInfo >(
      GetArenaNoVirtual());
}
::tensorflow::MemoryInfo* MachineConfiguration::_slow_release_memory_info() {
  if (memory_info_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::MemoryInfo* temp = new ::tensorflow::MemoryInfo(*memory_info_);
    memory_info_ = NULL;
    return temp;
  }
}
::tensorflow::MemoryInfo* MachineConfiguration::unsafe_arena_release_memory_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MachineConfiguration.memory_info)
  
  ::tensorflow::MemoryInfo* temp = memory_info_;
  memory_info_ = NULL;
  return temp;
}
void MachineConfiguration::_slow_set_allocated_memory_info(
    ::google::protobuf::Arena* message_arena, ::tensorflow::MemoryInfo** memory_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*memory_info) == NULL) {
      message_arena->Own(*memory_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*memory_info)) {
      ::tensorflow::MemoryInfo* new_memory_info = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::MemoryInfo >(
            message_arena);
      new_memory_info->CopyFrom(**memory_info);
      *memory_info = new_memory_info;
    }
}
void MachineConfiguration::unsafe_arena_set_allocated_memory_info(
    ::tensorflow::MemoryInfo* memory_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete memory_info_;
  }
  memory_info_ = memory_info;
  if (memory_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MachineConfiguration.memory_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MachineConfiguration::kHostnameFieldNumber;
const int MachineConfiguration::kSerialIdentifierFieldNumber;
const int MachineConfiguration::kPlatformInfoFieldNumber;
const int MachineConfiguration::kCpuInfoFieldNumber;
const int MachineConfiguration::kDeviceInfoFieldNumber;
const int MachineConfiguration::kAvailableDeviceInfoFieldNumber;
const int MachineConfiguration::kMemoryInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MachineConfiguration::MachineConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MachineConfiguration)
}
MachineConfiguration::MachineConfiguration(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  device_info_(arena),
  available_device_info_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MachineConfiguration)
}

void MachineConfiguration::InitAsDefaultInstance() {
  platform_info_ = const_cast< ::tensorflow::PlatformInfo*>(
      ::tensorflow::PlatformInfo::internal_default_instance());
  cpu_info_ = const_cast< ::tensorflow::CPUInfo*>(
      ::tensorflow::CPUInfo::internal_default_instance());
  memory_info_ = const_cast< ::tensorflow::MemoryInfo*>(
      ::tensorflow::MemoryInfo::internal_default_instance());
}

MachineConfiguration::MachineConfiguration(const MachineConfiguration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.MachineConfiguration)
}

void MachineConfiguration::SharedCtor() {
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_info_ = NULL;
  cpu_info_ = NULL;
  memory_info_ = NULL;
  _cached_size_ = 0;
}

MachineConfiguration::~MachineConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.MachineConfiguration)
  SharedDtor();
}

void MachineConfiguration::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  hostname_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  serial_identifier_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &MachineConfiguration_default_instance_.get()) {
    delete platform_info_;
    delete cpu_info_;
    delete memory_info_;
  }
}

void MachineConfiguration::ArenaDtor(void* object) {
  MachineConfiguration* _this = reinterpret_cast< MachineConfiguration* >(object);
  (void)_this;
}
void MachineConfiguration::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MachineConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineConfiguration_descriptor_;
}

const MachineConfiguration& MachineConfiguration::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MachineConfiguration> MachineConfiguration_default_instance_;

MachineConfiguration* MachineConfiguration::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MachineConfiguration>(arena);
}

void MachineConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MachineConfiguration)
  hostname_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  serial_identifier_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && platform_info_ != NULL) delete platform_info_;
  platform_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && cpu_info_ != NULL) delete cpu_info_;
  cpu_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && memory_info_ != NULL) delete memory_info_;
  memory_info_ = NULL;
  device_info_.Clear();
  available_device_info_.Clear();
}

bool MachineConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MachineConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MachineConfiguration.hostname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_platform_info;
        break;
      }

      // optional .tensorflow.PlatformInfo platform_info = 2;
      case 2: {
        if (tag == 18) {
         parse_platform_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_platform_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cpu_info;
        break;
      }

      // optional .tensorflow.CPUInfo cpu_info = 3;
      case 3: {
        if (tag == 26) {
         parse_cpu_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cpu_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_info;
        break;
      }

      // repeated .google.protobuf.Any device_info = 4;
      case 4: {
        if (tag == 34) {
         parse_device_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_device_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_device_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_device_info;
        if (input->ExpectTag(42)) goto parse_loop_available_device_info;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.AvailableDeviceInfo available_device_info = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_available_device_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_available_device_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_available_device_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_memory_info;
        break;
      }

      // optional .tensorflow.MemoryInfo memory_info = 6;
      case 6: {
        if (tag == 50) {
         parse_memory_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_serial_identifier;
        break;
      }

      // optional string serial_identifier = 7;
      case 7: {
        if (tag == 58) {
         parse_serial_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_identifier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_identifier().data(), this->serial_identifier().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.MachineConfiguration.serial_identifier"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MachineConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MachineConfiguration)
  return false;
#undef DO_
}

void MachineConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MachineConfiguration)
  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MachineConfiguration.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // optional .tensorflow.PlatformInfo platform_info = 2;
  if (this->has_platform_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->platform_info_, output);
  }

  // optional .tensorflow.CPUInfo cpu_info = 3;
  if (this->has_cpu_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cpu_info_, output);
  }

  // repeated .google.protobuf.Any device_info = 4;
  for (unsigned int i = 0, n = this->device_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->device_info(i), output);
  }

  // repeated .tensorflow.AvailableDeviceInfo available_device_info = 5;
  for (unsigned int i = 0, n = this->available_device_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->available_device_info(i), output);
  }

  // optional .tensorflow.MemoryInfo memory_info = 6;
  if (this->has_memory_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->memory_info_, output);
  }

  // optional string serial_identifier = 7;
  if (this->serial_identifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_identifier().data(), this->serial_identifier().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MachineConfiguration.serial_identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->serial_identifier(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.MachineConfiguration)
}

::google::protobuf::uint8* MachineConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MachineConfiguration)
  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MachineConfiguration.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional .tensorflow.PlatformInfo platform_info = 2;
  if (this->has_platform_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->platform_info_, false, target);
  }

  // optional .tensorflow.CPUInfo cpu_info = 3;
  if (this->has_cpu_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cpu_info_, false, target);
  }

  // repeated .google.protobuf.Any device_info = 4;
  for (unsigned int i = 0, n = this->device_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->device_info(i), false, target);
  }

  // repeated .tensorflow.AvailableDeviceInfo available_device_info = 5;
  for (unsigned int i = 0, n = this->available_device_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->available_device_info(i), false, target);
  }

  // optional .tensorflow.MemoryInfo memory_info = 6;
  if (this->has_memory_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->memory_info_, false, target);
  }

  // optional string serial_identifier = 7;
  if (this->serial_identifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_identifier().data(), this->serial_identifier().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MachineConfiguration.serial_identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serial_identifier(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MachineConfiguration)
  return target;
}

size_t MachineConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MachineConfiguration)
  size_t total_size = 0;

  // optional string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // optional string serial_identifier = 7;
  if (this->serial_identifier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_identifier());
  }

  // optional .tensorflow.PlatformInfo platform_info = 2;
  if (this->has_platform_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->platform_info_);
  }

  // optional .tensorflow.CPUInfo cpu_info = 3;
  if (this->has_cpu_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cpu_info_);
  }

  // optional .tensorflow.MemoryInfo memory_info = 6;
  if (this->has_memory_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->memory_info_);
  }

  // repeated .google.protobuf.Any device_info = 4;
  {
    unsigned int count = this->device_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_info(i));
    }
  }

  // repeated .tensorflow.AvailableDeviceInfo available_device_info = 5;
  {
    unsigned int count = this->available_device_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->available_device_info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MachineConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MachineConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MachineConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MachineConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MachineConfiguration)
    UnsafeMergeFrom(*source);
  }
}

void MachineConfiguration::MergeFrom(const MachineConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MachineConfiguration)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MachineConfiguration::UnsafeMergeFrom(const MachineConfiguration& from) {
  GOOGLE_DCHECK(&from != this);
  device_info_.MergeFrom(from.device_info_);
  available_device_info_.MergeFrom(from.available_device_info_);
  if (from.hostname().size() > 0) {
    set_hostname(from.hostname());
  }
  if (from.serial_identifier().size() > 0) {
    set_serial_identifier(from.serial_identifier());
  }
  if (from.has_platform_info()) {
    mutable_platform_info()->::tensorflow::PlatformInfo::MergeFrom(from.platform_info());
  }
  if (from.has_cpu_info()) {
    mutable_cpu_info()->::tensorflow::CPUInfo::MergeFrom(from.cpu_info());
  }
  if (from.has_memory_info()) {
    mutable_memory_info()->::tensorflow::MemoryInfo::MergeFrom(from.memory_info());
  }
}

void MachineConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MachineConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineConfiguration::CopyFrom(const MachineConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MachineConfiguration)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MachineConfiguration::IsInitialized() const {

  return true;
}

void MachineConfiguration::Swap(MachineConfiguration* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MachineConfiguration temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void MachineConfiguration::UnsafeArenaSwap(MachineConfiguration* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MachineConfiguration::InternalSwap(MachineConfiguration* other) {
  hostname_.Swap(&other->hostname_);
  serial_identifier_.Swap(&other->serial_identifier_);
  std::swap(platform_info_, other->platform_info_);
  std::swap(cpu_info_, other->cpu_info_);
  device_info_.UnsafeArenaSwap(&other->device_info_);
  available_device_info_.UnsafeArenaSwap(&other->available_device_info_);
  std::swap(memory_info_, other->memory_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MachineConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineConfiguration_descriptor_;
  metadata.reflection = MachineConfiguration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MachineConfiguration

// optional string hostname = 1;
void MachineConfiguration::clear_hostname() {
  hostname_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MachineConfiguration::hostname() const {
  // @@protoc_insertion_point(field_get:tensorflow.MachineConfiguration.hostname)
  return hostname_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MachineConfiguration::set_hostname(const ::std::string& value) {
  
  hostname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MachineConfiguration.hostname)
}
void MachineConfiguration::set_hostname(const char* value) {
  
  hostname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MachineConfiguration.hostname)
}
void MachineConfiguration::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MachineConfiguration.hostname)
}
::std::string* MachineConfiguration::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MachineConfiguration.hostname)
  return hostname_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MachineConfiguration::release_hostname() {
  // @@protoc_insertion_point(field_release:tensorflow.MachineConfiguration.hostname)
  
  return hostname_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MachineConfiguration::unsafe_arena_release_hostname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MachineConfiguration.hostname)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return hostname_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MachineConfiguration::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MachineConfiguration.hostname)
}
void MachineConfiguration::unsafe_arena_set_allocated_hostname(
    ::std::string* hostname) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      hostname, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MachineConfiguration.hostname)
}

// optional string serial_identifier = 7;
void MachineConfiguration::clear_serial_identifier() {
  serial_identifier_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MachineConfiguration::serial_identifier() const {
  // @@protoc_insertion_point(field_get:tensorflow.MachineConfiguration.serial_identifier)
  return serial_identifier_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MachineConfiguration::set_serial_identifier(const ::std::string& value) {
  
  serial_identifier_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MachineConfiguration.serial_identifier)
}
void MachineConfiguration::set_serial_identifier(const char* value) {
  
  serial_identifier_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MachineConfiguration.serial_identifier)
}
void MachineConfiguration::set_serial_identifier(const char* value,
    size_t size) {
  
  serial_identifier_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MachineConfiguration.serial_identifier)
}
::std::string* MachineConfiguration::mutable_serial_identifier() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MachineConfiguration.serial_identifier)
  return serial_identifier_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MachineConfiguration::release_serial_identifier() {
  // @@protoc_insertion_point(field_release:tensorflow.MachineConfiguration.serial_identifier)
  
  return serial_identifier_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MachineConfiguration::unsafe_arena_release_serial_identifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MachineConfiguration.serial_identifier)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return serial_identifier_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MachineConfiguration::set_allocated_serial_identifier(::std::string* serial_identifier) {
  if (serial_identifier != NULL) {
    
  } else {
    
  }
  serial_identifier_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_identifier,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MachineConfiguration.serial_identifier)
}
void MachineConfiguration::unsafe_arena_set_allocated_serial_identifier(
    ::std::string* serial_identifier) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (serial_identifier != NULL) {
    
  } else {
    
  }
  serial_identifier_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      serial_identifier, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MachineConfiguration.serial_identifier)
}

// optional .tensorflow.PlatformInfo platform_info = 2;
bool MachineConfiguration::has_platform_info() const {
  return this != internal_default_instance() && platform_info_ != NULL;
}
void MachineConfiguration::clear_platform_info() {
  if (GetArenaNoVirtual() == NULL && platform_info_ != NULL) delete platform_info_;
  platform_info_ = NULL;
}
const ::tensorflow::PlatformInfo& MachineConfiguration::platform_info() const {
  // @@protoc_insertion_point(field_get:tensorflow.MachineConfiguration.platform_info)
  return platform_info_ != NULL ? *platform_info_
                         : *::tensorflow::PlatformInfo::internal_default_instance();
}
::tensorflow::PlatformInfo* MachineConfiguration::mutable_platform_info() {
  
  if (platform_info_ == NULL) {
    _slow_mutable_platform_info();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.MachineConfiguration.platform_info)
  return platform_info_;
}
::tensorflow::PlatformInfo* MachineConfiguration::release_platform_info() {
  // @@protoc_insertion_point(field_release:tensorflow.MachineConfiguration.platform_info)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_platform_info();
  } else {
    ::tensorflow::PlatformInfo* temp = platform_info_;
    platform_info_ = NULL;
    return temp;
  }
}
 void MachineConfiguration::set_allocated_platform_info(::tensorflow::PlatformInfo* platform_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete platform_info_;
  }
  if (platform_info != NULL) {
    _slow_set_allocated_platform_info(message_arena, &platform_info);
  }
  platform_info_ = platform_info;
  if (platform_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MachineConfiguration.platform_info)
}

// optional .tensorflow.CPUInfo cpu_info = 3;
bool MachineConfiguration::has_cpu_info() const {
  return this != internal_default_instance() && cpu_info_ != NULL;
}
void MachineConfiguration::clear_cpu_info() {
  if (GetArenaNoVirtual() == NULL && cpu_info_ != NULL) delete cpu_info_;
  cpu_info_ = NULL;
}
const ::tensorflow::CPUInfo& MachineConfiguration::cpu_info() const {
  // @@protoc_insertion_point(field_get:tensorflow.MachineConfiguration.cpu_info)
  return cpu_info_ != NULL ? *cpu_info_
                         : *::tensorflow::CPUInfo::internal_default_instance();
}
::tensorflow::CPUInfo* MachineConfiguration::mutable_cpu_info() {
  
  if (cpu_info_ == NULL) {
    _slow_mutable_cpu_info();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.MachineConfiguration.cpu_info)
  return cpu_info_;
}
::tensorflow::CPUInfo* MachineConfiguration::release_cpu_info() {
  // @@protoc_insertion_point(field_release:tensorflow.MachineConfiguration.cpu_info)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_cpu_info();
  } else {
    ::tensorflow::CPUInfo* temp = cpu_info_;
    cpu_info_ = NULL;
    return temp;
  }
}
 void MachineConfiguration::set_allocated_cpu_info(::tensorflow::CPUInfo* cpu_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cpu_info_;
  }
  if (cpu_info != NULL) {
    _slow_set_allocated_cpu_info(message_arena, &cpu_info);
  }
  cpu_info_ = cpu_info;
  if (cpu_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MachineConfiguration.cpu_info)
}

// repeated .google.protobuf.Any device_info = 4;
int MachineConfiguration::device_info_size() const {
  return device_info_.size();
}
void MachineConfiguration::clear_device_info() {
  device_info_.Clear();
}
const ::google::protobuf::Any& MachineConfiguration::device_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.MachineConfiguration.device_info)
  return device_info_.Get(index);
}
::google::protobuf::Any* MachineConfiguration::mutable_device_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.MachineConfiguration.device_info)
  return device_info_.Mutable(index);
}
::google::protobuf::Any* MachineConfiguration::add_device_info() {
  // @@protoc_insertion_point(field_add:tensorflow.MachineConfiguration.device_info)
  return device_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
MachineConfiguration::mutable_device_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MachineConfiguration.device_info)
  return &device_info_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
MachineConfiguration::device_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.MachineConfiguration.device_info)
  return device_info_;
}

// repeated .tensorflow.AvailableDeviceInfo available_device_info = 5;
int MachineConfiguration::available_device_info_size() const {
  return available_device_info_.size();
}
void MachineConfiguration::clear_available_device_info() {
  available_device_info_.Clear();
}
const ::tensorflow::AvailableDeviceInfo& MachineConfiguration::available_device_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.MachineConfiguration.available_device_info)
  return available_device_info_.Get(index);
}
::tensorflow::AvailableDeviceInfo* MachineConfiguration::mutable_available_device_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.MachineConfiguration.available_device_info)
  return available_device_info_.Mutable(index);
}
::tensorflow::AvailableDeviceInfo* MachineConfiguration::add_available_device_info() {
  // @@protoc_insertion_point(field_add:tensorflow.MachineConfiguration.available_device_info)
  return available_device_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::AvailableDeviceInfo >*
MachineConfiguration::mutable_available_device_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MachineConfiguration.available_device_info)
  return &available_device_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::AvailableDeviceInfo >&
MachineConfiguration::available_device_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.MachineConfiguration.available_device_info)
  return available_device_info_;
}

// optional .tensorflow.MemoryInfo memory_info = 6;
bool MachineConfiguration::has_memory_info() const {
  return this != internal_default_instance() && memory_info_ != NULL;
}
void MachineConfiguration::clear_memory_info() {
  if (GetArenaNoVirtual() == NULL && memory_info_ != NULL) delete memory_info_;
  memory_info_ = NULL;
}
const ::tensorflow::MemoryInfo& MachineConfiguration::memory_info() const {
  // @@protoc_insertion_point(field_get:tensorflow.MachineConfiguration.memory_info)
  return memory_info_ != NULL ? *memory_info_
                         : *::tensorflow::MemoryInfo::internal_default_instance();
}
::tensorflow::MemoryInfo* MachineConfiguration::mutable_memory_info() {
  
  if (memory_info_ == NULL) {
    _slow_mutable_memory_info();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.MachineConfiguration.memory_info)
  return memory_info_;
}
::tensorflow::MemoryInfo* MachineConfiguration::release_memory_info() {
  // @@protoc_insertion_point(field_release:tensorflow.MachineConfiguration.memory_info)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_memory_info();
  } else {
    ::tensorflow::MemoryInfo* temp = memory_info_;
    memory_info_ = NULL;
    return temp;
  }
}
 void MachineConfiguration::set_allocated_memory_info(::tensorflow::MemoryInfo* memory_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete memory_info_;
  }
  if (memory_info != NULL) {
    _slow_set_allocated_memory_info(message_arena, &memory_info);
  }
  memory_info_ = memory_info;
  if (memory_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MachineConfiguration.memory_info)
}

inline const MachineConfiguration* MachineConfiguration::internal_default_instance() {
  return &MachineConfiguration_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunConfiguration::kArgumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunConfiguration::RunConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RunConfiguration)
}
RunConfiguration::RunConfiguration(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  argument_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunConfiguration)
}

void RunConfiguration::InitAsDefaultInstance() {
}

RunConfiguration::RunConfiguration(const RunConfiguration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunConfiguration)
}

void RunConfiguration::SharedCtor() {
  _cached_size_ = 0;
}

RunConfiguration::~RunConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.RunConfiguration)
  SharedDtor();
}

void RunConfiguration::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void RunConfiguration::ArenaDtor(void* object) {
  RunConfiguration* _this = reinterpret_cast< RunConfiguration* >(object);
  (void)_this;
}
void RunConfiguration::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RunConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunConfiguration_descriptor_;
}

const RunConfiguration& RunConfiguration::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RunConfiguration> RunConfiguration_default_instance_;

RunConfiguration* RunConfiguration::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RunConfiguration>(arena);
}

void RunConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunConfiguration)
  argument_.Clear();
}

bool RunConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RunConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string argument = 1;
      case 1: {
        if (tag == 10) {
         parse_argument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_argument()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->argument(this->argument_size() - 1).data(),
            this->argument(this->argument_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RunConfiguration.argument"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_argument;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RunConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RunConfiguration)
  return false;
#undef DO_
}

void RunConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RunConfiguration)
  // repeated string argument = 1;
  for (int i = 0; i < this->argument_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->argument(i).data(), this->argument(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunConfiguration.argument");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->argument(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.RunConfiguration)
}

::google::protobuf::uint8* RunConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunConfiguration)
  // repeated string argument = 1;
  for (int i = 0; i < this->argument_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->argument(i).data(), this->argument(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunConfiguration.argument");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->argument(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunConfiguration)
  return target;
}

size_t RunConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunConfiguration)
  size_t total_size = 0;

  // repeated string argument = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->argument_size());
  for (int i = 0; i < this->argument_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->argument(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RunConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RunConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RunConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RunConfiguration)
    UnsafeMergeFrom(*source);
  }
}

void RunConfiguration::MergeFrom(const RunConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunConfiguration)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RunConfiguration::UnsafeMergeFrom(const RunConfiguration& from) {
  GOOGLE_DCHECK(&from != this);
  argument_.UnsafeMergeFrom(from.argument_);
}

void RunConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RunConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunConfiguration::CopyFrom(const RunConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunConfiguration)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RunConfiguration::IsInitialized() const {

  return true;
}

void RunConfiguration::Swap(RunConfiguration* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RunConfiguration temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void RunConfiguration::UnsafeArenaSwap(RunConfiguration* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RunConfiguration::InternalSwap(RunConfiguration* other) {
  argument_.UnsafeArenaSwap(&other->argument_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunConfiguration_descriptor_;
  metadata.reflection = RunConfiguration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunConfiguration

// repeated string argument = 1;
int RunConfiguration::argument_size() const {
  return argument_.size();
}
void RunConfiguration::clear_argument() {
  argument_.Clear();
}
const ::std::string& RunConfiguration::argument(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RunConfiguration.argument)
  return argument_.Get(index);
}
::std::string* RunConfiguration::mutable_argument(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RunConfiguration.argument)
  return argument_.Mutable(index);
}
void RunConfiguration::set_argument(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RunConfiguration.argument)
  argument_.Mutable(index)->assign(value);
}
void RunConfiguration::set_argument(int index, const char* value) {
  argument_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.RunConfiguration.argument)
}
void RunConfiguration::set_argument(int index, const char* value, size_t size) {
  argument_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RunConfiguration.argument)
}
::std::string* RunConfiguration::add_argument() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.RunConfiguration.argument)
  return argument_.Add();
}
void RunConfiguration::add_argument(const ::std::string& value) {
  argument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.RunConfiguration.argument)
}
void RunConfiguration::add_argument(const char* value) {
  argument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.RunConfiguration.argument)
}
void RunConfiguration::add_argument(const char* value, size_t size) {
  argument_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.RunConfiguration.argument)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RunConfiguration::argument() const {
  // @@protoc_insertion_point(field_list:tensorflow.RunConfiguration.argument)
  return argument_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RunConfiguration::mutable_argument() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RunConfiguration.argument)
  return &argument_;
}

inline const RunConfiguration* RunConfiguration::internal_default_instance() {
  return &RunConfiguration_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TestResults_BenchmarkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestResults_BenchmarkType_descriptor_;
}
bool TestResults_BenchmarkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TestResults_BenchmarkType TestResults::UNKNOWN;
const TestResults_BenchmarkType TestResults::CPP_MICROBENCHMARK;
const TestResults_BenchmarkType TestResults::PYTHON_BENCHMARK;
const TestResults_BenchmarkType TestResults::ANDROID_BENCHMARK;
const TestResults_BenchmarkType TestResults::BenchmarkType_MIN;
const TestResults_BenchmarkType TestResults::BenchmarkType_MAX;
const int TestResults::BenchmarkType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
void TestResults::_slow_mutable_entries() {
  entries_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::BenchmarkEntries >(
      GetArenaNoVirtual());
}
::tensorflow::BenchmarkEntries* TestResults::_slow_release_entries() {
  if (entries_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::BenchmarkEntries* temp = new ::tensorflow::BenchmarkEntries(*entries_);
    entries_ = NULL;
    return temp;
  }
}
::tensorflow::BenchmarkEntries* TestResults::unsafe_arena_release_entries() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TestResults.entries)
  
  ::tensorflow::BenchmarkEntries* temp = entries_;
  entries_ = NULL;
  return temp;
}
void TestResults::_slow_set_allocated_entries(
    ::google::protobuf::Arena* message_arena, ::tensorflow::BenchmarkEntries** entries) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*entries) == NULL) {
      message_arena->Own(*entries);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*entries)) {
      ::tensorflow::BenchmarkEntries* new_entries = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::BenchmarkEntries >(
            message_arena);
      new_entries->CopyFrom(**entries);
      *entries = new_entries;
    }
}
void TestResults::unsafe_arena_set_allocated_entries(
    ::tensorflow::BenchmarkEntries* entries) {
  if (GetArenaNoVirtual() == NULL) {
    delete entries_;
  }
  entries_ = entries;
  if (entries) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TestResults.entries)
}
void TestResults::_slow_mutable_build_configuration() {
  build_configuration_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::BuildConfiguration >(
      GetArenaNoVirtual());
}
::tensorflow::BuildConfiguration* TestResults::_slow_release_build_configuration() {
  if (build_configuration_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::BuildConfiguration* temp = new ::tensorflow::BuildConfiguration(*build_configuration_);
    build_configuration_ = NULL;
    return temp;
  }
}
::tensorflow::BuildConfiguration* TestResults::unsafe_arena_release_build_configuration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TestResults.build_configuration)
  
  ::tensorflow::BuildConfiguration* temp = build_configuration_;
  build_configuration_ = NULL;
  return temp;
}
void TestResults::_slow_set_allocated_build_configuration(
    ::google::protobuf::Arena* message_arena, ::tensorflow::BuildConfiguration** build_configuration) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*build_configuration) == NULL) {
      message_arena->Own(*build_configuration);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*build_configuration)) {
      ::tensorflow::BuildConfiguration* new_build_configuration = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::BuildConfiguration >(
            message_arena);
      new_build_configuration->CopyFrom(**build_configuration);
      *build_configuration = new_build_configuration;
    }
}
void TestResults::unsafe_arena_set_allocated_build_configuration(
    ::tensorflow::BuildConfiguration* build_configuration) {
  if (GetArenaNoVirtual() == NULL) {
    delete build_configuration_;
  }
  build_configuration_ = build_configuration;
  if (build_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TestResults.build_configuration)
}
void TestResults::_slow_mutable_commit_id() {
  commit_id_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::CommitId >(
      GetArenaNoVirtual());
}
::tensorflow::CommitId* TestResults::_slow_release_commit_id() {
  if (commit_id_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::CommitId* temp = new ::tensorflow::CommitId(*commit_id_);
    commit_id_ = NULL;
    return temp;
  }
}
::tensorflow::CommitId* TestResults::unsafe_arena_release_commit_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TestResults.commit_id)
  
  ::tensorflow::CommitId* temp = commit_id_;
  commit_id_ = NULL;
  return temp;
}
void TestResults::_slow_set_allocated_commit_id(
    ::google::protobuf::Arena* message_arena, ::tensorflow::CommitId** commit_id) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commit_id) == NULL) {
      message_arena->Own(*commit_id);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commit_id)) {
      ::tensorflow::CommitId* new_commit_id = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::CommitId >(
            message_arena);
      new_commit_id->CopyFrom(**commit_id);
      *commit_id = new_commit_id;
    }
}
void TestResults::unsafe_arena_set_allocated_commit_id(
    ::tensorflow::CommitId* commit_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete commit_id_;
  }
  commit_id_ = commit_id;
  if (commit_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TestResults.commit_id)
}
void TestResults::_slow_mutable_machine_configuration() {
  machine_configuration_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::MachineConfiguration >(
      GetArenaNoVirtual());
}
::tensorflow::MachineConfiguration* TestResults::_slow_release_machine_configuration() {
  if (machine_configuration_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::MachineConfiguration* temp = new ::tensorflow::MachineConfiguration(*machine_configuration_);
    machine_configuration_ = NULL;
    return temp;
  }
}
::tensorflow::MachineConfiguration* TestResults::unsafe_arena_release_machine_configuration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TestResults.machine_configuration)
  
  ::tensorflow::MachineConfiguration* temp = machine_configuration_;
  machine_configuration_ = NULL;
  return temp;
}
void TestResults::_slow_set_allocated_machine_configuration(
    ::google::protobuf::Arena* message_arena, ::tensorflow::MachineConfiguration** machine_configuration) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*machine_configuration) == NULL) {
      message_arena->Own(*machine_configuration);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*machine_configuration)) {
      ::tensorflow::MachineConfiguration* new_machine_configuration = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::MachineConfiguration >(
            message_arena);
      new_machine_configuration->CopyFrom(**machine_configuration);
      *machine_configuration = new_machine_configuration;
    }
}
void TestResults::unsafe_arena_set_allocated_machine_configuration(
    ::tensorflow::MachineConfiguration* machine_configuration) {
  if (GetArenaNoVirtual() == NULL) {
    delete machine_configuration_;
  }
  machine_configuration_ = machine_configuration;
  if (machine_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TestResults.machine_configuration)
}
void TestResults::_slow_mutable_run_configuration() {
  run_configuration_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunConfiguration >(
      GetArenaNoVirtual());
}
::tensorflow::RunConfiguration* TestResults::_slow_release_run_configuration() {
  if (run_configuration_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::RunConfiguration* temp = new ::tensorflow::RunConfiguration(*run_configuration_);
    run_configuration_ = NULL;
    return temp;
  }
}
::tensorflow::RunConfiguration* TestResults::unsafe_arena_release_run_configuration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TestResults.run_configuration)
  
  ::tensorflow::RunConfiguration* temp = run_configuration_;
  run_configuration_ = NULL;
  return temp;
}
void TestResults::_slow_set_allocated_run_configuration(
    ::google::protobuf::Arena* message_arena, ::tensorflow::RunConfiguration** run_configuration) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*run_configuration) == NULL) {
      message_arena->Own(*run_configuration);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*run_configuration)) {
      ::tensorflow::RunConfiguration* new_run_configuration = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::RunConfiguration >(
            message_arena);
      new_run_configuration->CopyFrom(**run_configuration);
      *run_configuration = new_run_configuration;
    }
}
void TestResults::unsafe_arena_set_allocated_run_configuration(
    ::tensorflow::RunConfiguration* run_configuration) {
  if (GetArenaNoVirtual() == NULL) {
    delete run_configuration_;
  }
  run_configuration_ = run_configuration;
  if (run_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TestResults.run_configuration)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestResults::kTargetFieldNumber;
const int TestResults::kEntriesFieldNumber;
const int TestResults::kBuildConfigurationFieldNumber;
const int TestResults::kCommitIdFieldNumber;
const int TestResults::kStartTimeFieldNumber;
const int TestResults::kRunTimeFieldNumber;
const int TestResults::kMachineConfigurationFieldNumber;
const int TestResults::kRunConfigurationFieldNumber;
const int TestResults::kNameFieldNumber;
const int TestResults::kBenchmarkTypeFieldNumber;
const int TestResults::kRunModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestResults::TestResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TestResults)
}
TestResults::TestResults(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TestResults)
}

void TestResults::InitAsDefaultInstance() {
  entries_ = const_cast< ::tensorflow::BenchmarkEntries*>(
      ::tensorflow::BenchmarkEntries::internal_default_instance());
  build_configuration_ = const_cast< ::tensorflow::BuildConfiguration*>(
      ::tensorflow::BuildConfiguration::internal_default_instance());
  commit_id_ = const_cast< ::tensorflow::CommitId*>(
      ::tensorflow::CommitId::internal_default_instance());
  machine_configuration_ = const_cast< ::tensorflow::MachineConfiguration*>(
      ::tensorflow::MachineConfiguration::internal_default_instance());
  run_configuration_ = const_cast< ::tensorflow::RunConfiguration*>(
      ::tensorflow::RunConfiguration::internal_default_instance());
}

TestResults::TestResults(const TestResults& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TestResults)
}

void TestResults::SharedCtor() {
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  run_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entries_ = NULL;
  build_configuration_ = NULL;
  commit_id_ = NULL;
  machine_configuration_ = NULL;
  run_configuration_ = NULL;
  ::memset(&start_time_, 0, reinterpret_cast<char*>(&benchmark_type_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(benchmark_type_));
  _cached_size_ = 0;
}

TestResults::~TestResults() {
  // @@protoc_insertion_point(destructor:tensorflow.TestResults)
  SharedDtor();
}

void TestResults::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  target_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  run_mode_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != &TestResults_default_instance_.get()) {
    delete entries_;
    delete build_configuration_;
    delete commit_id_;
    delete machine_configuration_;
    delete run_configuration_;
  }
}

void TestResults::ArenaDtor(void* object) {
  TestResults* _this = reinterpret_cast< TestResults* >(object);
  (void)_this;
}
void TestResults::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TestResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestResults_descriptor_;
}

const TestResults& TestResults::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2futil_2ftest_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TestResults> TestResults_default_instance_;

TestResults* TestResults::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TestResults>(arena);
}

void TestResults::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TestResults)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TestResults, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TestResults*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_time_, run_time_);
  target_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && entries_ != NULL) delete entries_;
  entries_ = NULL;
  if (GetArenaNoVirtual() == NULL && build_configuration_ != NULL) delete build_configuration_;
  build_configuration_ = NULL;
  if (GetArenaNoVirtual() == NULL && commit_id_ != NULL) delete commit_id_;
  commit_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && machine_configuration_ != NULL) delete machine_configuration_;
  machine_configuration_ = NULL;
  if (GetArenaNoVirtual() == NULL && run_configuration_ != NULL) delete run_configuration_;
  run_configuration_ = NULL;
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  benchmark_type_ = 0;
  run_mode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool TestResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TestResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string target = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TestResults.target"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }

      // optional .tensorflow.BenchmarkEntries entries = 2;
      case 2: {
        if (tag == 18) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_build_configuration;
        break;
      }

      // optional .tensorflow.BuildConfiguration build_configuration = 3;
      case 3: {
        if (tag == 26) {
         parse_build_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_build_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_commit_id;
        break;
      }

      // optional .tensorflow.CommitId commit_id = 4;
      case 4: {
        if (tag == 34) {
         parse_commit_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commit_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 5;
      case 5: {
        if (tag == 40) {
         parse_start_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_run_time;
        break;
      }

      // optional double run_time = 6;
      case 6: {
        if (tag == 49) {
         parse_run_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &run_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_machine_configuration;
        break;
      }

      // optional .tensorflow.MachineConfiguration machine_configuration = 7;
      case 7: {
        if (tag == 58) {
         parse_machine_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_run_configuration;
        break;
      }

      // optional .tensorflow.RunConfiguration run_configuration = 8;
      case 8: {
        if (tag == 66) {
         parse_run_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_run_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // optional string name = 9;
      case 9: {
        if (tag == 74) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TestResults.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_benchmark_type;
        break;
      }

      // optional .tensorflow.TestResults.BenchmarkType benchmark_type = 10;
      case 10: {
        if (tag == 80) {
         parse_benchmark_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_benchmark_type(static_cast< ::tensorflow::TestResults_BenchmarkType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_run_mode;
        break;
      }

      // optional string run_mode = 11;
      case 11: {
        if (tag == 90) {
         parse_run_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_run_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->run_mode().data(), this->run_mode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.TestResults.run_mode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TestResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TestResults)
  return false;
#undef DO_
}

void TestResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TestResults)
  // optional string target = 1;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->target(), output);
  }

  // optional .tensorflow.BenchmarkEntries entries = 2;
  if (this->has_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->entries_, output);
  }

  // optional .tensorflow.BuildConfiguration build_configuration = 3;
  if (this->has_build_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->build_configuration_, output);
  }

  // optional .tensorflow.CommitId commit_id = 4;
  if (this->has_commit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->commit_id_, output);
  }

  // optional int64 start_time = 5;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->start_time(), output);
  }

  // optional double run_time = 6;
  if (this->run_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->run_time(), output);
  }

  // optional .tensorflow.MachineConfiguration machine_configuration = 7;
  if (this->has_machine_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->machine_configuration_, output);
  }

  // optional .tensorflow.RunConfiguration run_configuration = 8;
  if (this->has_run_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->run_configuration_, output);
  }

  // optional string name = 9;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->name(), output);
  }

  // optional .tensorflow.TestResults.BenchmarkType benchmark_type = 10;
  if (this->benchmark_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->benchmark_type(), output);
  }

  // optional string run_mode = 11;
  if (this->run_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->run_mode().data(), this->run_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.run_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->run_mode(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.TestResults)
}

::google::protobuf::uint8* TestResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TestResults)
  // optional string target = 1;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target(), target);
  }

  // optional .tensorflow.BenchmarkEntries entries = 2;
  if (this->has_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->entries_, false, target);
  }

  // optional .tensorflow.BuildConfiguration build_configuration = 3;
  if (this->has_build_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->build_configuration_, false, target);
  }

  // optional .tensorflow.CommitId commit_id = 4;
  if (this->has_commit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->commit_id_, false, target);
  }

  // optional int64 start_time = 5;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->start_time(), target);
  }

  // optional double run_time = 6;
  if (this->run_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->run_time(), target);
  }

  // optional .tensorflow.MachineConfiguration machine_configuration = 7;
  if (this->has_machine_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->machine_configuration_, false, target);
  }

  // optional .tensorflow.RunConfiguration run_configuration = 8;
  if (this->has_run_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->run_configuration_, false, target);
  }

  // optional string name = 9;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  // optional .tensorflow.TestResults.BenchmarkType benchmark_type = 10;
  if (this->benchmark_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->benchmark_type(), target);
  }

  // optional string run_mode = 11;
  if (this->run_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->run_mode().data(), this->run_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.run_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->run_mode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TestResults)
  return target;
}

size_t TestResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TestResults)
  size_t total_size = 0;

  // optional string target = 1;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target());
  }

  // optional .tensorflow.BenchmarkEntries entries = 2;
  if (this->has_entries()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entries_);
  }

  // optional .tensorflow.BuildConfiguration build_configuration = 3;
  if (this->has_build_configuration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->build_configuration_);
  }

  // optional .tensorflow.CommitId commit_id = 4;
  if (this->has_commit_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commit_id_);
  }

  // optional int64 start_time = 5;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_time());
  }

  // optional double run_time = 6;
  if (this->run_time() != 0) {
    total_size += 1 + 8;
  }

  // optional .tensorflow.MachineConfiguration machine_configuration = 7;
  if (this->has_machine_configuration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->machine_configuration_);
  }

  // optional .tensorflow.RunConfiguration run_configuration = 8;
  if (this->has_run_configuration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->run_configuration_);
  }

  // optional string name = 9;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .tensorflow.TestResults.BenchmarkType benchmark_type = 10;
  if (this->benchmark_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->benchmark_type());
  }

  // optional string run_mode = 11;
  if (this->run_mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->run_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TestResults)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TestResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TestResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TestResults)
    UnsafeMergeFrom(*source);
  }
}

void TestResults::MergeFrom(const TestResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TestResults)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TestResults::UnsafeMergeFrom(const TestResults& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.target().size() > 0) {
    set_target(from.target());
  }
  if (from.has_entries()) {
    mutable_entries()->::tensorflow::BenchmarkEntries::MergeFrom(from.entries());
  }
  if (from.has_build_configuration()) {
    mutable_build_configuration()->::tensorflow::BuildConfiguration::MergeFrom(from.build_configuration());
  }
  if (from.has_commit_id()) {
    mutable_commit_id()->::tensorflow::CommitId::MergeFrom(from.commit_id());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.run_time() != 0) {
    set_run_time(from.run_time());
  }
  if (from.has_machine_configuration()) {
    mutable_machine_configuration()->::tensorflow::MachineConfiguration::MergeFrom(from.machine_configuration());
  }
  if (from.has_run_configuration()) {
    mutable_run_configuration()->::tensorflow::RunConfiguration::MergeFrom(from.run_configuration());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.benchmark_type() != 0) {
    set_benchmark_type(from.benchmark_type());
  }
  if (from.run_mode().size() > 0) {
    set_run_mode(from.run_mode());
  }
}

void TestResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TestResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestResults::CopyFrom(const TestResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TestResults)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TestResults::IsInitialized() const {

  return true;
}

void TestResults::Swap(TestResults* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TestResults temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void TestResults::UnsafeArenaSwap(TestResults* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TestResults::InternalSwap(TestResults* other) {
  target_.Swap(&other->target_);
  std::swap(entries_, other->entries_);
  std::swap(build_configuration_, other->build_configuration_);
  std::swap(commit_id_, other->commit_id_);
  std::swap(start_time_, other->start_time_);
  std::swap(run_time_, other->run_time_);
  std::swap(machine_configuration_, other->machine_configuration_);
  std::swap(run_configuration_, other->run_configuration_);
  name_.Swap(&other->name_);
  std::swap(benchmark_type_, other->benchmark_type_);
  run_mode_.Swap(&other->run_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestResults_descriptor_;
  metadata.reflection = TestResults_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestResults

// optional string target = 1;
void TestResults::clear_target() {
  target_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& TestResults::target() const {
  // @@protoc_insertion_point(field_get:tensorflow.TestResults.target)
  return target_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestResults::set_target(const ::std::string& value) {
  
  target_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.TestResults.target)
}
void TestResults::set_target(const char* value) {
  
  target_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.TestResults.target)
}
void TestResults::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TestResults.target)
}
::std::string* TestResults::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TestResults.target)
  return target_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TestResults::release_target() {
  // @@protoc_insertion_point(field_release:tensorflow.TestResults.target)
  
  return target_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TestResults::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TestResults.target)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return target_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void TestResults::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    
  } else {
    
  }
  target_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TestResults.target)
}
void TestResults::unsafe_arena_set_allocated_target(
    ::std::string* target) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (target != NULL) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      target, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TestResults.target)
}

// optional .tensorflow.BenchmarkEntries entries = 2;
bool TestResults::has_entries() const {
  return this != internal_default_instance() && entries_ != NULL;
}
void TestResults::clear_entries() {
  if (GetArenaNoVirtual() == NULL && entries_ != NULL) delete entries_;
  entries_ = NULL;
}
const ::tensorflow::BenchmarkEntries& TestResults::entries() const {
  // @@protoc_insertion_point(field_get:tensorflow.TestResults.entries)
  return entries_ != NULL ? *entries_
                         : *::tensorflow::BenchmarkEntries::internal_default_instance();
}
::tensorflow::BenchmarkEntries* TestResults::mutable_entries() {
  
  if (entries_ == NULL) {
    _slow_mutable_entries();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TestResults.entries)
  return entries_;
}
::tensorflow::BenchmarkEntries* TestResults::release_entries() {
  // @@protoc_insertion_point(field_release:tensorflow.TestResults.entries)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_entries();
  } else {
    ::tensorflow::BenchmarkEntries* temp = entries_;
    entries_ = NULL;
    return temp;
  }
}
 void TestResults::set_allocated_entries(::tensorflow::BenchmarkEntries* entries) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete entries_;
  }
  if (entries != NULL) {
    _slow_set_allocated_entries(message_arena, &entries);
  }
  entries_ = entries;
  if (entries) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TestResults.entries)
}

// optional .tensorflow.BuildConfiguration build_configuration = 3;
bool TestResults::has_build_configuration() const {
  return this != internal_default_instance() && build_configuration_ != NULL;
}
void TestResults::clear_build_configuration() {
  if (GetArenaNoVirtual() == NULL && build_configuration_ != NULL) delete build_configuration_;
  build_configuration_ = NULL;
}
const ::tensorflow::BuildConfiguration& TestResults::build_configuration() const {
  // @@protoc_insertion_point(field_get:tensorflow.TestResults.build_configuration)
  return build_configuration_ != NULL ? *build_configuration_
                         : *::tensorflow::BuildConfiguration::internal_default_instance();
}
::tensorflow::BuildConfiguration* TestResults::mutable_build_configuration() {
  
  if (build_configuration_ == NULL) {
    _slow_mutable_build_configuration();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TestResults.build_configuration)
  return build_configuration_;
}
::tensorflow::BuildConfiguration* TestResults::release_build_configuration() {
  // @@protoc_insertion_point(field_release:tensorflow.TestResults.build_configuration)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_build_configuration();
  } else {
    ::tensorflow::BuildConfiguration* temp = build_configuration_;
    build_configuration_ = NULL;
    return temp;
  }
}
 void TestResults::set_allocated_build_configuration(::tensorflow::BuildConfiguration* build_configuration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete build_configuration_;
  }
  if (build_configuration != NULL) {
    _slow_set_allocated_build_configuration(message_arena, &build_configuration);
  }
  build_configuration_ = build_configuration;
  if (build_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TestResults.build_configuration)
}

// optional .tensorflow.CommitId commit_id = 4;
bool TestResults::has_commit_id() const {
  return this != internal_default_instance() && commit_id_ != NULL;
}
void TestResults::clear_commit_id() {
  if (GetArenaNoVirtual() == NULL && commit_id_ != NULL) delete commit_id_;
  commit_id_ = NULL;
}
const ::tensorflow::CommitId& TestResults::commit_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.TestResults.commit_id)
  return commit_id_ != NULL ? *commit_id_
                         : *::tensorflow::CommitId::internal_default_instance();
}
::tensorflow::CommitId* TestResults::mutable_commit_id() {
  
  if (commit_id_ == NULL) {
    _slow_mutable_commit_id();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TestResults.commit_id)
  return commit_id_;
}
::tensorflow::CommitId* TestResults::release_commit_id() {
  // @@protoc_insertion_point(field_release:tensorflow.TestResults.commit_id)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commit_id();
  } else {
    ::tensorflow::CommitId* temp = commit_id_;
    commit_id_ = NULL;
    return temp;
  }
}
 void TestResults::set_allocated_commit_id(::tensorflow::CommitId* commit_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commit_id_;
  }
  if (commit_id != NULL) {
    _slow_set_allocated_commit_id(message_arena, &commit_id);
  }
  commit_id_ = commit_id;
  if (commit_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TestResults.commit_id)
}

// optional int64 start_time = 5;
void TestResults::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TestResults::start_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.TestResults.start_time)
  return start_time_;
}
void TestResults::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TestResults.start_time)
}

// optional double run_time = 6;
void TestResults::clear_run_time() {
  run_time_ = 0;
}
double TestResults::run_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.TestResults.run_time)
  return run_time_;
}
void TestResults::set_run_time(double value) {
  
  run_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TestResults.run_time)
}

// optional .tensorflow.MachineConfiguration machine_configuration = 7;
bool TestResults::has_machine_configuration() const {
  return this != internal_default_instance() && machine_configuration_ != NULL;
}
void TestResults::clear_machine_configuration() {
  if (GetArenaNoVirtual() == NULL && machine_configuration_ != NULL) delete machine_configuration_;
  machine_configuration_ = NULL;
}
const ::tensorflow::MachineConfiguration& TestResults::machine_configuration() const {
  // @@protoc_insertion_point(field_get:tensorflow.TestResults.machine_configuration)
  return machine_configuration_ != NULL ? *machine_configuration_
                         : *::tensorflow::MachineConfiguration::internal_default_instance();
}
::tensorflow::MachineConfiguration* TestResults::mutable_machine_configuration() {
  
  if (machine_configuration_ == NULL) {
    _slow_mutable_machine_configuration();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TestResults.machine_configuration)
  return machine_configuration_;
}
::tensorflow::MachineConfiguration* TestResults::release_machine_configuration() {
  // @@protoc_insertion_point(field_release:tensorflow.TestResults.machine_configuration)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_machine_configuration();
  } else {
    ::tensorflow::MachineConfiguration* temp = machine_configuration_;
    machine_configuration_ = NULL;
    return temp;
  }
}
 void TestResults::set_allocated_machine_configuration(::tensorflow::MachineConfiguration* machine_configuration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete machine_configuration_;
  }
  if (machine_configuration != NULL) {
    _slow_set_allocated_machine_configuration(message_arena, &machine_configuration);
  }
  machine_configuration_ = machine_configuration;
  if (machine_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TestResults.machine_configuration)
}

// optional .tensorflow.RunConfiguration run_configuration = 8;
bool TestResults::has_run_configuration() const {
  return this != internal_default_instance() && run_configuration_ != NULL;
}
void TestResults::clear_run_configuration() {
  if (GetArenaNoVirtual() == NULL && run_configuration_ != NULL) delete run_configuration_;
  run_configuration_ = NULL;
}
const ::tensorflow::RunConfiguration& TestResults::run_configuration() const {
  // @@protoc_insertion_point(field_get:tensorflow.TestResults.run_configuration)
  return run_configuration_ != NULL ? *run_configuration_
                         : *::tensorflow::RunConfiguration::internal_default_instance();
}
::tensorflow::RunConfiguration* TestResults::mutable_run_configuration() {
  
  if (run_configuration_ == NULL) {
    _slow_mutable_run_configuration();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.TestResults.run_configuration)
  return run_configuration_;
}
::tensorflow::RunConfiguration* TestResults::release_run_configuration() {
  // @@protoc_insertion_point(field_release:tensorflow.TestResults.run_configuration)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_run_configuration();
  } else {
    ::tensorflow::RunConfiguration* temp = run_configuration_;
    run_configuration_ = NULL;
    return temp;
  }
}
 void TestResults::set_allocated_run_configuration(::tensorflow::RunConfiguration* run_configuration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete run_configuration_;
  }
  if (run_configuration != NULL) {
    _slow_set_allocated_run_configuration(message_arena, &run_configuration);
  }
  run_configuration_ = run_configuration;
  if (run_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TestResults.run_configuration)
}

// optional string name = 9;
void TestResults::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& TestResults::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.TestResults.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestResults::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.TestResults.name)
}
void TestResults::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.TestResults.name)
}
void TestResults::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TestResults.name)
}
::std::string* TestResults::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TestResults.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TestResults::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.TestResults.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TestResults::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TestResults.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void TestResults::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TestResults.name)
}
void TestResults::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TestResults.name)
}

// optional .tensorflow.TestResults.BenchmarkType benchmark_type = 10;
void TestResults::clear_benchmark_type() {
  benchmark_type_ = 0;
}
::tensorflow::TestResults_BenchmarkType TestResults::benchmark_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.TestResults.benchmark_type)
  return static_cast< ::tensorflow::TestResults_BenchmarkType >(benchmark_type_);
}
void TestResults::set_benchmark_type(::tensorflow::TestResults_BenchmarkType value) {
  
  benchmark_type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.TestResults.benchmark_type)
}

// optional string run_mode = 11;
void TestResults::clear_run_mode() {
  run_mode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& TestResults::run_mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.TestResults.run_mode)
  return run_mode_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestResults::set_run_mode(const ::std::string& value) {
  
  run_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.TestResults.run_mode)
}
void TestResults::set_run_mode(const char* value) {
  
  run_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.TestResults.run_mode)
}
void TestResults::set_run_mode(const char* value,
    size_t size) {
  
  run_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TestResults.run_mode)
}
::std::string* TestResults::mutable_run_mode() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.TestResults.run_mode)
  return run_mode_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TestResults::release_run_mode() {
  // @@protoc_insertion_point(field_release:tensorflow.TestResults.run_mode)
  
  return run_mode_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* TestResults::unsafe_arena_release_run_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.TestResults.run_mode)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return run_mode_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void TestResults::set_allocated_run_mode(::std::string* run_mode) {
  if (run_mode != NULL) {
    
  } else {
    
  }
  run_mode_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), run_mode,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TestResults.run_mode)
}
void TestResults::unsafe_arena_set_allocated_run_mode(
    ::std::string* run_mode) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (run_mode != NULL) {
    
  } else {
    
  }
  run_mode_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      run_mode, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TestResults.run_mode)
}

inline const TestResults* TestResults::internal_default_instance() {
  return &TestResults_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
